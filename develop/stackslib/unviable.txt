stackslib/src/blockstack_cli.rs:193:9: replace <impl Error for CliError>::source -> Option<&(dyn std::error::Error +'static)> with Some(&Default::default())
stackslib/src/blockstack_cli.rs:256:9: replace <impl From for CliError>::from -> Self with Default::default()
stackslib/src/blockstack_cli.rs:262:9: replace <impl From for CliError>::from -> Self with Default::default()
stackslib/src/blockstack_cli.rs:270:5: replace make_contract_publish -> Result<TransactionSmartContract, CliError> with Ok(Default::default())
stackslib/src/blockstack_cli.rs:282:5: replace make_contract_call -> Result<TransactionContractCall, CliError> with Ok(Default::default())
stackslib/src/blockstack_cli.rs:303:5: replace make_standard_single_sig_tx -> StacksTransaction with Default::default()
stackslib/src/blockstack_cli.rs:318:5: replace sign_transaction_single_sig_standard -> Result<StacksTransaction, CliError> with Ok(Default::default())
stackslib/src/blockstack_cli.rs:333:5: replace parse_anchor_mode -> Result<TransactionAnchorMode, CliError> with Ok(Default::default())
stackslib/src/blockstack_cli.rs:214:9: replace <impl From for CliError>::from -> Self with Default::default()
stackslib/src/blockstack_cli.rs:226:9: replace <impl From for CliError>::from -> Self with Default::default()
stackslib/src/blockstack_cli.rs:238:9: replace <impl From for CliError>::from -> Self with Default::default()
stackslib/src/blockstack_cli.rs:220:9: replace <impl From for CliError>::from -> Self with Default::default()
stackslib/src/blockstack_cli.rs:244:9: replace <impl From for CliError>::from -> Self with Default::default()
stackslib/src/blockstack_cli.rs:232:9: replace <impl From for CliError>::from -> Self with Default::default()
stackslib/src/blockstack_cli.rs:250:9: replace <impl From for CliError>::from -> Self with Default::default()
stackslib/src/net/mod.rs:284:9: replace <impl From for Error>::from -> Self with Default::default()
stackslib/src/net/mod.rs:293:9: replace <impl From for Error>::from -> Self with Default::default()
stackslib/src/net/mod.rs:309:9: replace <impl From for Error>::from -> Error with Default::default()
stackslib/src/net/mod.rs:315:9: replace <impl From for Error>::from -> Error with Default::default()
stackslib/src/net/mod.rs:433:9: replace <impl Error for Error>::cause -> Option<&dyn error::Error> with Some(&Default::default())
stackslib/src/net/mod.rs:505:9: replace <impl From for Error>::from -> Error with Default::default()
stackslib/src/net/mod.rs:531:9: replace <impl From for Error>::from -> Error with Default::default()
stackslib/src/net/mod.rs:537:9: replace <impl From for Error>::from -> Error with Default::default()
stackslib/src/net/mod.rs:543:9: replace <impl From for Error>::from -> Self with Default::default()
stackslib/src/net/mod.rs:549:9: replace <impl From for Error>::from -> Self with Default::default()
stackslib/src/net/mod.rs:570:9: replace <impl PeerHostExtensions for PeerHost>::try_from_url -> Option<PeerHost> with Some(Default::default())
stackslib/src/net/mod.rs:620:9: replace RPCHandlerArgs<'a>::get_estimators_ref -> Option<(&dyn CostEstimator, &dyn FeeEstimator, &dyn CostMetric)> with Some((&Default::default(), &Default::default(), &Default::default()))
stackslib/src/net/mod.rs:666:9: replace StacksNodeState<'a>::with_node_state -> R with Default::default()
stackslib/src/net/mod.rs:709:9: replace StacksNodeState<'a>::take_relay_message -> Option<StacksMessageType> with Some(Default::default())
stackslib/src/net/mod.rs:736:9: replace StacksNodeState<'a>::load_stacks_chain_tip -> Result<StacksBlockId, StacksHttpResponse> with Ok(Default::default())
stackslib/src/net/mod.rs:915:9: replace NeighborAddress::from_neighbor_key -> NeighborAddress with Default::default()
stackslib/src/net/mod.rs:1265:9: replace NeighborKey::empty -> NeighborKey with Default::default()
stackslib/src/net/mod.rs:1278:9: replace NeighborKey::from_neighbor_address -> NeighborKey with Default::default()
stackslib/src/net/mod.rs:1441:9: replace NetworkResult::transactions -> Vec<StacksTransaction> with vec![Default::default()]
stackslib/src/burnchains/mod.rs:99:9: replace BurnchainParameters::from_params -> Option<BurnchainParameters> with Some(Default::default())
stackslib/src/burnchains/mod.rs:108:9: replace BurnchainParameters::bitcoin_mainnet -> BurnchainParameters with Default::default()
stackslib/src/burnchains/mod.rs:123:9: replace BurnchainParameters::bitcoin_testnet -> BurnchainParameters with Default::default()
stackslib/src/burnchains/mod.rs:138:9: replace BurnchainParameters::bitcoin_regtest -> BurnchainParameters with Default::default()
stackslib/src/burnchains/mod.rs:189:9: replace BurnchainTransaction::txid -> Txid with Default::default()
stackslib/src/burnchains/mod.rs:219:9: replace BurnchainTransaction::get_input_tx_ref -> Option<&(Txid, u32)> with Some(&(Default::default(), 0))
stackslib/src/burnchains/mod.rs:219:9: replace BurnchainTransaction::get_input_tx_ref -> Option<&(Txid, u32)> with Some(&(Default::default(), 1))
stackslib/src/burnchains/mod.rs:230:9: replace BurnchainTransaction::get_recipients -> Vec<Option<BurnchainRecipient>> with vec![Some(Default::default())]
stackslib/src/burnchains/mod.rs:391:9: replace PoxConstants::mainnet_default -> PoxConstants with Default::default()
stackslib/src/burnchains/mod.rs:408:9: replace PoxConstants::testnet_default -> PoxConstants with Default::default()
stackslib/src/burnchains/mod.rs:425:9: replace PoxConstants::regtest_default -> PoxConstants with Default::default()
stackslib/src/burnchains/mod.rs:634:9: replace <impl Error for Error>::cause -> Option<&dyn error::Error> with Some(&Default::default())
stackslib/src/burnchains/mod.rs:656:9: replace <impl From for Error>::from -> Error with Default::default()
stackslib/src/burnchains/mod.rs:662:9: replace <impl From for Error>::from -> Error with Default::default()
stackslib/src/burnchains/mod.rs:668:9: replace <impl From for Error>::from -> Error with Default::default()
stackslib/src/core/mod.rs:150:50: replace + with -
stackslib/src/core/mod.rs:967:9: replace <impl StacksEpochExtension for StacksEpoch>::all -> Vec<StacksEpoch> with vec![Default::default()]
stackslib/src/core/mod.rs:1005:9: replace <impl StacksEpochExtension for StacksEpoch>::validate_epochs -> Vec<StacksEpoch> with vec![Default::default()]
stackslib/src/monitoring/mod.rs:55:5: replace instrument_http_request_handler -> Result<R, net_error> with Ok(Default::default())
stackslib/src/monitoring/mod.rs:190:5: replace txid_tracking_db -> Result<DBConn, DatabaseError> with Ok(Default::default())
stackslib/src/monitoring/mod.rs:459:5: replace get_burnchain_signer -> Option<BurnchainSigner> with Some(Default::default())
stackslib/src/cost_estimates/mod.rs:85:9: replace <impl Mul for FeeRateEstimate>::mul -> FeeRateEstimate with Default::default()
stackslib/src/cost_estimates/mod.rs:97:9: replace <impl Add for FeeRateEstimate>::add -> FeeRateEstimate with Default::default()
stackslib/src/cost_estimates/mod.rs:192:9: replace <impl Error for EstimatorError>::source -> Option<&(dyn Error +'static)> with Some(&Default::default())
stackslib/src/cost_estimates/mod.rs:255:9: replace <impl CostEstimator for ()>::estimate_cost -> Result<ExecutionCost, EstimatorError> with Ok(Default::default())
stackslib/src/cost_estimates/mod.rs:271:9: replace <impl FeeEstimator for ()>::get_rate_estimates -> Result<FeeRateEstimate, EstimatorError> with Ok(Default::default())
stackslib/src/cost_estimates/mod.rs:296:9: replace <impl CostEstimator for UnitEstimator>::estimate_cost -> Result<ExecutionCost, EstimatorError> with Ok(Default::default())
stackslib/src/clarity_cli.rs:134:5: replace friendly_expect -> A with Default::default()
stackslib/src/clarity_cli.rs:142:5: replace friendly_expect_opt -> A with Default::default()
stackslib/src/clarity_cli.rs:161:5: replace parse -> Result<Vec<SymbolicExpression>, Error> with Ok(vec![Default::default()])
stackslib/src/clarity_cli.rs:188:9: replace <impl ClarityStorage for WritableMarfStore<'_>>::get_clarity_db -> ClarityDatabase<'a> with Default::default()
stackslib/src/clarity_cli.rs:192:9: replace <impl ClarityStorage for WritableMarfStore<'_>>::get_analysis_db -> AnalysisDatabase<'a> with Default::default()
stackslib/src/clarity_cli.rs:202:9: replace <impl ClarityStorage for MemoryBackingStore>::get_clarity_db -> ClarityDatabase<'a> with Default::default()
stackslib/src/clarity_cli.rs:206:9: replace <impl ClarityStorage for MemoryBackingStore>::get_analysis_db -> AnalysisDatabase<'a> with Default::default()
stackslib/src/clarity_cli.rs:216:5: replace run_analysis_free -> Result<ContractAnalysis, (CheckError, LimitedCostTracker)> with Ok(Default::default())
stackslib/src/clarity_cli.rs:235:5: replace run_analysis -> Result<ContractAnalysis, (CheckError, LimitedCostTracker)> with Ok(Default::default())
stackslib/src/clarity_cli.rs:261:5: replace create_or_open_db -> Connection with Default::default()
stackslib/src/clarity_cli.rs:294:5: replace get_cli_chain_tip -> StacksBlockId with Default::default()
stackslib/src/clarity_cli.rs:361:5: replace in_block -> (CLIHeadersDB, MarfedKV, R) with (Default::default(), Default::default(), Default::default())
stackslib/src/clarity_cli.rs:378:5: replace at_chaintip -> R with Default::default()
stackslib/src/clarity_cli.rs:394:5: replace at_block -> R with Default::default()
stackslib/src/clarity_cli.rs:423:5: replace with_env_costs -> (R, ExecutionCost) with (Default::default(), Default::default())
stackslib/src/clarity_cli.rs:454:5: replace vm_execute -> Result<Option<Value>, Error> with Ok(Some(Default::default()))
stackslib/src/clarity_cli.rs:563:9: replace CLIHeadersDB::resume -> Result<CLIHeadersDB, String> with Ok(Default::default())
stackslib/src/clarity_cli.rs:578:9: replace CLIHeadersDB::new_memory -> CLIHeadersDB with Default::default()
stackslib/src/clarity_cli.rs:587:9: replace CLIHeadersDB::conn -> &Connection with &Default::default()
stackslib/src/clarity_cli.rs:605:9: replace CLIHeadersDB::advance_cli_chain_tip -> (StacksBlockId, StacksBlockId) with (Default::default(), Default::default())
stackslib/src/clarity_cli.rs:647:9: replace <impl HeadersDB for CLIHeadersDB>::get_burn_header_hash_for_block -> Option<BurnchainHeaderHash> with Some(Default::default())
stackslib/src/clarity_cli.rs:658:9: replace <impl HeadersDB for CLIHeadersDB>::get_consensus_hash_for_block -> Option<ConsensusHash> with Some(Default::default())
stackslib/src/clarity_cli.rs:668:9: replace <impl HeadersDB for CLIHeadersDB>::get_vrf_seed_for_block -> Option<VRFSeed> with Some(Default::default())
stackslib/src/clarity_cli.rs:683:9: replace <impl HeadersDB for CLIHeadersDB>::get_stacks_block_header_hash_for_block -> Option<BlockHeaderHash> with Some(Default::default())
stackslib/src/clarity_cli.rs:714:9: replace <impl HeadersDB for CLIHeadersDB>::get_miner_address -> Option<StacksAddress> with Some(Default::default())
stackslib/src/clarity_cli.rs:734:5: replace get_eval_input -> EvalInput with Default::default()
stackslib/src/util_lib/db.rs:117:9: replace <impl Error for Error>::cause -> Option<&dyn error::Error> with Some(&Default::default())
stackslib/src/util_lib/db.rs:141:9: replace <impl From for Error>::from -> Error with Default::default()
stackslib/src/util_lib/db.rs:147:9: replace <impl From for Error>::from -> Error with Default::default()
stackslib/src/util_lib/db.rs:195:9: replace <impl FromRow for StacksAddress>::from_row -> Result<StacksAddress, Error> with Ok(Default::default())
stackslib/src/util_lib/db.rs:235:9: replace <impl FromColumn for QualifiedContractIdentifier>::from_column -> Result<QualifiedContractIdentifier, Error> with Ok(Default::default())
stackslib/src/util_lib/db.rs:386:5: replace query_rows -> Result<Vec<T>, Error> with Ok(vec![Default::default()])
stackslib/src/util_lib/db.rs:401:5: replace query_row -> Result<Option<T>, Error> with Ok(Some(Default::default()))
stackslib/src/util_lib/db.rs:422:5: replace query_expect_row -> Result<Option<T>, Error> with Ok(Some(Default::default()))
stackslib/src/util_lib/db.rs:449:5: replace query_row_panic -> Result<Option<T>, Error> with Ok(Some(Default::default()))
stackslib/src/util_lib/db.rs:474:5: replace query_row_columns -> Result<Vec<T>, Error> with Ok(vec![Default::default()])
stackslib/src/util_lib/db.rs:597:9: replace IndexDBConn<'a, C, T>::get_ancestor_block_hash -> Result<Option<T>, Error> with Ok(Some(Default::default()))
stackslib/src/util_lib/db.rs:616:9: replace IndexDBConn<'a, C, T>::conn -> &DBConn with &Default::default()
stackslib/src/util_lib/db.rs:623:9: replace <impl Deref for IndexDBConn<'a, C, T>>::deref -> &DBConn with &Default::default()
stackslib/src/util_lib/db.rs:636:9: replace <impl Deref for IndexDBTx<'a, C, T>>::deref -> &DBTx<'a> with &Default::default()
stackslib/src/util_lib/db.rs:642:9: replace <impl DerefMut for IndexDBTx<'a, C, T>>::deref_mut -> &mut DBTx<'a> with Box::leak(Box::new(Default::default()))
stackslib/src/util_lib/db.rs:671:5: replace tx_begin_immediate -> Result<DBTx<'a>, Error> with Ok(Default::default())
stackslib/src/util_lib/db.rs:679:5: replace tx_begin_immediate_sqlite -> Result<DBTx<'a>, sqlite_error> with Ok(Default::default())
stackslib/src/util_lib/db.rs:708:5: replace inner_connection_open -> Result<Connection, sqlite_error> with Ok(Default::default())
stackslib/src/util_lib/db.rs:717:5: replace sqlite_open -> Result<Connection, sqlite_error> with Ok(Default::default())
stackslib/src/util_lib/db.rs:733:5: replace get_ancestor_block_hash -> Result<Option<T>, Error> with Ok(Some(Default::default()))
stackslib/src/util_lib/db.rs:814:9: replace IndexDBTx<'a, C, T>::index -> &MarfTransaction<'a, T> with &MarfTransaction::new()
stackslib/src/util_lib/db.rs:814:9: replace IndexDBTx<'a, C, T>::index -> &MarfTransaction<'a, T> with &MarfTransaction::from_iter([Default::default()])
stackslib/src/util_lib/db.rs:814:9: replace IndexDBTx<'a, C, T>::index -> &MarfTransaction<'a, T> with &MarfTransaction::new(Default::default())
stackslib/src/util_lib/db.rs:814:9: replace IndexDBTx<'a, C, T>::index -> &MarfTransaction<'a, T> with &MarfTransaction::from(Default::default())
stackslib/src/util_lib/db.rs:820:9: replace IndexDBTx<'a, C, T>::index_mut -> &mut MarfTransaction<'a, T> with Box::leak(Box::new(MarfTransaction::new()))
stackslib/src/util_lib/db.rs:820:9: replace IndexDBTx<'a, C, T>::index_mut -> &mut MarfTransaction<'a, T> with Box::leak(Box::new(MarfTransaction::from_iter([Default::default()])))
stackslib/src/util_lib/db.rs:820:9: replace IndexDBTx<'a, C, T>::index_mut -> &mut MarfTransaction<'a, T> with Box::leak(Box::new(MarfTransaction::new(Default::default())))
stackslib/src/util_lib/db.rs:820:9: replace IndexDBTx<'a, C, T>::index_mut -> &mut MarfTransaction<'a, T> with Box::leak(Box::new(MarfTransaction::from(Default::default())))
stackslib/src/util_lib/db.rs:826:9: replace IndexDBTx<'a, C, T>::tx -> &DBTx<'a> with &Default::default()
stackslib/src/util_lib/db.rs:830:9: replace IndexDBTx<'a, C, T>::tx_mut -> &mut DBTx<'a> with Box::leak(Box::new(Default::default()))
stackslib/src/util_lib/db.rs:858:9: replace IndexDBTx<'a, C, T>::get_ancestor_block_hash -> Result<Option<T>, Error> with Ok(Some(Default::default()))
stackslib/src/util_lib/db.rs:881:9: replace IndexDBTx<'a, C, T>::store_indexed -> Result<MARFValue, Error> with Ok(Default::default())
stackslib/src/util_lib/bloom.rs:150:9: replace <impl StacksMessageCodec for BitField>::consensus_deserialize -> Result<BitField, codec_error> with Ok(Default::default())
stackslib/src/util_lib/bloom.rs:177:9: replace BloomNodeHasher::new_random -> BloomNodeHasher with Default::default()
stackslib/src/util_lib/bloom.rs:191:9: replace <impl StacksMessageCodec for BloomNodeHasher>::consensus_deserialize -> Result<BloomNodeHasher, codec_error> with Ok(Default::default())
stackslib/src/util_lib/bloom.rs:311:9: replace <impl StacksMessageCodec for BloomFilter<BloomNodeHasher>>::consensus_deserialize -> Result<BloomFilter<BloomNodeHasher>, codec_error> with Ok(BloomFilter::new())
stackslib/src/util_lib/bloom.rs:311:9: replace <impl StacksMessageCodec for BloomFilter<BloomNodeHasher>>::consensus_deserialize -> Result<BloomFilter<BloomNodeHasher>, codec_error> with Ok(BloomFilter::from_iter([Default::default()]))
stackslib/src/util_lib/bloom.rs:311:9: replace <impl StacksMessageCodec for BloomFilter<BloomNodeHasher>>::consensus_deserialize -> Result<BloomFilter<BloomNodeHasher>, codec_error> with Ok(BloomFilter::new(Default::default()))
stackslib/src/util_lib/bloom.rs:311:9: replace <impl StacksMessageCodec for BloomFilter<BloomNodeHasher>>::consensus_deserialize -> Result<BloomFilter<BloomNodeHasher>, codec_error> with Ok(BloomFilter::from(Default::default()))
stackslib/src/util_lib/bloom.rs:381:9: replace BloomCounter<H>::try_load -> Result<Option<BloomCounter<H>>, db_error> with Ok(Some(BloomCounter::new()))
stackslib/src/util_lib/bloom.rs:381:9: replace BloomCounter<H>::try_load -> Result<Option<BloomCounter<H>>, db_error> with Ok(Some(BloomCounter::from_iter([Default::default()])))
stackslib/src/util_lib/bloom.rs:381:9: replace BloomCounter<H>::try_load -> Result<Option<BloomCounter<H>>, db_error> with Ok(Some(BloomCounter::new(Default::default())))
stackslib/src/util_lib/bloom.rs:381:9: replace BloomCounter<H>::try_load -> Result<Option<BloomCounter<H>>, db_error> with Ok(Some(BloomCounter::from(Default::default())))
stackslib/src/util_lib/bloom.rs:417:9: replace BloomCounter<H>::open_counts_blob -> Result<Blob<'a>, db_error> with Ok(Default::default())
stackslib/src/util_lib/bloom.rs:532:9: replace BloomCounter<H>::to_bloom_filter -> Result<BloomFilter<H>, db_error> with Ok(BloomFilter::new())
stackslib/src/util_lib/bloom.rs:532:9: replace BloomCounter<H>::to_bloom_filter -> Result<BloomFilter<H>, db_error> with Ok(BloomFilter::from_iter([Default::default()]))
stackslib/src/util_lib/bloom.rs:532:9: replace BloomCounter<H>::to_bloom_filter -> Result<BloomFilter<H>, db_error> with Ok(BloomFilter::new(Default::default()))
stackslib/src/util_lib/bloom.rs:532:9: replace BloomCounter<H>::to_bloom_filter -> Result<BloomFilter<H>, db_error> with Ok(BloomFilter::from(Default::default()))
stackslib/src/util_lib/boot.rs:16:5: replace boot_code_id -> QualifiedContractIdentifier with Default::default()
stackslib/src/util_lib/boot.rs:24:5: replace boot_code_addr -> StacksAddress with Default::default()
stackslib/src/util_lib/boot.rs:28:5: replace boot_code_tx_auth -> TransactionAuth with Default::default()
stackslib/src/util_lib/boot.rs:41:5: replace boot_code_acc -> StacksAccount with Default::default()
stackslib/src/util_lib/strings.rs:90:9: replace <impl Deref for StacksString>::deref -> &Vec<u8> with &vec![]
stackslib/src/util_lib/strings.rs:90:9: replace <impl Deref for StacksString>::deref -> &Vec<u8> with &vec![0]
stackslib/src/util_lib/strings.rs:90:9: replace <impl Deref for StacksString>::deref -> &Vec<u8> with &vec![1]
stackslib/src/util_lib/strings.rs:106:9: replace <impl StacksMessageCodec for StacksString>::consensus_deserialize -> Result<StacksString, codec_error> with Ok(Default::default())
stackslib/src/util_lib/strings.rs:153:9: replace <impl StacksMessageCodec for UrlString>::consensus_deserialize -> Result<UrlString, codec_error> with Ok(Default::default())
stackslib/src/util_lib/strings.rs:185:9: replace <impl From for StacksString>::from -> StacksString with Default::default()
stackslib/src/util_lib/strings.rs:192:9: replace <impl From for StacksString>::from -> StacksString with Default::default()
stackslib/src/util_lib/strings.rs:222:9: replace StacksString::from_string -> Option<StacksString> with Some(Default::default())
stackslib/src/util_lib/strings.rs:229:9: replace StacksString::from_str -> Option<StacksString> with Some(Default::default())
stackslib/src/util_lib/strings.rs:247:9: replace UrlString::parse_to_block_url -> Result<url::Url, codec_error> with Ok(Default::default())
stackslib/src/net/api/mod.rs:121:9: replace <impl From for Error>::from -> Error with Default::default()
stackslib/src/net/asn.rs:42:9: replace ASEntry4::from_file -> Result<Vec<ASEntry4>, net_error> with Ok(vec![Default::default()])
stackslib/src/net/asn.rs:50:9: replace ASEntry4::read_asn4_sequence -> Result<Vec<ASEntry4>, net_error> with Ok(vec![Default::default()])
stackslib/src/net/asn.rs:103:9: replace ASEntry4::read_asn4 -> Result<Option<ASEntry4>, net_error> with Ok(Some(Default::default()))
stackslib/src/net/atlas/mod.rs:66:9: replace <impl Serialize for GetAttachmentResponse>::serialize -> Result<S::Ok, S::Error> with Ok(Default::default())
stackslib/src/net/atlas/mod.rs:73:9: replace <impl Deserialize for GetAttachmentResponse>::deserialize -> Result<GetAttachmentResponse, D::Error> with Ok(Default::default())
stackslib/src/net/atlas/mod.rs:161:9: replace Attachment::hash -> Hash160 with Default::default()
stackslib/src/net/atlas/mod.rs:165:9: replace Attachment::empty -> Attachment with Default::default()
stackslib/src/net/atlas/mod.rs:196:9: replace AttachmentInstance::try_new_from_value -> Option<AttachmentInstance> with Some(Default::default())
stackslib/src/net/chat.rs:233:9: replace NeighborStats::take_relayers -> HashMap<NeighborAddress, RelayStats> with HashMap::from_iter([(Default::default(), Default::default())])
stackslib/src/net/chat.rs:401:9: replace NeighborKey::from_handshake -> NeighborKey with Default::default()
stackslib/src/net/chat.rs:410:9: replace NeighborKey::from_socketaddr -> NeighborKey with Default::default()
stackslib/src/net/chat.rs:464:9: replace Neighbor::load_and_update -> Result<(Neighbor, bool), net_error> with Ok((Default::default(), true))
stackslib/src/net/chat.rs:464:9: replace Neighbor::load_and_update -> Result<(Neighbor, bool), net_error> with Ok((Default::default(), false))
stackslib/src/net/chat.rs:508:9: replace Neighbor::from_conversation -> Result<Option<Neighbor>, net_error> with Ok(Some(Default::default()))
stackslib/src/net/chat.rs:586:9: replace ConversationP2P::to_neighbor_key -> NeighborKey with Default::default()
stackslib/src/net/chat.rs:595:9: replace ConversationP2P::to_handshake_neighbor_key -> NeighborKey with Default::default()
stackslib/src/net/chat.rs:604:9: replace ConversationP2P::to_neighbor_address -> NeighborAddress with Default::default()
stackslib/src/net/chat.rs:618:9: replace ConversationP2P::to_handshake_neighbor_address -> NeighborAddress with Default::default()
stackslib/src/net/chat.rs:644:9: replace ConversationP2P::get_public_key_hash -> Option<Hash160> with Some(Default::default())
stackslib/src/net/chat.rs:649:9: replace ConversationP2P::ref_public_key -> Option<&StacksPublicKey> with Some(&Default::default())
stackslib/src/net/chat.rs:661:9: replace ConversationP2P::get_burnchain_tip_burn_header_hash -> BurnchainHeaderHash with Default::default()
stackslib/src/net/chat.rs:665:9: replace ConversationP2P::get_stable_burnchain_tip_burn_header_hash -> BurnchainHeaderHash with Default::default()
stackslib/src/net/chat.rs:718:9: replace ConversationP2P::get_current_epoch -> StacksEpoch with Default::default()
stackslib/src/net/chat.rs:873:9: replace ConversationP2P::sign_message_seq -> Result<StacksMessage, net_error> with Ok(Default::default())
stackslib/src/net/chat.rs:886:9: replace ConversationP2P::sign_message -> Result<StacksMessage, net_error> with Ok(Default::default())
stackslib/src/net/chat.rs:899:9: replace ConversationP2P::sign_relay_message -> Result<StacksMessage, net_error> with Ok(Default::default())
stackslib/src/net/chat.rs:918:9: replace ConversationP2P::sign_reply -> Result<StacksMessage, net_error> with Ok(Default::default())
stackslib/src/net/chat.rs:932:9: replace ConversationP2P::sign_and_reply -> Result<ReplyHandleP2P, net_error> with Ok(Default::default())
stackslib/src/net/chat.rs:955:9: replace ConversationP2P::sign_and_forward -> Result<ReplyHandleP2P, net_error> with Ok(Default::default())
stackslib/src/net/chat.rs:974:9: replace ConversationP2P::reply_nack -> Result<ReplyHandleP2P, net_error> with Ok(Default::default())
stackslib/src/net/chat.rs:985:9: replace ConversationP2P::relay_signed_message -> Result<ReplyHandleP2P, net_error> with Ok(Default::default())
stackslib/src/net/chat.rs:1008:9: replace ConversationP2P::send_signed_request -> Result<ReplyHandleP2P, net_error> with Ok(Default::default())
stackslib/src/net/chat.rs:1165:9: replace ConversationP2P::get_stackerdb_contract_ids -> &[QualifiedContractIdentifier] with Vec::leak(vec![Default::default()])
stackslib/src/net/chat.rs:1171:9: replace ConversationP2P::handle_natpunch_request -> StacksMessage with Default::default()
stackslib/src/net/chat.rs:1199:9: replace ConversationP2P::handle_handshake -> Result<(Option<StacksMessage>, bool), net_error> with Ok((Some(Default::default()), true))
stackslib/src/net/chat.rs:1199:9: replace ConversationP2P::handle_handshake -> Result<(Option<StacksMessage>, bool), net_error> with Ok((Some(Default::default()), false))
stackslib/src/net/chat.rs:1377:9: replace ConversationP2P::handle_ping -> Result<Option<StacksMessage>, net_error> with Ok(Some(Default::default()))
stackslib/src/net/chat.rs:1398:9: replace ConversationP2P::handle_getneighbors -> Result<ReplyHandleP2P, net_error> with Ok(Default::default())
stackslib/src/net/chat.rs:1464:9: replace ConversationP2P::make_getblocksinv_response -> Result<StacksMessageType, net_error> with Ok(Default::default())
stackslib/src/net/chat.rs:1617:9: replace ConversationP2P::handle_getblocksinv -> Result<ReplyHandleP2P, net_error> with Ok(Default::default())
stackslib/src/net/chat.rs:1664:9: replace ConversationP2P::make_getpoxinv_response -> Result<StacksMessageType, net_error> with Ok(Default::default())
stackslib/src/net/chat.rs:1761:9: replace ConversationP2P::handle_getpoxinv -> Result<ReplyHandleP2P, net_error> with Ok(Default::default())
stackslib/src/net/chat.rs:1777:9: replace ConversationP2P::make_stacker_db_getchunkinv_response -> Result<StacksMessageType, net_error> with Ok(Default::default())
stackslib/src/net/chat.rs:1801:9: replace ConversationP2P::handle_stacker_db_getchunkinv -> Result<ReplyHandleP2P, net_error> with Ok(Default::default())
stackslib/src/net/chat.rs:1818:9: replace ConversationP2P::make_stacker_db_getchunk_response -> Result<StacksMessageType, net_error> with Ok(Default::default())
stackslib/src/net/chat.rs:1868:9: replace ConversationP2P::handle_stacker_db_getchunk -> Result<ReplyHandleP2P, net_error> with Ok(Default::default())
stackslib/src/net/chat.rs:1943:9: replace ConversationP2P::validate_blocks_push -> Result<Option<ReplyHandleP2P>, net_error> with Ok(Some(Default::default()))
stackslib/src/net/chat.rs:1982:9: replace ConversationP2P::validate_microblocks_push -> Result<Option<ReplyHandleP2P>, net_error> with Ok(Some(Default::default()))
stackslib/src/net/chat.rs:2019:9: replace ConversationP2P::validate_transaction_push -> Result<Option<ReplyHandleP2P>, net_error> with Ok(Some(Default::default()))
stackslib/src/net/chat.rs:2057:9: replace ConversationP2P::validate_stackerdb_push -> Result<Option<ReplyHandleP2P>, net_error> with Ok(Some(Default::default()))
stackslib/src/net/chat.rs:2096:9: replace ConversationP2P::handle_data_message -> Result<Option<StacksMessage>, net_error> with Ok(Some(Default::default()))
stackslib/src/net/chat.rs:2319:9: replace ConversationP2P::handle_authenticated_control_message -> Result<(Option<StacksMessage>, bool), net_error> with Ok((Some(Default::default()), true))
stackslib/src/net/chat.rs:2319:9: replace ConversationP2P::handle_authenticated_control_message -> Result<(Option<StacksMessage>, bool), net_error> with Ok((Some(Default::default()), false))
stackslib/src/net/chat.rs:2398:9: replace ConversationP2P::handle_unauthenticated_control_message -> Result<(Option<StacksMessage>, bool), net_error> with Ok((Some(Default::default()), true))
stackslib/src/net/chat.rs:2398:9: replace ConversationP2P::handle_unauthenticated_control_message -> Result<(Option<StacksMessage>, bool), net_error> with Ok((Some(Default::default()), false))
stackslib/src/net/chat.rs:2571:9: replace ConversationP2P::chat -> Result<Vec<StacksMessage>, net_error> with Ok(vec![Default::default()])
stackslib/src/net/chat.rs:2681:9: replace ConversationP2P::get_stats -> &NeighborStats with &Default::default()
stackslib/src/net/chat.rs:2686:9: replace ConversationP2P::get_stats_mut -> &mut NeighborStats with Box::leak(Box::new(Default::default()))
stackslib/src/net/codec.rs:160:9: replace <impl StacksMessageCodec for Preamble>::consensus_deserialize -> Result<Preamble, codec_error> with Ok(Default::default())
stackslib/src/net/codec.rs:223:9: replace <impl StacksMessageCodec for GetBlocksInv>::consensus_deserialize -> Result<GetBlocksInv, codec_error> with Ok(Default::default())
stackslib/src/net/codec.rs:247:9: replace <impl StacksMessageCodec for BlocksInvData>::consensus_deserialize -> Result<BlocksInvData, codec_error> with Ok(Default::default())
stackslib/src/net/codec.rs:267:9: replace BlocksInvData::empty -> BlocksInvData with Default::default()
stackslib/src/net/codec.rs:327:9: replace <impl StacksMessageCodec for GetPoxInv>::consensus_deserialize -> Result<GetPoxInv, codec_error> with Ok(Default::default())
stackslib/src/net/codec.rs:361:9: replace <impl StacksMessageCodec for PoxInvData>::consensus_deserialize -> Result<PoxInvData, codec_error> with Ok(Default::default())
stackslib/src/net/codec.rs:383:9: replace <impl StacksMessageCodec for BlocksAvailableData>::consensus_deserialize -> Result<BlocksAvailableData, codec_error> with Ok(Default::default())
stackslib/src/net/codec.rs:421:9: replace <impl StacksMessageCodec for BlocksDatum>::consensus_deserialize -> Result<BlocksDatum, codec_error> with Ok(Default::default())
stackslib/src/net/codec.rs:448:9: replace <impl StacksMessageCodec for BlocksData>::consensus_deserialize -> Result<BlocksData, codec_error> with Ok(Default::default())
stackslib/src/net/codec.rs:479:9: replace <impl StacksMessageCodec for MicroblocksData>::consensus_deserialize -> Result<MicroblocksData, codec_error> with Ok(Default::default())
stackslib/src/net/codec.rs:495:9: replace NeighborAddress::from_neighbor -> NeighborAddress with Default::default()
stackslib/src/net/codec.rs:512:9: replace <impl StacksMessageCodec for NeighborAddress>::consensus_deserialize -> Result<NeighborAddress, codec_error> with Ok(Default::default())
stackslib/src/net/codec.rs:532:9: replace <impl StacksMessageCodec for NeighborsData>::consensus_deserialize -> Result<NeighborsData, codec_error> with Ok(Default::default())
stackslib/src/net/codec.rs:540:9: replace HandshakeData::from_local_peer -> HandshakeData with Default::default()
stackslib/src/net/codec.rs:582:9: replace <impl StacksMessageCodec for HandshakeData>::consensus_deserialize -> Result<HandshakeData, codec_error> with Ok(Default::default())
stackslib/src/net/codec.rs:622:9: replace <impl StacksMessageCodec for HandshakeAcceptData>::consensus_deserialize -> Result<HandshakeAcceptData, codec_error> with Ok(Default::default())
stackslib/src/net/codec.rs:644:9: replace <impl StacksMessageCodec for NackData>::consensus_deserialize -> Result<NackData, codec_error> with Ok(Default::default())
stackslib/src/net/codec.rs:664:9: replace <impl StacksMessageCodec for PingData>::consensus_deserialize -> Result<PingData, codec_error> with Ok(Default::default())
stackslib/src/net/codec.rs:671:9: replace PongData::from_ping -> PongData with Default::default()
stackslib/src/net/codec.rs:682:9: replace <impl StacksMessageCodec for PongData>::consensus_deserialize -> Result<PongData, codec_error> with Ok(Default::default())
stackslib/src/net/codec.rs:696:9: replace <impl StacksMessageCodec for NatPunchData>::consensus_deserialize -> Result<NatPunchData, codec_error> with Ok(Default::default())
stackslib/src/net/codec.rs:722:5: replace contract_id_consensus_deserialize -> Result<QualifiedContractIdentifier, codec_error> with Ok(Default::default())
stackslib/src/net/codec.rs:752:9: replace <impl StacksMessageCodec for StackerDBHandshakeData>::consensus_deserialize -> Result<StackerDBHandshakeData, codec_error> with Ok(Default::default())
stackslib/src/net/codec.rs:774:9: replace <impl StacksMessageCodec for StackerDBGetChunkInvData>::consensus_deserialize -> Result<StackerDBGetChunkInvData, codec_error> with Ok(Default::default())
stackslib/src/net/codec.rs:794:9: replace <impl StacksMessageCodec for StackerDBChunkInvData>::consensus_deserialize -> Result<StackerDBChunkInvData, codec_error> with Ok(Default::default())
stackslib/src/net/codec.rs:813:9: replace <impl StacksMessageCodec for StackerDBGetChunkData>::consensus_deserialize -> Result<StackerDBGetChunkData, codec_error> with Ok(Default::default())
stackslib/src/net/codec.rs:835:9: replace <impl StacksMessageCodec for StackerDBPushChunkData>::consensus_deserialize -> Result<StackerDBPushChunkData, codec_error> with Ok(Default::default())
stackslib/src/net/codec.rs:854:9: replace <impl StacksMessageCodec for RelayData>::consensus_deserialize -> Result<RelayData, codec_error> with Ok(Default::default())
stackslib/src/net/codec.rs:862:9: replace StacksMessageType::get_message_id -> StacksMessageID with Default::default()
stackslib/src/net/codec.rs:1037:9: replace <impl StacksMessageCodec for StacksMessageID>::consensus_deserialize -> Result<StacksMessageID, codec_error> with Ok(Default::default())
stackslib/src/net/codec.rs:1123:9: replace <impl StacksMessageCodec for StacksMessageType>::consensus_deserialize -> Result<StacksMessageType, codec_error> with Ok(Default::default())
stackslib/src/net/codec.rs:1239:9: replace <impl StacksMessageCodec for StacksMessage>::consensus_deserialize -> Result<StacksMessage, codec_error> with Ok(Default::default())
stackslib/src/net/codec.rs:1292:9: replace StacksMessage::from_chain_view -> StacksMessage with Default::default()
stackslib/src/net/codec.rs:1305:9: replace StacksMessage::to_neighbor_key -> NeighborKey with Default::default()
stackslib/src/net/codec.rs:1374:9: replace StacksMessage::deserialize_body -> Result<(Vec<RelayData>, StacksMessageType), net_error> with Ok((vec![], Default::default()))
stackslib/src/net/codec.rs:1374:9: replace StacksMessage::deserialize_body -> Result<(Vec<RelayData>, StacksMessageType), net_error> with Ok((vec![Default::default()], Default::default()))
stackslib/src/net/codec.rs:1430:9: replace <impl ProtocolFamily for StacksP2P>::read_preamble -> Result<(Preamble, usize), net_error> with Ok((Default::default(), 0))
stackslib/src/net/codec.rs:1430:9: replace <impl ProtocolFamily for StacksP2P>::read_preamble -> Result<(Preamble, usize), net_error> with Ok((Default::default(), 1))
stackslib/src/net/codec.rs:1447:9: replace <impl ProtocolFamily for StacksP2P>::stream_payload -> Result<(Option<(StacksMessage, usize)>, usize), net_error> with Ok((Some((Default::default(), 0)), 0))
stackslib/src/net/codec.rs:1447:9: replace <impl ProtocolFamily for StacksP2P>::stream_payload -> Result<(Option<(StacksMessage, usize)>, usize), net_error> with Ok((Some((Default::default(), 0)), 1))
stackslib/src/net/codec.rs:1447:9: replace <impl ProtocolFamily for StacksP2P>::stream_payload -> Result<(Option<(StacksMessage, usize)>, usize), net_error> with Ok((Some((Default::default(), 1)), 0))
stackslib/src/net/codec.rs:1447:9: replace <impl ProtocolFamily for StacksP2P>::stream_payload -> Result<(Option<(StacksMessage, usize)>, usize), net_error> with Ok((Some((Default::default(), 1)), 1))
stackslib/src/net/codec.rs:1458:9: replace <impl ProtocolFamily for StacksP2P>::read_payload -> Result<(StacksMessage, usize), net_error> with Ok((Default::default(), 0))
stackslib/src/net/codec.rs:1458:9: replace <impl ProtocolFamily for StacksP2P>::read_payload -> Result<(StacksMessage, usize), net_error> with Ok((Default::default(), 1))
stackslib/src/net/connection.rs:114:9: replace NetworkReplyHandle<P>::new_relay -> NetworkReplyHandle<P> with NetworkReplyHandle::new()
stackslib/src/net/connection.rs:114:9: replace NetworkReplyHandle<P>::new_relay -> NetworkReplyHandle<P> with NetworkReplyHandle::from_iter([Default::default()])
stackslib/src/net/connection.rs:114:9: replace NetworkReplyHandle<P>::new_relay -> NetworkReplyHandle<P> with NetworkReplyHandle::new(Default::default())
stackslib/src/net/connection.rs:114:9: replace NetworkReplyHandle<P>::new_relay -> NetworkReplyHandle<P> with NetworkReplyHandle::from(Default::default())
stackslib/src/net/connection.rs:142:9: replace NetworkReplyHandle<P>::try_send_recv -> Result<P::Message, Result<NetworkReplyHandle<P>, net_error>> with Ok(Default::default())
stackslib/src/net/connection.rs:170:9: replace NetworkReplyHandle<P>::try_recv -> Result<P::Message, Result<NetworkReplyHandle<P>, net_error>> with Ok(Default::default())
stackslib/src/net/connection.rs:198:9: replace NetworkReplyHandle<P>::recv -> Result<P::Message, net_error> with Ok(Default::default())
stackslib/src/net/connection.rs:264:9: replace NetworkReplyHandle<P>::inner_pipe_out -> Option<&mut PipeWrite> with Some(Box::leak(Box::new(Default::default())))
stackslib/src/net/connection.rs:561:9: replace ConnectionInbox<P>::consume_preamble -> Result<(Option<P::Preamble>, usize), net_error> with Ok((Some(Default::default()), 0))
stackslib/src/net/connection.rs:561:9: replace ConnectionInbox<P>::consume_preamble -> Result<(Option<P::Preamble>, usize), net_error> with Ok((Some(Default::default()), 1))
stackslib/src/net/connection.rs:651:9: replace ConnectionInbox<P>::consume_payload_known_length -> Result<Option<P::Message>, net_error> with Ok(Some(Default::default()))
stackslib/src/net/connection.rs:710:9: replace ConnectionInbox<P>::consume_payload_unknown_length -> Result<Option<P::Message>, net_error> with Ok(Some(Default::default()))
stackslib/src/net/connection.rs:769:9: replace ConnectionInbox<P>::consume_payload -> Result<(Option<P::Message>, usize), net_error> with Ok((Some(Default::default()), 0))
stackslib/src/net/connection.rs:769:9: replace ConnectionInbox<P>::consume_payload -> Result<(Option<P::Message>, usize), net_error> with Ok((Some(Default::default()), 1))
stackslib/src/net/connection.rs:975:9: replace ConnectionInbox<P>::next_message -> Option<P::Message> with Some(Default::default())
stackslib/src/net/connection.rs:997:9: replace ConnectionOutbox<P>::begin_next_message -> Option<PipeRead> with Some(Default::default())
stackslib/src/net/connection.rs:1231:9: replace NetworkConnection<P>::fulfill_request -> Option<P::Message> with Some(Default::default())
stackslib/src/net/connection.rs:1255:9: replace NetworkConnection<P>::drain_inbox -> Vec<P::Message> with vec![Default::default()]
stackslib/src/net/connection.rs:1322:9: replace NetworkConnection<P>::make_request_handle -> Result<NetworkReplyHandle<P>, net_error> with Ok(NetworkReplyHandle::new())
stackslib/src/net/connection.rs:1322:9: replace NetworkConnection<P>::make_request_handle -> Result<NetworkReplyHandle<P>, net_error> with Ok(NetworkReplyHandle::from_iter([Default::default()]))
stackslib/src/net/connection.rs:1322:9: replace NetworkConnection<P>::make_request_handle -> Result<NetworkReplyHandle<P>, net_error> with Ok(NetworkReplyHandle::new(Default::default()))
stackslib/src/net/connection.rs:1322:9: replace NetworkConnection<P>::make_request_handle -> Result<NetworkReplyHandle<P>, net_error> with Ok(NetworkReplyHandle::from(Default::default()))
stackslib/src/net/connection.rs:1339:9: replace NetworkConnection<P>::make_relay_handle -> Result<NetworkReplyHandle<P>, net_error> with Ok(NetworkReplyHandle::new())
stackslib/src/net/connection.rs:1339:9: replace NetworkConnection<P>::make_relay_handle -> Result<NetworkReplyHandle<P>, net_error> with Ok(NetworkReplyHandle::from_iter([Default::default()]))
stackslib/src/net/connection.rs:1339:9: replace NetworkConnection<P>::make_relay_handle -> Result<NetworkReplyHandle<P>, net_error> with Ok(NetworkReplyHandle::new(Default::default()))
stackslib/src/net/connection.rs:1339:9: replace NetworkConnection<P>::make_relay_handle -> Result<NetworkReplyHandle<P>, net_error> with Ok(NetworkReplyHandle::from(Default::default()))
stackslib/src/net/connection.rs:1368:9: replace NetworkConnection<P>::next_inbox_message -> Option<P::Message> with Some(Default::default())
stackslib/src/net/connection.rs:1386:9: replace NetworkConnection<P>::ref_public_key -> Option<&Secp256k1PublicKey> with Some(&Default::default())
stackslib/src/net/db.rs:54:9: replace <impl FromColumn for PeerAddress>::from_column -> Result<PeerAddress, db_error> with Ok(Default::default())
stackslib/src/net/db.rs:78:9: replace <impl FromRow for QualifiedContractIdentifier>::from_row -> Result<QualifiedContractIdentifier, db_error> with Ok(Default::default())
stackslib/src/net/db.rs:180:9: replace LocalPeer::to_neighbor_addr -> NeighborAddress with Default::default()
stackslib/src/net/db.rs:192:9: replace <impl FromRow for LocalPeer>::from_row -> Result<LocalPeer, db_error> with Ok(Default::default())
stackslib/src/net/db.rs:242:9: replace <impl FromRow for ASEntry4>::from_row -> Result<ASEntry4, db_error> with Ok(Default::default())
stackslib/src/net/db.rs:258:9: replace <impl FromRow for Neighbor>::from_row -> Result<Neighbor, db_error> with Ok(Default::default())
stackslib/src/net/db.rs:609:9: replace PeerDB::connect -> Result<PeerDB, db_error> with Ok(Default::default())
stackslib/src/net/db.rs:717:9: replace PeerDB::open -> Result<PeerDB, db_error> with Ok(Default::default())
stackslib/src/net/db.rs:773:9: replace PeerDB::conn -> &Connection with &Default::default()
stackslib/src/net/db.rs:777:9: replace PeerDB::tx_begin -> Result<Transaction<'a>, db_error> with Ok(Default::default())
stackslib/src/net/db.rs:787:9: replace PeerDB::get_local_peer -> Result<LocalPeer, db_error> with Ok(Default::default())
stackslib/src/net/db.rs:843:9: replace PeerDB::rekey -> Result<LocalPeer, db_error> with Ok(Default::default())
stackslib/src/net/db.rs:903:9: replace PeerDB::get_peer -> Result<Option<Neighbor>, db_error> with Ok(Some(Default::default()))
stackslib/src/net/db.rs:943:9: replace PeerDB::get_peer_at -> Result<Option<Neighbor>, db_error> with Ok(Some(Default::default()))
stackslib/src/net/db.rs:1008:9: replace PeerDB::get_always_allowed_peers -> Result<Vec<Neighbor>, db_error> with Ok(vec![Default::default()])
stackslib/src/net/db.rs:1015:9: replace PeerDB::get_bootstrap_peers -> Result<Vec<Neighbor>, db_error> with Ok(vec![Default::default()])
stackslib/src/net/db.rs:1309:9: replace PeerDB::get_stacker_dbs_by_slot -> Result<Vec<QualifiedContractIdentifier>, db_error> with Ok(vec![Default::default()])
stackslib/src/net/db.rs:1334:9: replace PeerDB::static_get_peer_stacker_dbs -> Result<Vec<QualifiedContractIdentifier>, db_error> with Ok(vec![Default::default()])
stackslib/src/net/db.rs:1352:9: replace PeerDB::get_peer_stacker_dbs -> Result<Vec<QualifiedContractIdentifier>, db_error> with Ok(vec![Default::default()])
stackslib/src/net/db.rs:1480:9: replace PeerDB::get_cidr_prefixes -> Result<Vec<(PeerAddress, u32)>, db_error> with Ok(vec![(Default::default(), 0)])
stackslib/src/net/db.rs:1480:9: replace PeerDB::get_cidr_prefixes -> Result<Vec<(PeerAddress, u32)>, db_error> with Ok(vec![(Default::default(), 1)])
stackslib/src/net/db.rs:1501:9: replace PeerDB::get_denied_cidrs -> Result<Vec<(PeerAddress, u32)>, db_error> with Ok(vec![(Default::default(), 0)])
stackslib/src/net/db.rs:1501:9: replace PeerDB::get_denied_cidrs -> Result<Vec<(PeerAddress, u32)>, db_error> with Ok(vec![(Default::default(), 1)])
stackslib/src/net/db.rs:1506:9: replace PeerDB::get_allowed_cidrs -> Result<Vec<(PeerAddress, u32)>, db_error> with Ok(vec![(Default::default(), 0)])
stackslib/src/net/db.rs:1506:9: replace PeerDB::get_allowed_cidrs -> Result<Vec<(PeerAddress, u32)>, db_error> with Ok(vec![(Default::default(), 1)])
stackslib/src/net/db.rs:1595:9: replace PeerDB::get_random_neighbors -> Result<Vec<Neighbor>, db_error> with Ok(vec![Default::default()])
stackslib/src/net/db.rs:1616:9: replace PeerDB::get_fresh_random_neighbors -> Result<Vec<Neighbor>, db_error> with Ok(vec![Default::default()])
stackslib/src/net/db.rs:1681:9: replace PeerDB::get_initial_neighbors -> Result<Vec<Neighbor>, db_error> with Ok(vec![Default::default()])
stackslib/src/net/db.rs:1694:9: replace PeerDB::get_random_walk_neighbors -> Result<Vec<Neighbor>, db_error> with Ok(vec![Default::default()])
stackslib/src/net/db.rs:1767:9: replace PeerDB::get_all_peers -> Result<Vec<Neighbor>, db_error> with Ok(vec![Default::default()])
stackslib/src/net/db.rs:1780:9: replace PeerDB::find_stacker_db_replicas -> Result<Vec<Neighbor>, db_error> with Ok(vec![Default::default()])
stackslib/src/net/dns.rs:86:9: replace DNSResponse::error -> DNSResponse with Default::default()
stackslib/src/net/dns.rs:136:9: replace DNSResolver::resolve -> DNSResponse with Default::default()
stackslib/src/net/dns.rs:204:9: replace DNSResolver::handle_query -> Option<DNSResponse> with Some(Default::default())
stackslib/src/net/dns.rs:326:9: replace DNSClient::poll_lookup -> Result<Option<DNSResponse>, net_error> with Ok(Some(Default::default()))
stackslib/src/net/download.rs:132:9: replace BlockRequestKey::make_getblock_request -> StacksHttpRequest with Default::default()
stackslib/src/net/download.rs:143:9: replace BlockRequestKey::make_confirmed_microblocks_request -> StacksHttpRequest with Default::default()
stackslib/src/net/download.rs:155:9: replace <impl Requestable for BlockRequestKey>::get_url -> &UrlString with &Default::default()
stackslib/src/net/download.rs:159:9: replace <impl Requestable for BlockRequestKey>::make_request_type -> StacksHttpRequest with Default::default()
stackslib/src/net/download.rs:694:9: replace BlockDownloader::get_block_availability -> Result<Vec<(ConsensusHash, Option<BlockHeaderHash>, Vec<NeighborKey>)>, net_error> with Ok(vec![(Default::default(), None, vec![])])
stackslib/src/net/download.rs:694:9: replace BlockDownloader::get_block_availability -> Result<Vec<(ConsensusHash, Option<BlockHeaderHash>, Vec<NeighborKey>)>, net_error> with Ok(vec![(Default::default(), None, vec![Default::default()])])
stackslib/src/net/download.rs:694:9: replace BlockDownloader::get_block_availability -> Result<Vec<(ConsensusHash, Option<BlockHeaderHash>, Vec<NeighborKey>)>, net_error> with Ok(vec![(Default::default(), Some(Default::default()), vec![])])
stackslib/src/net/download.rs:694:9: replace BlockDownloader::get_block_availability -> Result<Vec<(ConsensusHash, Option<BlockHeaderHash>, Vec<NeighborKey>)>, net_error> with Ok(vec![(Default::default(), Some(Default::default()), vec![Default::default()])])
stackslib/src/net/download.rs:845:9: replace BlockDownloader::get_microblock_stream_availability -> Result<Vec<NeighborKey>, net_error> with Ok(vec![Default::default()])
stackslib/src/net/download.rs:888:9: replace BlockDownloader::clear_broken_peers -> (Vec<usize>, Vec<NeighborKey>) with (vec![], vec![Default::default()])
stackslib/src/net/download.rs:888:9: replace BlockDownloader::clear_broken_peers -> (Vec<usize>, Vec<NeighborKey>) with (vec![0], vec![Default::default()])
stackslib/src/net/download.rs:888:9: replace BlockDownloader::clear_broken_peers -> (Vec<usize>, Vec<NeighborKey>) with (vec![1], vec![Default::default()])
stackslib/src/net/download.rs:1031:9: replace PeerNetwork::with_downloader_state -> Result<R, net_error> with Ok(Default::default())
stackslib/src/net/download.rs:1053:9: replace PeerNetwork::get_data_url -> Option<UrlString> with Some(Default::default())
stackslib/src/net/download.rs:1195:9: replace PeerNetwork::make_requests -> Result<HashMap<u64, VecDeque<BlockRequestKey>>, net_error> with Ok(HashMap::from_iter([(0, VecDeque::from_iter([Default::default()]))]))
stackslib/src/net/download.rs:1195:9: replace PeerNetwork::make_requests -> Result<HashMap<u64, VecDeque<BlockRequestKey>>, net_error> with Ok(HashMap::from_iter([(1, VecDeque::from_iter([Default::default()]))]))
stackslib/src/net/download.rs:1539:9: replace PeerNetwork::make_block_requests -> Result<HashMap<u64, VecDeque<BlockRequestKey>>, net_error> with Ok(HashMap::from_iter([(0, VecDeque::from_iter([Default::default()]))]))
stackslib/src/net/download.rs:1539:9: replace PeerNetwork::make_block_requests -> Result<HashMap<u64, VecDeque<BlockRequestKey>>, net_error> with Ok(HashMap::from_iter([(1, VecDeque::from_iter([Default::default()]))]))
stackslib/src/net/download.rs:1556:9: replace PeerNetwork::make_confirmed_microblock_requests -> Result<HashMap<u64, VecDeque<BlockRequestKey>>, net_error> with Ok(HashMap::from_iter([(0, VecDeque::from_iter([Default::default()]))]))
stackslib/src/net/download.rs:1556:9: replace PeerNetwork::make_confirmed_microblock_requests -> Result<HashMap<u64, VecDeque<BlockRequestKey>>, net_error> with Ok(HashMap::from_iter([(1, VecDeque::from_iter([Default::default()]))]))
stackslib/src/net/download.rs:1918:9: replace PeerNetwork::begin_request -> Option<(T, usize)> with Some((Default::default(), 0))
stackslib/src/net/download.rs:1918:9: replace PeerNetwork::begin_request -> Option<(T, usize)> with Some((Default::default(), 1))
stackslib/src/net/download.rs:2068:9: replace PeerNetwork::finish_downloads -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>,), net_error, > with Ok((true, true, None, vec![], vec![(Default::default(), vec![], 0)]))
stackslib/src/net/download.rs:2068:9: replace PeerNetwork::finish_downloads -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>,), net_error, > with Ok((true, true, None, vec![], vec![(Default::default(), vec![], 1)]))
stackslib/src/net/download.rs:2068:9: replace PeerNetwork::finish_downloads -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>,), net_error, > with Ok((true, true, None, vec![], vec![(Default::default(), vec![Default::default()], 0)]))
stackslib/src/net/download.rs:2068:9: replace PeerNetwork::finish_downloads -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>,), net_error, > with Ok((true, true, None, vec![], vec![(Default::default(), vec![Default::default()], 1)]))
stackslib/src/net/download.rs:2068:9: replace PeerNetwork::finish_downloads -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>,), net_error, > with Ok((true, true, None, vec![(Default::default(), Default::default(), 0)], vec![]))
stackslib/src/net/download.rs:2068:9: replace PeerNetwork::finish_downloads -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>,), net_error, > with Ok((true, true, None, vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![], 0)]))
stackslib/src/net/download.rs:2068:9: replace PeerNetwork::finish_downloads -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>,), net_error, > with Ok((true, true, None, vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![], 1)]))
stackslib/src/net/download.rs:2068:9: replace PeerNetwork::finish_downloads -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>,), net_error, > with Ok((true, true, None, vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![Default::default()], 0)]))
stackslib/src/net/download.rs:2068:9: replace PeerNetwork::finish_downloads -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>,), net_error, > with Ok((true, true, None, vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![Default::default()], 1)]))
stackslib/src/net/download.rs:2068:9: replace PeerNetwork::finish_downloads -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>,), net_error, > with Ok((true, true, None, vec![(Default::default(), Default::default(), 1)], vec![]))
stackslib/src/net/download.rs:2068:9: replace PeerNetwork::finish_downloads -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>,), net_error, > with Ok((true, true, None, vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![], 0)]))
stackslib/src/net/download.rs:2068:9: replace PeerNetwork::finish_downloads -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>,), net_error, > with Ok((true, true, None, vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![], 1)]))
stackslib/src/net/download.rs:2068:9: replace PeerNetwork::finish_downloads -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>,), net_error, > with Ok((true, true, None, vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![Default::default()], 0)]))
stackslib/src/net/download.rs:2068:9: replace PeerNetwork::finish_downloads -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>,), net_error, > with Ok((true, true, None, vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![Default::default()], 1)]))
stackslib/src/net/download.rs:2068:9: replace PeerNetwork::finish_downloads -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>,), net_error, > with Ok((true, true, Some(Default::default()), vec![], vec![]))
stackslib/src/net/download.rs:2068:9: replace PeerNetwork::finish_downloads -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>,), net_error, > with Ok((true, true, Some(Default::default()), vec![], vec![(Default::default(), vec![], 0)]))
stackslib/src/net/download.rs:2068:9: replace PeerNetwork::finish_downloads -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>,), net_error, > with Ok((true, true, Some(Default::default()), vec![], vec![(Default::default(), vec![], 1)]))
stackslib/src/net/download.rs:2068:9: replace PeerNetwork::finish_downloads -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>,), net_error, > with Ok((true, true, Some(Default::default()), vec![], vec![(Default::default(), vec![Default::default()], 0)]))
stackslib/src/net/download.rs:2068:9: replace PeerNetwork::finish_downloads -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>,), net_error, > with Ok((true, true, Some(Default::default()), vec![], vec![(Default::default(), vec![Default::default()], 1)]))
stackslib/src/net/download.rs:2068:9: replace PeerNetwork::finish_downloads -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>,), net_error, > with Ok((true, true, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![]))
stackslib/src/net/download.rs:2068:9: replace PeerNetwork::finish_downloads -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>,), net_error, > with Ok((true, true, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![], 0)]))
stackslib/src/net/download.rs:2068:9: replace PeerNetwork::finish_downloads -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>,), net_error, > with Ok((true, true, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![], 1)]))
stackslib/src/net/download.rs:2068:9: replace PeerNetwork::finish_downloads -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>,), net_error, > with Ok((true, true, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![Default::default()], 0)]))
stackslib/src/net/download.rs:2068:9: replace PeerNetwork::finish_downloads -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>,), net_error, > with Ok((true, true, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![Default::default()], 1)]))
stackslib/src/net/download.rs:2068:9: replace PeerNetwork::finish_downloads -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>,), net_error, > with Ok((true, true, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![]))
stackslib/src/net/download.rs:2068:9: replace PeerNetwork::finish_downloads -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>,), net_error, > with Ok((true, true, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![], 0)]))
stackslib/src/net/download.rs:2068:9: replace PeerNetwork::finish_downloads -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>,), net_error, > with Ok((true, true, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![], 1)]))
stackslib/src/net/download.rs:2068:9: replace PeerNetwork::finish_downloads -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>,), net_error, > with Ok((true, true, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![Default::default()], 0)]))
stackslib/src/net/download.rs:2068:9: replace PeerNetwork::finish_downloads -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>,), net_error, > with Ok((true, true, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![Default::default()], 1)]))
stackslib/src/net/download.rs:2068:9: replace PeerNetwork::finish_downloads -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>,), net_error, > with Ok((true, false, None, vec![], vec![(Default::default(), vec![], 0)]))
stackslib/src/net/download.rs:2068:9: replace PeerNetwork::finish_downloads -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>,), net_error, > with Ok((true, false, None, vec![], vec![(Default::default(), vec![], 1)]))
stackslib/src/net/download.rs:2068:9: replace PeerNetwork::finish_downloads -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>,), net_error, > with Ok((true, false, None, vec![], vec![(Default::default(), vec![Default::default()], 0)]))
stackslib/src/net/download.rs:2068:9: replace PeerNetwork::finish_downloads -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>,), net_error, > with Ok((true, false, None, vec![], vec![(Default::default(), vec![Default::default()], 1)]))
stackslib/src/net/download.rs:2068:9: replace PeerNetwork::finish_downloads -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>,), net_error, > with Ok((true, false, None, vec![(Default::default(), Default::default(), 0)], vec![]))
stackslib/src/net/download.rs:2068:9: replace PeerNetwork::finish_downloads -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>,), net_error, > with Ok((true, false, None, vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![], 0)]))
stackslib/src/net/download.rs:2068:9: replace PeerNetwork::finish_downloads -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>,), net_error, > with Ok((true, false, None, vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![], 1)]))
stackslib/src/net/download.rs:2068:9: replace PeerNetwork::finish_downloads -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>,), net_error, > with Ok((true, false, None, vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![Default::default()], 0)]))
stackslib/src/net/download.rs:2068:9: replace PeerNetwork::finish_downloads -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>,), net_error, > with Ok((true, false, None, vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![Default::default()], 1)]))
stackslib/src/net/download.rs:2068:9: replace PeerNetwork::finish_downloads -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>,), net_error, > with Ok((true, false, None, vec![(Default::default(), Default::default(), 1)], vec![]))
stackslib/src/net/download.rs:2068:9: replace PeerNetwork::finish_downloads -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>,), net_error, > with Ok((true, false, None, vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![], 0)]))
stackslib/src/net/download.rs:2068:9: replace PeerNetwork::finish_downloads -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>,), net_error, > with Ok((true, false, None, vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![], 1)]))
stackslib/src/net/download.rs:2068:9: replace PeerNetwork::finish_downloads -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>,), net_error, > with Ok((true, false, None, vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![Default::default()], 0)]))
stackslib/src/net/download.rs:2068:9: replace PeerNetwork::finish_downloads -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>,), net_error, > with Ok((true, false, None, vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![Default::default()], 1)]))
stackslib/src/net/download.rs:2068:9: replace PeerNetwork::finish_downloads -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>,), net_error, > with Ok((true, false, Some(Default::default()), vec![], vec![]))
stackslib/src/net/download.rs:2068:9: replace PeerNetwork::finish_downloads -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>,), net_error, > with Ok((true, false, Some(Default::default()), vec![], vec![(Default::default(), vec![], 0)]))
stackslib/src/net/download.rs:2068:9: replace PeerNetwork::finish_downloads -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>,), net_error, > with Ok((true, false, Some(Default::default()), vec![], vec![(Default::default(), vec![], 1)]))
stackslib/src/net/download.rs:2068:9: replace PeerNetwork::finish_downloads -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>,), net_error, > with Ok((true, false, Some(Default::default()), vec![], vec![(Default::default(), vec![Default::default()], 0)]))
stackslib/src/net/download.rs:2068:9: replace PeerNetwork::finish_downloads -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>,), net_error, > with Ok((true, false, Some(Default::default()), vec![], vec![(Default::default(), vec![Default::default()], 1)]))
stackslib/src/net/download.rs:2068:9: replace PeerNetwork::finish_downloads -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>,), net_error, > with Ok((true, false, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![]))
stackslib/src/net/download.rs:2068:9: replace PeerNetwork::finish_downloads -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>,), net_error, > with Ok((true, false, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![], 0)]))
stackslib/src/net/download.rs:2068:9: replace PeerNetwork::finish_downloads -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>,), net_error, > with Ok((true, false, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![], 1)]))
stackslib/src/net/download.rs:2068:9: replace PeerNetwork::finish_downloads -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>,), net_error, > with Ok((true, false, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![Default::default()], 0)]))
stackslib/src/net/download.rs:2068:9: replace PeerNetwork::finish_downloads -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>,), net_error, > with Ok((true, false, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![Default::default()], 1)]))
stackslib/src/net/download.rs:2068:9: replace PeerNetwork::finish_downloads -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>,), net_error, > with Ok((true, false, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![]))
stackslib/src/net/download.rs:2068:9: replace PeerNetwork::finish_downloads -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>,), net_error, > with Ok((true, false, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![], 0)]))
stackslib/src/net/download.rs:2068:9: replace PeerNetwork::finish_downloads -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>,), net_error, > with Ok((true, false, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![], 1)]))
stackslib/src/net/download.rs:2068:9: replace PeerNetwork::finish_downloads -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>,), net_error, > with Ok((true, false, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![Default::default()], 0)]))
stackslib/src/net/download.rs:2068:9: replace PeerNetwork::finish_downloads -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>,), net_error, > with Ok((true, false, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![Default::default()], 1)]))
stackslib/src/net/download.rs:2068:9: replace PeerNetwork::finish_downloads -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>,), net_error, > with Ok((false, true, None, vec![], vec![(Default::default(), vec![], 0)]))
stackslib/src/net/download.rs:2068:9: replace PeerNetwork::finish_downloads -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>,), net_error, > with Ok((false, true, None, vec![], vec![(Default::default(), vec![], 1)]))
stackslib/src/net/download.rs:2068:9: replace PeerNetwork::finish_downloads -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>,), net_error, > with Ok((false, true, None, vec![], vec![(Default::default(), vec![Default::default()], 0)]))
stackslib/src/net/download.rs:2068:9: replace PeerNetwork::finish_downloads -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>,), net_error, > with Ok((false, true, None, vec![], vec![(Default::default(), vec![Default::default()], 1)]))
stackslib/src/net/download.rs:2068:9: replace PeerNetwork::finish_downloads -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>,), net_error, > with Ok((false, true, None, vec![(Default::default(), Default::default(), 0)], vec![]))
stackslib/src/net/download.rs:2068:9: replace PeerNetwork::finish_downloads -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>,), net_error, > with Ok((false, true, None, vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![], 0)]))
stackslib/src/net/download.rs:2068:9: replace PeerNetwork::finish_downloads -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>,), net_error, > with Ok((false, true, None, vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![], 1)]))
stackslib/src/net/download.rs:2068:9: replace PeerNetwork::finish_downloads -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>,), net_error, > with Ok((false, true, None, vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![Default::default()], 0)]))
stackslib/src/net/download.rs:2068:9: replace PeerNetwork::finish_downloads -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>,), net_error, > with Ok((false, true, None, vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![Default::default()], 1)]))
stackslib/src/net/download.rs:2068:9: replace PeerNetwork::finish_downloads -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>,), net_error, > with Ok((false, true, None, vec![(Default::default(), Default::default(), 1)], vec![]))
stackslib/src/net/download.rs:2068:9: replace PeerNetwork::finish_downloads -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>,), net_error, > with Ok((false, true, None, vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![], 0)]))
stackslib/src/net/download.rs:2068:9: replace PeerNetwork::finish_downloads -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>,), net_error, > with Ok((false, true, None, vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![], 1)]))
stackslib/src/net/download.rs:2068:9: replace PeerNetwork::finish_downloads -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>,), net_error, > with Ok((false, true, None, vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![Default::default()], 0)]))
stackslib/src/net/download.rs:2068:9: replace PeerNetwork::finish_downloads -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>,), net_error, > with Ok((false, true, None, vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![Default::default()], 1)]))
stackslib/src/net/download.rs:2068:9: replace PeerNetwork::finish_downloads -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>,), net_error, > with Ok((false, true, Some(Default::default()), vec![], vec![]))
stackslib/src/net/download.rs:2068:9: replace PeerNetwork::finish_downloads -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>,), net_error, > with Ok((false, true, Some(Default::default()), vec![], vec![(Default::default(), vec![], 0)]))
stackslib/src/net/download.rs:2068:9: replace PeerNetwork::finish_downloads -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>,), net_error, > with Ok((false, true, Some(Default::default()), vec![], vec![(Default::default(), vec![], 1)]))
stackslib/src/net/download.rs:2068:9: replace PeerNetwork::finish_downloads -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>,), net_error, > with Ok((false, true, Some(Default::default()), vec![], vec![(Default::default(), vec![Default::default()], 0)]))
stackslib/src/net/download.rs:2068:9: replace PeerNetwork::finish_downloads -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>,), net_error, > with Ok((false, true, Some(Default::default()), vec![], vec![(Default::default(), vec![Default::default()], 1)]))
stackslib/src/net/download.rs:2068:9: replace PeerNetwork::finish_downloads -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>,), net_error, > with Ok((false, true, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![]))
stackslib/src/net/download.rs:2068:9: replace PeerNetwork::finish_downloads -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>,), net_error, > with Ok((false, true, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![], 0)]))
stackslib/src/net/download.rs:2068:9: replace PeerNetwork::finish_downloads -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>,), net_error, > with Ok((false, true, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![], 1)]))
stackslib/src/net/download.rs:2068:9: replace PeerNetwork::finish_downloads -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>,), net_error, > with Ok((false, true, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![Default::default()], 0)]))
stackslib/src/net/download.rs:2068:9: replace PeerNetwork::finish_downloads -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>,), net_error, > with Ok((false, true, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![Default::default()], 1)]))
stackslib/src/net/download.rs:2068:9: replace PeerNetwork::finish_downloads -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>,), net_error, > with Ok((false, true, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![]))
stackslib/src/net/download.rs:2068:9: replace PeerNetwork::finish_downloads -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>,), net_error, > with Ok((false, true, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![], 0)]))
stackslib/src/net/download.rs:2068:9: replace PeerNetwork::finish_downloads -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>,), net_error, > with Ok((false, true, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![], 1)]))
stackslib/src/net/download.rs:2068:9: replace PeerNetwork::finish_downloads -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>,), net_error, > with Ok((false, true, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![Default::default()], 0)]))
stackslib/src/net/download.rs:2068:9: replace PeerNetwork::finish_downloads -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>,), net_error, > with Ok((false, true, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![Default::default()], 1)]))
stackslib/src/net/download.rs:2068:9: replace PeerNetwork::finish_downloads -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>,), net_error, > with Ok((false, false, None, vec![], vec![(Default::default(), vec![], 0)]))
stackslib/src/net/download.rs:2068:9: replace PeerNetwork::finish_downloads -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>,), net_error, > with Ok((false, false, None, vec![], vec![(Default::default(), vec![], 1)]))
stackslib/src/net/download.rs:2068:9: replace PeerNetwork::finish_downloads -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>,), net_error, > with Ok((false, false, None, vec![], vec![(Default::default(), vec![Default::default()], 0)]))
stackslib/src/net/download.rs:2068:9: replace PeerNetwork::finish_downloads -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>,), net_error, > with Ok((false, false, None, vec![], vec![(Default::default(), vec![Default::default()], 1)]))
stackslib/src/net/download.rs:2068:9: replace PeerNetwork::finish_downloads -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>,), net_error, > with Ok((false, false, None, vec![(Default::default(), Default::default(), 0)], vec![]))
stackslib/src/net/download.rs:2068:9: replace PeerNetwork::finish_downloads -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>,), net_error, > with Ok((false, false, None, vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![], 0)]))
stackslib/src/net/download.rs:2068:9: replace PeerNetwork::finish_downloads -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>,), net_error, > with Ok((false, false, None, vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![], 1)]))
stackslib/src/net/download.rs:2068:9: replace PeerNetwork::finish_downloads -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>,), net_error, > with Ok((false, false, None, vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![Default::default()], 0)]))
stackslib/src/net/download.rs:2068:9: replace PeerNetwork::finish_downloads -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>,), net_error, > with Ok((false, false, None, vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![Default::default()], 1)]))
stackslib/src/net/download.rs:2068:9: replace PeerNetwork::finish_downloads -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>,), net_error, > with Ok((false, false, None, vec![(Default::default(), Default::default(), 1)], vec![]))
stackslib/src/net/download.rs:2068:9: replace PeerNetwork::finish_downloads -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>,), net_error, > with Ok((false, false, None, vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![], 0)]))
stackslib/src/net/download.rs:2068:9: replace PeerNetwork::finish_downloads -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>,), net_error, > with Ok((false, false, None, vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![], 1)]))
stackslib/src/net/download.rs:2068:9: replace PeerNetwork::finish_downloads -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>,), net_error, > with Ok((false, false, None, vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![Default::default()], 0)]))
stackslib/src/net/download.rs:2068:9: replace PeerNetwork::finish_downloads -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>,), net_error, > with Ok((false, false, None, vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![Default::default()], 1)]))
stackslib/src/net/download.rs:2068:9: replace PeerNetwork::finish_downloads -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>,), net_error, > with Ok((false, false, Some(Default::default()), vec![], vec![]))
stackslib/src/net/download.rs:2068:9: replace PeerNetwork::finish_downloads -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>,), net_error, > with Ok((false, false, Some(Default::default()), vec![], vec![(Default::default(), vec![], 0)]))
stackslib/src/net/download.rs:2068:9: replace PeerNetwork::finish_downloads -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>,), net_error, > with Ok((false, false, Some(Default::default()), vec![], vec![(Default::default(), vec![], 1)]))
stackslib/src/net/download.rs:2068:9: replace PeerNetwork::finish_downloads -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>,), net_error, > with Ok((false, false, Some(Default::default()), vec![], vec![(Default::default(), vec![Default::default()], 0)]))
stackslib/src/net/download.rs:2068:9: replace PeerNetwork::finish_downloads -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>,), net_error, > with Ok((false, false, Some(Default::default()), vec![], vec![(Default::default(), vec![Default::default()], 1)]))
stackslib/src/net/download.rs:2068:9: replace PeerNetwork::finish_downloads -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>,), net_error, > with Ok((false, false, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![]))
stackslib/src/net/download.rs:2068:9: replace PeerNetwork::finish_downloads -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>,), net_error, > with Ok((false, false, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![], 0)]))
stackslib/src/net/download.rs:2068:9: replace PeerNetwork::finish_downloads -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>,), net_error, > with Ok((false, false, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![], 1)]))
stackslib/src/net/download.rs:2068:9: replace PeerNetwork::finish_downloads -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>,), net_error, > with Ok((false, false, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![Default::default()], 0)]))
stackslib/src/net/download.rs:2068:9: replace PeerNetwork::finish_downloads -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>,), net_error, > with Ok((false, false, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![Default::default()], 1)]))
stackslib/src/net/download.rs:2068:9: replace PeerNetwork::finish_downloads -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>,), net_error, > with Ok((false, false, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![]))
stackslib/src/net/download.rs:2068:9: replace PeerNetwork::finish_downloads -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>,), net_error, > with Ok((false, false, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![], 0)]))
stackslib/src/net/download.rs:2068:9: replace PeerNetwork::finish_downloads -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>,), net_error, > with Ok((false, false, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![], 1)]))
stackslib/src/net/download.rs:2068:9: replace PeerNetwork::finish_downloads -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>,), net_error, > with Ok((false, false, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![Default::default()], 0)]))
stackslib/src/net/download.rs:2068:9: replace PeerNetwork::finish_downloads -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>,), net_error, > with Ok((false, false, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![Default::default()], 1)]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, None, vec![], vec![], vec![], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, None, vec![], vec![], vec![0], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, None, vec![], vec![], vec![1], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, None, vec![], vec![(Default::default(), vec![], 0)], vec![], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, None, vec![], vec![(Default::default(), vec![], 0)], vec![], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, None, vec![], vec![(Default::default(), vec![], 0)], vec![0], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, None, vec![], vec![(Default::default(), vec![], 0)], vec![0], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, None, vec![], vec![(Default::default(), vec![], 0)], vec![1], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, None, vec![], vec![(Default::default(), vec![], 1)], vec![], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, None, vec![], vec![(Default::default(), vec![], 0)], vec![1], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, None, vec![], vec![(Default::default(), vec![], 1)], vec![], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, None, vec![], vec![(Default::default(), vec![], 1)], vec![0], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, None, vec![], vec![(Default::default(), vec![], 1)], vec![0], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, None, vec![], vec![(Default::default(), vec![], 1)], vec![1], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, None, vec![], vec![(Default::default(), vec![], 1)], vec![1], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, None, vec![], vec![(Default::default(), vec![Default::default()], 0)], vec![], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, None, vec![], vec![(Default::default(), vec![Default::default()], 0)], vec![], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, None, vec![], vec![(Default::default(), vec![Default::default()], 0)], vec![0], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, None, vec![], vec![(Default::default(), vec![Default::default()], 0)], vec![0], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, None, vec![], vec![(Default::default(), vec![Default::default()], 0)], vec![1], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, None, vec![], vec![(Default::default(), vec![Default::default()], 0)], vec![1], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, None, vec![], vec![(Default::default(), vec![Default::default()], 1)], vec![], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, None, vec![], vec![(Default::default(), vec![Default::default()], 1)], vec![], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, None, vec![], vec![(Default::default(), vec![Default::default()], 1)], vec![0], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, None, vec![], vec![(Default::default(), vec![Default::default()], 1)], vec![0], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, None, vec![], vec![(Default::default(), vec![Default::default()], 1)], vec![1], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, None, vec![], vec![(Default::default(), vec![Default::default()], 1)], vec![1], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, None, vec![(Default::default(), Default::default(), 0)], vec![], vec![], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, None, vec![(Default::default(), Default::default(), 0)], vec![], vec![], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, None, vec![(Default::default(), Default::default(), 0)], vec![], vec![0], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, None, vec![(Default::default(), Default::default(), 0)], vec![], vec![0], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, None, vec![(Default::default(), Default::default(), 0)], vec![], vec![1], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, None, vec![(Default::default(), Default::default(), 0)], vec![], vec![1], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, None, vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![], 0)], vec![], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, None, vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![], 0)], vec![], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, None, vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![], 0)], vec![0], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, None, vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![], 0)], vec![0], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, None, vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![], 0)], vec![1], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, None, vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![], 0)], vec![1], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, None, vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![], 1)], vec![], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, None, vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![], 1)], vec![], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, None, vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![], 1)], vec![0], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, None, vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![], 1)], vec![0], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, None, vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![], 1)], vec![1], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, None, vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![], 1)], vec![1], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, None, vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![Default::default()], 0)], vec![], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, None, vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![Default::default()], 0)], vec![], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, None, vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![Default::default()], 0)], vec![0], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, None, vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![Default::default()], 0)], vec![0], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, None, vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![Default::default()], 0)], vec![1], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, None, vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![Default::default()], 0)], vec![1], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, None, vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![Default::default()], 1)], vec![], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, None, vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![Default::default()], 1)], vec![], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, None, vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![Default::default()], 1)], vec![0], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, None, vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![Default::default()], 1)], vec![0], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, None, vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![Default::default()], 1)], vec![1], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, None, vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![Default::default()], 1)], vec![1], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, None, vec![(Default::default(), Default::default(), 1)], vec![], vec![], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, None, vec![(Default::default(), Default::default(), 1)], vec![], vec![], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, None, vec![(Default::default(), Default::default(), 1)], vec![], vec![0], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, None, vec![(Default::default(), Default::default(), 1)], vec![], vec![0], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, None, vec![(Default::default(), Default::default(), 1)], vec![], vec![1], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, None, vec![(Default::default(), Default::default(), 1)], vec![], vec![1], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, None, vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![], 0)], vec![], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, None, vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![], 0)], vec![], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, None, vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![], 0)], vec![0], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, None, vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![], 0)], vec![0], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, None, vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![], 0)], vec![1], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, None, vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![], 0)], vec![1], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, None, vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![], 1)], vec![], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, None, vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![], 1)], vec![], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, None, vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![], 1)], vec![0], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, None, vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![], 1)], vec![0], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, None, vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![], 1)], vec![1], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, None, vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![], 1)], vec![1], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, None, vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![Default::default()], 0)], vec![], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, None, vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![Default::default()], 0)], vec![], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, None, vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![Default::default()], 0)], vec![0], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, None, vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![Default::default()], 0)], vec![0], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, None, vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![Default::default()], 0)], vec![1], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, None, vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![Default::default()], 0)], vec![1], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, None, vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![Default::default()], 1)], vec![], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, None, vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![Default::default()], 1)], vec![], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, None, vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![Default::default()], 1)], vec![0], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, None, vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![Default::default()], 1)], vec![0], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, None, vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![Default::default()], 1)], vec![1], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, None, vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![Default::default()], 1)], vec![1], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, Some(Default::default()), vec![], vec![], vec![], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, Some(Default::default()), vec![], vec![], vec![], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, Some(Default::default()), vec![], vec![], vec![0], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, Some(Default::default()), vec![], vec![], vec![0], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, Some(Default::default()), vec![], vec![], vec![1], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, Some(Default::default()), vec![], vec![], vec![1], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, Some(Default::default()), vec![], vec![(Default::default(), vec![], 0)], vec![], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, Some(Default::default()), vec![], vec![(Default::default(), vec![], 0)], vec![], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, Some(Default::default()), vec![], vec![(Default::default(), vec![], 0)], vec![0], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, Some(Default::default()), vec![], vec![(Default::default(), vec![], 0)], vec![0], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, Some(Default::default()), vec![], vec![(Default::default(), vec![], 0)], vec![1], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, Some(Default::default()), vec![], vec![(Default::default(), vec![], 0)], vec![1], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, Some(Default::default()), vec![], vec![(Default::default(), vec![], 1)], vec![], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, Some(Default::default()), vec![], vec![(Default::default(), vec![], 1)], vec![], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, Some(Default::default()), vec![], vec![(Default::default(), vec![], 1)], vec![0], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, Some(Default::default()), vec![], vec![(Default::default(), vec![], 1)], vec![0], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, Some(Default::default()), vec![], vec![(Default::default(), vec![], 1)], vec![1], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, Some(Default::default()), vec![], vec![(Default::default(), vec![], 1)], vec![1], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, Some(Default::default()), vec![], vec![(Default::default(), vec![Default::default()], 0)], vec![], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, Some(Default::default()), vec![], vec![(Default::default(), vec![Default::default()], 0)], vec![], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, Some(Default::default()), vec![], vec![(Default::default(), vec![Default::default()], 0)], vec![0], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, Some(Default::default()), vec![], vec![(Default::default(), vec![Default::default()], 0)], vec![0], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, Some(Default::default()), vec![], vec![(Default::default(), vec![Default::default()], 0)], vec![1], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, Some(Default::default()), vec![], vec![(Default::default(), vec![Default::default()], 0)], vec![1], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, Some(Default::default()), vec![], vec![(Default::default(), vec![Default::default()], 1)], vec![], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, Some(Default::default()), vec![], vec![(Default::default(), vec![Default::default()], 1)], vec![], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, Some(Default::default()), vec![], vec![(Default::default(), vec![Default::default()], 1)], vec![0], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, Some(Default::default()), vec![], vec![(Default::default(), vec![Default::default()], 1)], vec![0], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, Some(Default::default()), vec![], vec![(Default::default(), vec![Default::default()], 1)], vec![1], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, Some(Default::default()), vec![], vec![(Default::default(), vec![Default::default()], 1)], vec![1], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![], vec![], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![], vec![], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![], vec![0], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![], vec![0], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![], vec![1], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![], vec![1], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![], 0)], vec![], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![], 0)], vec![], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![], 0)], vec![0], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![], 0)], vec![0], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![], 0)], vec![1], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![], 0)], vec![1], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![], 1)], vec![], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![], 1)], vec![], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![], 1)], vec![0], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![], 1)], vec![0], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![], 1)], vec![1], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![], 1)], vec![1], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![Default::default()], 0)], vec![], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![Default::default()], 0)], vec![], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![Default::default()], 0)], vec![0], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![Default::default()], 0)], vec![0], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![Default::default()], 0)], vec![1], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![Default::default()], 0)], vec![1], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![Default::default()], 1)], vec![], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![Default::default()], 1)], vec![], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![Default::default()], 1)], vec![0], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![Default::default()], 1)], vec![0], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![Default::default()], 1)], vec![1], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![Default::default()], 1)], vec![1], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![], vec![], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![], vec![], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![], vec![0], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![], vec![0], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![], vec![1], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![], vec![1], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![], 0)], vec![], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![], 0)], vec![], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![], 0)], vec![0], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![], 0)], vec![0], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![], 0)], vec![1], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![], 1)], vec![], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![], 0)], vec![1], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![], 1)], vec![], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![], 1)], vec![0], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![], 1)], vec![0], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![], 1)], vec![1], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![], 1)], vec![1], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![Default::default()], 0)], vec![], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![Default::default()], 0)], vec![], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![Default::default()], 0)], vec![0], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![Default::default()], 0)], vec![0], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![Default::default()], 0)], vec![1], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![Default::default()], 0)], vec![1], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![Default::default()], 1)], vec![], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![Default::default()], 1)], vec![], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![Default::default()], 1)], vec![0], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![Default::default()], 1)], vec![0], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![Default::default()], 1)], vec![1], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, true, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![Default::default()], 1)], vec![1], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, None, vec![], vec![], vec![], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, None, vec![], vec![], vec![0], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, None, vec![], vec![], vec![1], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, None, vec![], vec![(Default::default(), vec![], 0)], vec![], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, None, vec![], vec![(Default::default(), vec![], 0)], vec![], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, None, vec![], vec![(Default::default(), vec![], 0)], vec![0], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, None, vec![], vec![(Default::default(), vec![], 0)], vec![0], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, None, vec![], vec![(Default::default(), vec![], 0)], vec![1], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, None, vec![], vec![(Default::default(), vec![], 0)], vec![1], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, None, vec![], vec![(Default::default(), vec![], 1)], vec![], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, None, vec![], vec![(Default::default(), vec![], 1)], vec![], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, None, vec![], vec![(Default::default(), vec![], 1)], vec![0], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, None, vec![], vec![(Default::default(), vec![], 1)], vec![0], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, None, vec![], vec![(Default::default(), vec![], 1)], vec![1], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, None, vec![], vec![(Default::default(), vec![], 1)], vec![1], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, None, vec![], vec![(Default::default(), vec![Default::default()], 0)], vec![], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, None, vec![], vec![(Default::default(), vec![Default::default()], 0)], vec![], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, None, vec![], vec![(Default::default(), vec![Default::default()], 0)], vec![0], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, None, vec![], vec![(Default::default(), vec![Default::default()], 0)], vec![0], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, None, vec![], vec![(Default::default(), vec![Default::default()], 0)], vec![1], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, None, vec![], vec![(Default::default(), vec![Default::default()], 0)], vec![1], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, None, vec![], vec![(Default::default(), vec![Default::default()], 1)], vec![], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, None, vec![], vec![(Default::default(), vec![Default::default()], 1)], vec![], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, None, vec![], vec![(Default::default(), vec![Default::default()], 1)], vec![0], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, None, vec![], vec![(Default::default(), vec![Default::default()], 1)], vec![0], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, None, vec![], vec![(Default::default(), vec![Default::default()], 1)], vec![1], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, None, vec![], vec![(Default::default(), vec![Default::default()], 1)], vec![1], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, None, vec![(Default::default(), Default::default(), 0)], vec![], vec![], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, None, vec![(Default::default(), Default::default(), 0)], vec![], vec![], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, None, vec![(Default::default(), Default::default(), 0)], vec![], vec![0], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, None, vec![(Default::default(), Default::default(), 0)], vec![], vec![0], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, None, vec![(Default::default(), Default::default(), 0)], vec![], vec![1], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, None, vec![(Default::default(), Default::default(), 0)], vec![], vec![1], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, None, vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![], 0)], vec![], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, None, vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![], 0)], vec![], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, None, vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![], 0)], vec![0], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, None, vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![], 0)], vec![0], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, None, vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![], 0)], vec![1], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, None, vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![], 0)], vec![1], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, None, vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![], 1)], vec![], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, None, vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![], 1)], vec![], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, None, vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![], 1)], vec![0], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, None, vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![], 1)], vec![0], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, None, vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![], 1)], vec![1], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, None, vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![], 1)], vec![1], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, None, vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![Default::default()], 0)], vec![], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, None, vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![Default::default()], 0)], vec![], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, None, vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![Default::default()], 0)], vec![0], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, None, vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![Default::default()], 0)], vec![0], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, None, vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![Default::default()], 0)], vec![1], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, None, vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![Default::default()], 0)], vec![1], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, None, vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![Default::default()], 1)], vec![], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, None, vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![Default::default()], 1)], vec![], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, None, vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![Default::default()], 1)], vec![0], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, None, vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![Default::default()], 1)], vec![0], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, None, vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![Default::default()], 1)], vec![1], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, None, vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![Default::default()], 1)], vec![1], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, None, vec![(Default::default(), Default::default(), 1)], vec![], vec![], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, None, vec![(Default::default(), Default::default(), 1)], vec![], vec![], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, None, vec![(Default::default(), Default::default(), 1)], vec![], vec![0], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, None, vec![(Default::default(), Default::default(), 1)], vec![], vec![0], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, None, vec![(Default::default(), Default::default(), 1)], vec![], vec![1], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, None, vec![(Default::default(), Default::default(), 1)], vec![], vec![1], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, None, vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![], 0)], vec![], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, None, vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![], 0)], vec![], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, None, vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![], 0)], vec![0], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, None, vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![], 0)], vec![1], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, None, vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![], 0)], vec![0], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, None, vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![], 0)], vec![1], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, None, vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![], 1)], vec![], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, None, vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![], 1)], vec![], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, None, vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![], 1)], vec![0], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, None, vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![], 1)], vec![0], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, None, vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![], 1)], vec![1], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, None, vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![], 1)], vec![1], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, None, vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![Default::default()], 0)], vec![], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, None, vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![Default::default()], 0)], vec![], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, None, vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![Default::default()], 0)], vec![0], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, None, vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![Default::default()], 0)], vec![0], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, None, vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![Default::default()], 0)], vec![1], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, None, vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![Default::default()], 0)], vec![1], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, None, vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![Default::default()], 1)], vec![], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, None, vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![Default::default()], 1)], vec![], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, None, vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![Default::default()], 1)], vec![0], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, None, vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![Default::default()], 1)], vec![0], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, None, vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![Default::default()], 1)], vec![1], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, None, vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![Default::default()], 1)], vec![1], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, Some(Default::default()), vec![], vec![], vec![], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, Some(Default::default()), vec![], vec![], vec![], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, Some(Default::default()), vec![], vec![], vec![0], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, Some(Default::default()), vec![], vec![], vec![0], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, Some(Default::default()), vec![], vec![], vec![1], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, Some(Default::default()), vec![], vec![(Default::default(), vec![], 0)], vec![], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, Some(Default::default()), vec![], vec![], vec![1], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, Some(Default::default()), vec![], vec![(Default::default(), vec![], 0)], vec![], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, Some(Default::default()), vec![], vec![(Default::default(), vec![], 0)], vec![0], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, Some(Default::default()), vec![], vec![(Default::default(), vec![], 0)], vec![0], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, Some(Default::default()), vec![], vec![(Default::default(), vec![], 0)], vec![1], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, Some(Default::default()), vec![], vec![(Default::default(), vec![], 0)], vec![1], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, Some(Default::default()), vec![], vec![(Default::default(), vec![], 1)], vec![], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, Some(Default::default()), vec![], vec![(Default::default(), vec![], 1)], vec![], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, Some(Default::default()), vec![], vec![(Default::default(), vec![], 1)], vec![0], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, Some(Default::default()), vec![], vec![(Default::default(), vec![], 1)], vec![0], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, Some(Default::default()), vec![], vec![(Default::default(), vec![], 1)], vec![1], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, Some(Default::default()), vec![], vec![(Default::default(), vec![], 1)], vec![1], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, Some(Default::default()), vec![], vec![(Default::default(), vec![Default::default()], 0)], vec![], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, Some(Default::default()), vec![], vec![(Default::default(), vec![Default::default()], 0)], vec![], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, Some(Default::default()), vec![], vec![(Default::default(), vec![Default::default()], 0)], vec![0], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, Some(Default::default()), vec![], vec![(Default::default(), vec![Default::default()], 0)], vec![0], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, Some(Default::default()), vec![], vec![(Default::default(), vec![Default::default()], 0)], vec![1], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, Some(Default::default()), vec![], vec![(Default::default(), vec![Default::default()], 0)], vec![1], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, Some(Default::default()), vec![], vec![(Default::default(), vec![Default::default()], 1)], vec![], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, Some(Default::default()), vec![], vec![(Default::default(), vec![Default::default()], 1)], vec![], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, Some(Default::default()), vec![], vec![(Default::default(), vec![Default::default()], 1)], vec![0], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, Some(Default::default()), vec![], vec![(Default::default(), vec![Default::default()], 1)], vec![0], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, Some(Default::default()), vec![], vec![(Default::default(), vec![Default::default()], 1)], vec![1], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, Some(Default::default()), vec![], vec![(Default::default(), vec![Default::default()], 1)], vec![1], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![], vec![], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![], vec![], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![], vec![0], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![], vec![0], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![], vec![1], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![], vec![1], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![], 0)], vec![], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![], 0)], vec![], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![], 0)], vec![0], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![], 0)], vec![0], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![], 0)], vec![1], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![], 0)], vec![1], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![], 1)], vec![], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![], 1)], vec![], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![], 1)], vec![0], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![], 1)], vec![0], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![], 1)], vec![1], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![], 1)], vec![1], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![Default::default()], 0)], vec![], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![Default::default()], 0)], vec![], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![Default::default()], 0)], vec![0], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![Default::default()], 0)], vec![0], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![Default::default()], 0)], vec![1], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![Default::default()], 0)], vec![1], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![Default::default()], 1)], vec![], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![Default::default()], 1)], vec![], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![Default::default()], 1)], vec![0], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![Default::default()], 1)], vec![0], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![Default::default()], 1)], vec![1], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![Default::default()], 1)], vec![1], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![], vec![], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![], vec![], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![], vec![0], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![], vec![0], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![], vec![1], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![], vec![1], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![], 0)], vec![], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![], 0)], vec![], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![], 0)], vec![0], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![], 0)], vec![0], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![], 0)], vec![1], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![], 0)], vec![1], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![], 1)], vec![], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![], 1)], vec![], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![], 1)], vec![0], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![], 1)], vec![0], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![], 1)], vec![1], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![], 1)], vec![1], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![Default::default()], 0)], vec![], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![Default::default()], 0)], vec![], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![Default::default()], 0)], vec![0], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![Default::default()], 0)], vec![0], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![Default::default()], 0)], vec![1], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![Default::default()], 0)], vec![1], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![Default::default()], 1)], vec![], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![Default::default()], 1)], vec![], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![Default::default()], 1)], vec![0], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![Default::default()], 1)], vec![0], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![Default::default()], 1)], vec![1], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((true, false, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![Default::default()], 1)], vec![1], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, None, vec![], vec![], vec![], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, None, vec![], vec![], vec![0], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, None, vec![], vec![], vec![1], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, None, vec![], vec![(Default::default(), vec![], 0)], vec![], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, None, vec![], vec![(Default::default(), vec![], 0)], vec![], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, None, vec![], vec![(Default::default(), vec![], 0)], vec![0], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, None, vec![], vec![(Default::default(), vec![], 0)], vec![0], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, None, vec![], vec![(Default::default(), vec![], 0)], vec![1], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, None, vec![], vec![(Default::default(), vec![], 0)], vec![1], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, None, vec![], vec![(Default::default(), vec![], 1)], vec![], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, None, vec![], vec![(Default::default(), vec![], 1)], vec![], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, None, vec![], vec![(Default::default(), vec![], 1)], vec![0], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, None, vec![], vec![(Default::default(), vec![], 1)], vec![0], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, None, vec![], vec![(Default::default(), vec![], 1)], vec![1], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, None, vec![], vec![(Default::default(), vec![], 1)], vec![1], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, None, vec![], vec![(Default::default(), vec![Default::default()], 0)], vec![], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, None, vec![], vec![(Default::default(), vec![Default::default()], 0)], vec![], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, None, vec![], vec![(Default::default(), vec![Default::default()], 0)], vec![0], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, None, vec![], vec![(Default::default(), vec![Default::default()], 0)], vec![0], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, None, vec![], vec![(Default::default(), vec![Default::default()], 0)], vec![1], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, None, vec![], vec![(Default::default(), vec![Default::default()], 0)], vec![1], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, None, vec![], vec![(Default::default(), vec![Default::default()], 1)], vec![], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, None, vec![], vec![(Default::default(), vec![Default::default()], 1)], vec![], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, None, vec![], vec![(Default::default(), vec![Default::default()], 1)], vec![0], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, None, vec![], vec![(Default::default(), vec![Default::default()], 1)], vec![0], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, None, vec![], vec![(Default::default(), vec![Default::default()], 1)], vec![1], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, None, vec![], vec![(Default::default(), vec![Default::default()], 1)], vec![1], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, None, vec![(Default::default(), Default::default(), 0)], vec![], vec![], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, None, vec![(Default::default(), Default::default(), 0)], vec![], vec![], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, None, vec![(Default::default(), Default::default(), 0)], vec![], vec![0], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, None, vec![(Default::default(), Default::default(), 0)], vec![], vec![0], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, None, vec![(Default::default(), Default::default(), 0)], vec![], vec![1], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, None, vec![(Default::default(), Default::default(), 0)], vec![], vec![1], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, None, vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![], 0)], vec![], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, None, vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![], 0)], vec![], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, None, vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![], 0)], vec![0], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, None, vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![], 0)], vec![0], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, None, vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![], 0)], vec![1], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, None, vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![], 0)], vec![1], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, None, vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![], 1)], vec![], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, None, vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![], 1)], vec![], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, None, vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![], 1)], vec![0], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, None, vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![], 1)], vec![0], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, None, vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![], 1)], vec![1], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, None, vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![], 1)], vec![1], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, None, vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![Default::default()], 0)], vec![], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, None, vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![Default::default()], 0)], vec![], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, None, vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![Default::default()], 0)], vec![0], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, None, vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![Default::default()], 0)], vec![0], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, None, vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![Default::default()], 0)], vec![1], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, None, vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![Default::default()], 0)], vec![1], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, None, vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![Default::default()], 1)], vec![], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, None, vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![Default::default()], 1)], vec![], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, None, vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![Default::default()], 1)], vec![0], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, None, vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![Default::default()], 1)], vec![0], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, None, vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![Default::default()], 1)], vec![1], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, None, vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![Default::default()], 1)], vec![1], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, None, vec![(Default::default(), Default::default(), 1)], vec![], vec![], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, None, vec![(Default::default(), Default::default(), 1)], vec![], vec![], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, None, vec![(Default::default(), Default::default(), 1)], vec![], vec![0], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, None, vec![(Default::default(), Default::default(), 1)], vec![], vec![0], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, None, vec![(Default::default(), Default::default(), 1)], vec![], vec![1], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, None, vec![(Default::default(), Default::default(), 1)], vec![], vec![1], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, None, vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![], 0)], vec![], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, None, vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![], 0)], vec![], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, None, vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![], 0)], vec![0], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, None, vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![], 0)], vec![0], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, None, vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![], 0)], vec![1], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, None, vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![], 0)], vec![1], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, None, vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![], 1)], vec![], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, None, vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![], 1)], vec![], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, None, vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![], 1)], vec![0], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, None, vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![], 1)], vec![0], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, None, vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![], 1)], vec![1], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, None, vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![], 1)], vec![1], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, None, vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![Default::default()], 0)], vec![], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, None, vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![Default::default()], 0)], vec![], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, None, vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![Default::default()], 0)], vec![0], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, None, vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![Default::default()], 0)], vec![1], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, None, vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![Default::default()], 0)], vec![0], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, None, vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![Default::default()], 0)], vec![1], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, None, vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![Default::default()], 1)], vec![], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, None, vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![Default::default()], 1)], vec![], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, None, vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![Default::default()], 1)], vec![0], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, None, vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![Default::default()], 1)], vec![0], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, None, vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![Default::default()], 1)], vec![1], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, None, vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![Default::default()], 1)], vec![1], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, Some(Default::default()), vec![], vec![], vec![], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, Some(Default::default()), vec![], vec![], vec![], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, Some(Default::default()), vec![], vec![], vec![0], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, Some(Default::default()), vec![], vec![], vec![0], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, Some(Default::default()), vec![], vec![], vec![1], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, Some(Default::default()), vec![], vec![], vec![1], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, Some(Default::default()), vec![], vec![(Default::default(), vec![], 0)], vec![], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, Some(Default::default()), vec![], vec![(Default::default(), vec![], 0)], vec![], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, Some(Default::default()), vec![], vec![(Default::default(), vec![], 0)], vec![0], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, Some(Default::default()), vec![], vec![(Default::default(), vec![], 0)], vec![0], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, Some(Default::default()), vec![], vec![(Default::default(), vec![], 0)], vec![1], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, Some(Default::default()), vec![], vec![(Default::default(), vec![], 0)], vec![1], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, Some(Default::default()), vec![], vec![(Default::default(), vec![], 1)], vec![], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, Some(Default::default()), vec![], vec![(Default::default(), vec![], 1)], vec![], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, Some(Default::default()), vec![], vec![(Default::default(), vec![], 1)], vec![0], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, Some(Default::default()), vec![], vec![(Default::default(), vec![], 1)], vec![0], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, Some(Default::default()), vec![], vec![(Default::default(), vec![], 1)], vec![1], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, Some(Default::default()), vec![], vec![(Default::default(), vec![], 1)], vec![1], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, Some(Default::default()), vec![], vec![(Default::default(), vec![Default::default()], 0)], vec![], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, Some(Default::default()), vec![], vec![(Default::default(), vec![Default::default()], 0)], vec![], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, Some(Default::default()), vec![], vec![(Default::default(), vec![Default::default()], 0)], vec![0], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, Some(Default::default()), vec![], vec![(Default::default(), vec![Default::default()], 0)], vec![0], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, Some(Default::default()), vec![], vec![(Default::default(), vec![Default::default()], 0)], vec![1], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, Some(Default::default()), vec![], vec![(Default::default(), vec![Default::default()], 0)], vec![1], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, Some(Default::default()), vec![], vec![(Default::default(), vec![Default::default()], 1)], vec![], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, Some(Default::default()), vec![], vec![(Default::default(), vec![Default::default()], 1)], vec![], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, Some(Default::default()), vec![], vec![(Default::default(), vec![Default::default()], 1)], vec![0], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, Some(Default::default()), vec![], vec![(Default::default(), vec![Default::default()], 1)], vec![0], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, Some(Default::default()), vec![], vec![(Default::default(), vec![Default::default()], 1)], vec![1], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, Some(Default::default()), vec![], vec![(Default::default(), vec![Default::default()], 1)], vec![1], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![], vec![], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![], vec![], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![], vec![0], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![], vec![0], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![], vec![1], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![], vec![1], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![], 0)], vec![], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![], 0)], vec![], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![], 0)], vec![0], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![], 0)], vec![0], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![], 0)], vec![1], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![], 0)], vec![1], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![], 1)], vec![], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![], 1)], vec![0], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![], 1)], vec![], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![], 1)], vec![0], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![], 1)], vec![1], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![], 1)], vec![1], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![Default::default()], 0)], vec![], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![Default::default()], 0)], vec![], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![Default::default()], 0)], vec![0], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![Default::default()], 0)], vec![0], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![Default::default()], 0)], vec![1], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![Default::default()], 0)], vec![1], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![Default::default()], 1)], vec![], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![Default::default()], 1)], vec![], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![Default::default()], 1)], vec![0], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![Default::default()], 1)], vec![0], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![Default::default()], 1)], vec![1], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![Default::default()], 1)], vec![1], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![], vec![], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![], vec![], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![], vec![0], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![], vec![0], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![], vec![1], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![], vec![1], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![], 0)], vec![], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![], 0)], vec![], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![], 0)], vec![0], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![], 0)], vec![0], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![], 0)], vec![1], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![], 0)], vec![1], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![], 1)], vec![], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![], 1)], vec![], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![], 1)], vec![0], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![], 1)], vec![1], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![], 1)], vec![0], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![Default::default()], 0)], vec![], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![], 1)], vec![1], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![Default::default()], 0)], vec![], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![Default::default()], 0)], vec![0], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![Default::default()], 0)], vec![0], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![Default::default()], 0)], vec![1], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![Default::default()], 0)], vec![1], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![Default::default()], 1)], vec![], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![Default::default()], 1)], vec![], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![Default::default()], 1)], vec![0], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![Default::default()], 1)], vec![0], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![Default::default()], 1)], vec![1], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, true, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![Default::default()], 1)], vec![1], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, None, vec![], vec![], vec![], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, None, vec![], vec![], vec![0], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, None, vec![], vec![], vec![1], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, None, vec![], vec![(Default::default(), vec![], 0)], vec![], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, None, vec![], vec![(Default::default(), vec![], 0)], vec![], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, None, vec![], vec![(Default::default(), vec![], 0)], vec![0], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, None, vec![], vec![(Default::default(), vec![], 0)], vec![0], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, None, vec![], vec![(Default::default(), vec![], 0)], vec![1], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, None, vec![], vec![(Default::default(), vec![], 0)], vec![1], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, None, vec![], vec![(Default::default(), vec![], 1)], vec![], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, None, vec![], vec![(Default::default(), vec![], 1)], vec![], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, None, vec![], vec![(Default::default(), vec![], 1)], vec![0], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, None, vec![], vec![(Default::default(), vec![], 1)], vec![0], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, None, vec![], vec![(Default::default(), vec![], 1)], vec![1], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, None, vec![], vec![(Default::default(), vec![], 1)], vec![1], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, None, vec![], vec![(Default::default(), vec![Default::default()], 0)], vec![], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, None, vec![], vec![(Default::default(), vec![Default::default()], 0)], vec![], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, None, vec![], vec![(Default::default(), vec![Default::default()], 0)], vec![0], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, None, vec![], vec![(Default::default(), vec![Default::default()], 0)], vec![0], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, None, vec![], vec![(Default::default(), vec![Default::default()], 0)], vec![1], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, None, vec![], vec![(Default::default(), vec![Default::default()], 0)], vec![1], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, None, vec![], vec![(Default::default(), vec![Default::default()], 1)], vec![], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, None, vec![], vec![(Default::default(), vec![Default::default()], 1)], vec![], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, None, vec![], vec![(Default::default(), vec![Default::default()], 1)], vec![0], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, None, vec![], vec![(Default::default(), vec![Default::default()], 1)], vec![0], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, None, vec![], vec![(Default::default(), vec![Default::default()], 1)], vec![1], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, None, vec![], vec![(Default::default(), vec![Default::default()], 1)], vec![1], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, None, vec![(Default::default(), Default::default(), 0)], vec![], vec![], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, None, vec![(Default::default(), Default::default(), 0)], vec![], vec![], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, None, vec![(Default::default(), Default::default(), 0)], vec![], vec![0], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, None, vec![(Default::default(), Default::default(), 0)], vec![], vec![0], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, None, vec![(Default::default(), Default::default(), 0)], vec![], vec![1], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, None, vec![(Default::default(), Default::default(), 0)], vec![], vec![1], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, None, vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![], 0)], vec![], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, None, vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![], 0)], vec![], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, None, vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![], 0)], vec![0], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, None, vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![], 0)], vec![0], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, None, vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![], 0)], vec![1], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, None, vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![], 0)], vec![1], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, None, vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![], 1)], vec![], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, None, vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![], 1)], vec![], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, None, vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![], 1)], vec![0], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, None, vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![], 1)], vec![0], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, None, vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![], 1)], vec![1], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, None, vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![], 1)], vec![1], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, None, vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![Default::default()], 0)], vec![], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, None, vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![Default::default()], 0)], vec![], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, None, vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![Default::default()], 0)], vec![0], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, None, vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![Default::default()], 0)], vec![0], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, None, vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![Default::default()], 0)], vec![1], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, None, vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![Default::default()], 0)], vec![1], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, None, vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![Default::default()], 1)], vec![], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, None, vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![Default::default()], 1)], vec![], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, None, vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![Default::default()], 1)], vec![0], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, None, vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![Default::default()], 1)], vec![0], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, None, vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![Default::default()], 1)], vec![1], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, None, vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![Default::default()], 1)], vec![1], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, None, vec![(Default::default(), Default::default(), 1)], vec![], vec![], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, None, vec![(Default::default(), Default::default(), 1)], vec![], vec![], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, None, vec![(Default::default(), Default::default(), 1)], vec![], vec![0], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, None, vec![(Default::default(), Default::default(), 1)], vec![], vec![0], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, None, vec![(Default::default(), Default::default(), 1)], vec![], vec![1], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, None, vec![(Default::default(), Default::default(), 1)], vec![], vec![1], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, None, vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![], 0)], vec![], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, None, vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![], 0)], vec![], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, None, vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![], 0)], vec![0], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, None, vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![], 0)], vec![0], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, None, vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![], 0)], vec![1], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, None, vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![], 0)], vec![1], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, None, vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![], 1)], vec![], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, None, vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![], 1)], vec![], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, None, vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![], 1)], vec![0], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, None, vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![], 1)], vec![0], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, None, vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![], 1)], vec![1], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, None, vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![], 1)], vec![1], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, None, vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![Default::default()], 0)], vec![], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, None, vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![Default::default()], 0)], vec![], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, None, vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![Default::default()], 0)], vec![0], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, None, vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![Default::default()], 0)], vec![0], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, None, vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![Default::default()], 0)], vec![1], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, None, vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![Default::default()], 0)], vec![1], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, None, vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![Default::default()], 1)], vec![], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, None, vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![Default::default()], 1)], vec![0], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, None, vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![Default::default()], 1)], vec![], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, None, vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![Default::default()], 1)], vec![0], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, None, vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![Default::default()], 1)], vec![1], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, None, vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![Default::default()], 1)], vec![1], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, Some(Default::default()), vec![], vec![], vec![], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, Some(Default::default()), vec![], vec![], vec![], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, Some(Default::default()), vec![], vec![], vec![0], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, Some(Default::default()), vec![], vec![], vec![0], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, Some(Default::default()), vec![], vec![], vec![1], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, Some(Default::default()), vec![], vec![], vec![1], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, Some(Default::default()), vec![], vec![(Default::default(), vec![], 0)], vec![], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, Some(Default::default()), vec![], vec![(Default::default(), vec![], 0)], vec![], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, Some(Default::default()), vec![], vec![(Default::default(), vec![], 0)], vec![0], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, Some(Default::default()), vec![], vec![(Default::default(), vec![], 0)], vec![0], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, Some(Default::default()), vec![], vec![(Default::default(), vec![], 0)], vec![1], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, Some(Default::default()), vec![], vec![(Default::default(), vec![], 0)], vec![1], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, Some(Default::default()), vec![], vec![(Default::default(), vec![], 1)], vec![], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, Some(Default::default()), vec![], vec![(Default::default(), vec![], 1)], vec![], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, Some(Default::default()), vec![], vec![(Default::default(), vec![], 1)], vec![0], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, Some(Default::default()), vec![], vec![(Default::default(), vec![], 1)], vec![0], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, Some(Default::default()), vec![], vec![(Default::default(), vec![], 1)], vec![1], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, Some(Default::default()), vec![], vec![(Default::default(), vec![], 1)], vec![1], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, Some(Default::default()), vec![], vec![(Default::default(), vec![Default::default()], 0)], vec![], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, Some(Default::default()), vec![], vec![(Default::default(), vec![Default::default()], 0)], vec![0], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, Some(Default::default()), vec![], vec![(Default::default(), vec![Default::default()], 0)], vec![], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, Some(Default::default()), vec![], vec![(Default::default(), vec![Default::default()], 0)], vec![0], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, Some(Default::default()), vec![], vec![(Default::default(), vec![Default::default()], 0)], vec![1], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, Some(Default::default()), vec![], vec![(Default::default(), vec![Default::default()], 0)], vec![1], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, Some(Default::default()), vec![], vec![(Default::default(), vec![Default::default()], 1)], vec![], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, Some(Default::default()), vec![], vec![(Default::default(), vec![Default::default()], 1)], vec![], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, Some(Default::default()), vec![], vec![(Default::default(), vec![Default::default()], 1)], vec![0], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, Some(Default::default()), vec![], vec![(Default::default(), vec![Default::default()], 1)], vec![0], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, Some(Default::default()), vec![], vec![(Default::default(), vec![Default::default()], 1)], vec![1], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, Some(Default::default()), vec![], vec![(Default::default(), vec![Default::default()], 1)], vec![1], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![], vec![], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![], vec![], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![], vec![0], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![], vec![0], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![], vec![1], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![], vec![1], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![], 0)], vec![], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![], 0)], vec![], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![], 0)], vec![0], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![], 0)], vec![0], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![], 0)], vec![1], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![], 0)], vec![1], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![], 1)], vec![], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![], 1)], vec![], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![], 1)], vec![0], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![], 1)], vec![0], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![], 1)], vec![1], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![], 1)], vec![1], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![Default::default()], 0)], vec![], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![Default::default()], 0)], vec![], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![Default::default()], 0)], vec![0], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![Default::default()], 0)], vec![0], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![Default::default()], 0)], vec![1], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![Default::default()], 0)], vec![1], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![Default::default()], 1)], vec![], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![Default::default()], 1)], vec![0], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![Default::default()], 1)], vec![], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![Default::default()], 1)], vec![0], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![Default::default()], 1)], vec![1], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, Some(Default::default()), vec![(Default::default(), Default::default(), 0)], vec![(Default::default(), vec![Default::default()], 1)], vec![1], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![], vec![], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![], vec![], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![], vec![0], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![], vec![1], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![], vec![0], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![], vec![1], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![], 0)], vec![], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![], 0)], vec![], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![], 0)], vec![0], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![], 0)], vec![0], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![], 0)], vec![1], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![], 0)], vec![1], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![], 1)], vec![], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![], 1)], vec![], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![], 1)], vec![0], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![], 1)], vec![0], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![], 1)], vec![1], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![], 1)], vec![1], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![Default::default()], 0)], vec![], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![Default::default()], 0)], vec![], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![Default::default()], 0)], vec![0], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![Default::default()], 0)], vec![0], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![Default::default()], 0)], vec![1], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![Default::default()], 0)], vec![1], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![Default::default()], 1)], vec![], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![Default::default()], 1)], vec![], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![Default::default()], 1)], vec![0], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![Default::default()], 1)], vec![0], vec![Default::default()]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![Default::default()], 1)], vec![1], vec![]))
stackslib/src/net/download.rs:2356:9: replace PeerNetwork::download_blocks -> Result<(bool, bool, Option<PoxId>, Vec<(ConsensusHash, StacksBlock, u64)>, Vec<(ConsensusHash, Vec<StacksMicroblock>, u64)>, Vec<usize>, Vec<NeighborKey>,), net_error, > with Ok((false, false, Some(Default::default()), vec![(Default::default(), Default::default(), 1)], vec![(Default::default(), vec![Default::default()], 1)], vec![1], vec![Default::default()]))
stackslib/src/net/http/mod.rs:89:9: replace <impl Error for Error>::cause -> Option<&dyn std::error::Error> with Some(&Default::default())
stackslib/src/net/http/mod.rs:104:9: replace <impl From for Error>::from -> Error with Default::default()
stackslib/src/net/http/mod.rs:110:9: replace <impl From for Error>::from -> Error with Default::default()
stackslib/src/net/http/mod.rs:117:9: replace Error::into_http_error -> Box<dyn HttpErrorResponse> with Box::new(Default::default())
stackslib/src/net/http/mod.rs:178:9: replace <impl FromStr for HttpContentType>::from_str -> Result<HttpContentType, CodecError> with Ok(Default::default())
stackslib/src/net/httpcore.rs:92:9: replace <impl From for TipRequest>::from -> TipRequest with Default::default()
stackslib/src/net/httpcore.rs:188:9: replace request::get_contract_address -> Result<QualifiedContractIdentifier, HttpError> with Ok(Default::default())
stackslib/src/net/httpcore.rs:221:9: replace request::get_block_hash -> Result<StacksBlockId, HttpError> with Ok(Default::default())
stackslib/src/net/httpcore.rs:236:9: replace request::get_txid -> Result<Txid, HttpError> with Ok(Default::default())
stackslib/src/net/httpcore.rs:251:9: replace request::get_clarity_name -> Result<ClarityName, HttpError> with Ok(Default::default())
stackslib/src/net/httpcore.rs:266:9: replace request::get_consensus_hash -> Result<ConsensusHash, HttpError> with Ok(Default::default())
stackslib/src/net/httpcore.rs:310:9: replace <impl HttpRequestContentsExtensions for HttpRequestContents>::for_specific_tip -> Self with Default::default()
stackslib/src/net/httpcore.rs:315:9: replace <impl HttpRequestContentsExtensions for HttpRequestContents>::for_tip -> Self with Default::default()
stackslib/src/net/httpcore.rs:325:9: replace <impl HttpRequestContentsExtensions for HttpRequestContents>::tip_request -> TipRequest with Default::default()
stackslib/src/net/httpcore.rs:352:9: replace <impl RPCRequestHandlerClone for T>::clone_rpc_handler_box -> Box<dyn RPCRequestHandler> with Box::new(Default::default())
stackslib/src/net/httpcore.rs:358:9: replace <impl Clone for Box<dyn RPCRequestHandler>>::clone -> Box<dyn RPCRequestHandler> with Box::new(Default::default())
stackslib/src/net/httpcore.rs:381:9: replace RPCRequestHandler::get_canonical_burn_chain_tip -> Result<BlockSnapshot, StacksHttpResponse> with Ok(Default::default())
stackslib/src/net/httpcore.rs:396:9: replace RPCRequestHandler::get_stacks_epoch -> Result<StacksEpoch, StacksHttpResponse> with Ok(Default::default())
stackslib/src/net/httpcore.rs:417:9: replace RPCRequestHandler::get_stacks_chain_tip -> Result<StagingBlock, StacksHttpResponse> with Ok(Default::default())
stackslib/src/net/httpcore.rs:463:9: replace StacksHttpRequest::new_for_peer -> Result<Self, NetError> with Ok(Default::default())
stackslib/src/net/httpcore.rs:488:9: replace StacksHttpRequest::preamble -> &HttpRequestPreamble with &Default::default()
stackslib/src/net/httpcore.rs:493:9: replace StacksHttpRequest::preamble_mut -> &mut HttpRequestPreamble with Box::leak(Box::new(Default::default()))
stackslib/src/net/httpcore.rs:498:9: replace StacksHttpRequest::contents -> &HttpRequestContents with &Default::default()
stackslib/src/net/httpcore.rs:531:9: replace StacksHttpRequest::get_headers -> &BTreeMap<String, String> with &BTreeMap::new()
stackslib/src/net/httpcore.rs:531:9: replace StacksHttpRequest::get_headers -> &BTreeMap<String, String> with &BTreeMap::from_iter([(String::new(), String::new())])
stackslib/src/net/httpcore.rs:531:9: replace StacksHttpRequest::get_headers -> &BTreeMap<String, String> with &BTreeMap::from_iter([(String::new(), "xyzzy".into())])
stackslib/src/net/httpcore.rs:531:9: replace StacksHttpRequest::get_headers -> &BTreeMap<String, String> with &BTreeMap::from_iter([("xyzzy".into(), String::new())])
stackslib/src/net/httpcore.rs:531:9: replace StacksHttpRequest::get_headers -> &BTreeMap<String, String> with &BTreeMap::from_iter([("xyzzy".into(), "xyzzy".into())])
stackslib/src/net/httpcore.rs:541:9: replace StacksHttpRequest::destruct -> (HttpRequestPreamble, HttpRequestContents) with (Default::default(), Default::default())
stackslib/src/net/httpcore.rs:563:9: replace <impl From for Result<(HttpResponsePreamble, HttpResponseContents), NetError>>::from -> Self with Default::default()
stackslib/src/net/httpcore.rs:573:9: replace StacksHttpResponse::preamble -> &HttpResponsePreamble with &Default::default()
stackslib/src/net/httpcore.rs:577:9: replace StacksHttpResponse::body -> &HttpResponsePayload with &Default::default()
stackslib/src/net/httpcore.rs:581:9: replace StacksHttpResponse::destruct -> (HttpResponsePreamble, HttpResponsePayload) with (Default::default(), Default::default())
stackslib/src/net/httpcore.rs:588:9: replace StacksHttpResponse::try_into_contents -> Result<(HttpResponsePreamble, HttpResponseContents), NetError> with Ok((Default::default(), Default::default()))
stackslib/src/net/httpcore.rs:609:9: replace StacksHttpResponse::new_error -> StacksHttpResponse with Default::default()
stackslib/src/net/httpcore.rs:629:9: replace StacksHttpResponse::new_empty_error -> StacksHttpResponse with Default::default()
stackslib/src/net/httpcore.rs:648:9: replace StacksHttpResponse::get_http_payload_ok -> Result<HttpResponsePayload, NetError> with Ok(Default::default())
stackslib/src/net/httpcore.rs:718:9: replace <impl StacksMessageCodec for StacksHttpPreamble>::consensus_deserialize -> Result<StacksHttpPreamble, CodecError> with Ok(Default::default())
stackslib/src/net/httpcore.rs:977:9: replace StacksHttp::try_parse_request -> Result<StacksHttpRequest, NetError> with Ok(Default::default())
stackslib/src/net/httpcore.rs:1023:9: replace StacksHttp::try_parse_error_response -> Result<StacksHttpResponse, NetError> with Ok(Default::default())
stackslib/src/net/httpcore.rs:1064:9: replace StacksHttp::try_parse_response -> Result<StacksHttpResponse, NetError> with Ok(Default::default())
stackslib/src/net/httpcore.rs:1086:9: replace StacksHttp::try_handle_request -> Result<(HttpResponsePreamble, HttpResponseContents), NetError> with Ok((Default::default(), Default::default()))
stackslib/src/net/httpcore.rs:1317:9: replace <impl ProtocolFamily for StacksHttp>::read_preamble -> Result<(StacksHttpPreamble, usize), NetError> with Ok((Default::default(), 0))
stackslib/src/net/httpcore.rs:1317:9: replace <impl ProtocolFamily for StacksHttp>::read_preamble -> Result<(StacksHttpPreamble, usize), NetError> with Ok((Default::default(), 1))
stackslib/src/net/httpcore.rs:1367:9: replace <impl ProtocolFamily for StacksHttp>::stream_payload -> Result<(Option<(StacksHttpMessage, usize)>, usize), NetError> with Ok((Some((Default::default(), 0)), 0))
stackslib/src/net/httpcore.rs:1367:9: replace <impl ProtocolFamily for StacksHttp>::stream_payload -> Result<(Option<(StacksHttpMessage, usize)>, usize), NetError> with Ok((Some((Default::default(), 0)), 1))
stackslib/src/net/httpcore.rs:1367:9: replace <impl ProtocolFamily for StacksHttp>::stream_payload -> Result<(Option<(StacksHttpMessage, usize)>, usize), NetError> with Ok((Some((Default::default(), 1)), 0))
stackslib/src/net/httpcore.rs:1367:9: replace <impl ProtocolFamily for StacksHttp>::stream_payload -> Result<(Option<(StacksHttpMessage, usize)>, usize), NetError> with Ok((Some((Default::default(), 1)), 1))
stackslib/src/net/httpcore.rs:1460:9: replace <impl ProtocolFamily for StacksHttp>::read_payload -> Result<(StacksHttpMessage, usize), NetError> with Ok((Default::default(), 0))
stackslib/src/net/httpcore.rs:1460:9: replace <impl ProtocolFamily for StacksHttp>::read_payload -> Result<(StacksHttpMessage, usize), NetError> with Ok((Default::default(), 1))
stackslib/src/net/inv.rs:82:9: replace PeerBlocksInv::empty -> PeerBlocksInv with Default::default()
stackslib/src/net/inv.rs:607:9: replace NeighborBlockStats::diagnose_nack -> NodeStatus with Default::default()
stackslib/src/net/inv.rs:1046:9: replace InvState::get_peer_status -> NodeStatus with Default::default()
stackslib/src/net/inv.rs:1081:9: replace InvState::cull_bad_peers -> HashSet<NeighborKey> with HashSet::from_iter([Default::default()])
stackslib/src/net/inv.rs:1105:9: replace InvState::get_broken_peers -> Vec<NeighborKey> with vec![Default::default()]
stackslib/src/net/inv.rs:1116:9: replace InvState::get_diverged_peers -> Vec<NeighborKey> with vec![Default::default()]
stackslib/src/net/inv.rs:1127:9: replace InvState::get_dead_peers -> Vec<NeighborKey> with vec![Default::default()]
stackslib/src/net/inv.rs:1137:9: replace InvState::get_stats -> Option<&NeighborBlockStats> with Some(&Default::default())
stackslib/src/net/inv.rs:1141:9: replace InvState::get_stats_mut -> Option<&mut NeighborBlockStats> with Some(Box::leak(Box::new(Default::default())))
stackslib/src/net/inv.rs:1312:9: replace PeerNetwork::get_tip_sortition_snapshot -> Result<BlockSnapshot, net_error> with Ok(Default::default())
stackslib/src/net/inv.rs:1330:9: replace PeerNetwork::get_ancestor_sortition_snapshot -> Result<BlockSnapshot, net_error> with Ok(Default::default())
stackslib/src/net/inv.rs:1359:9: replace PeerNetwork::get_peer_sortition_snapshot -> Result<Option<BlockSnapshot>, net_error> with Ok(Some(Default::default()))
stackslib/src/net/inv.rs:1383:9: replace PeerNetwork::make_getpoxinv -> Result<Option<GetPoxInv>, net_error> with Ok(Some(Default::default()))
stackslib/src/net/inv.rs:1606:9: replace PeerNetwork::make_getblocksinv -> Result<Option<GetBlocksInv>, net_error> with Ok(Some(Default::default()))
stackslib/src/net/inv.rs:1711:9: replace PeerNetwork::make_next_getpoxinv -> Result<Option<(u64, GetPoxInv)>, net_error> with Ok(Some((0, Default::default())))
stackslib/src/net/inv.rs:1711:9: replace PeerNetwork::make_next_getpoxinv -> Result<Option<(u64, GetPoxInv)>, net_error> with Ok(Some((1, Default::default())))
stackslib/src/net/inv.rs:1744:9: replace PeerNetwork::make_next_getblocksinv -> Result<Option<(u64, GetBlocksInv)>, net_error> with Ok(Some((0, Default::default())))
stackslib/src/net/inv.rs:1744:9: replace PeerNetwork::make_next_getblocksinv -> Result<Option<(u64, GetBlocksInv)>, net_error> with Ok(Some((1, Default::default())))
stackslib/src/net/inv.rs:2243:9: replace PeerNetwork::sync_inventories -> (bool, bool, Vec<NeighborKey>, Vec<NeighborKey>) with (true, true, vec![], vec![Default::default()])
stackslib/src/net/inv.rs:2243:9: replace PeerNetwork::sync_inventories -> (bool, bool, Vec<NeighborKey>, Vec<NeighborKey>) with (true, true, vec![Default::default()], vec![])
stackslib/src/net/inv.rs:2243:9: replace PeerNetwork::sync_inventories -> (bool, bool, Vec<NeighborKey>, Vec<NeighborKey>) with (true, true, vec![Default::default()], vec![Default::default()])
stackslib/src/net/inv.rs:2243:9: replace PeerNetwork::sync_inventories -> (bool, bool, Vec<NeighborKey>, Vec<NeighborKey>) with (true, false, vec![], vec![Default::default()])
stackslib/src/net/inv.rs:2243:9: replace PeerNetwork::sync_inventories -> (bool, bool, Vec<NeighborKey>, Vec<NeighborKey>) with (true, false, vec![Default::default()], vec![])
stackslib/src/net/inv.rs:2243:9: replace PeerNetwork::sync_inventories -> (bool, bool, Vec<NeighborKey>, Vec<NeighborKey>) with (true, false, vec![Default::default()], vec![Default::default()])
stackslib/src/net/inv.rs:2243:9: replace PeerNetwork::sync_inventories -> (bool, bool, Vec<NeighborKey>, Vec<NeighborKey>) with (false, true, vec![], vec![Default::default()])
stackslib/src/net/inv.rs:2243:9: replace PeerNetwork::sync_inventories -> (bool, bool, Vec<NeighborKey>, Vec<NeighborKey>) with (false, true, vec![Default::default()], vec![])
stackslib/src/net/inv.rs:2243:9: replace PeerNetwork::sync_inventories -> (bool, bool, Vec<NeighborKey>, Vec<NeighborKey>) with (false, true, vec![Default::default()], vec![Default::default()])
stackslib/src/net/inv.rs:2243:9: replace PeerNetwork::sync_inventories -> (bool, bool, Vec<NeighborKey>, Vec<NeighborKey>) with (false, false, vec![], vec![Default::default()])
stackslib/src/net/inv.rs:2243:9: replace PeerNetwork::sync_inventories -> (bool, bool, Vec<NeighborKey>, Vec<NeighborKey>) with (false, false, vec![Default::default()], vec![])
stackslib/src/net/inv.rs:2243:9: replace PeerNetwork::sync_inventories -> (bool, bool, Vec<NeighborKey>, Vec<NeighborKey>) with (false, false, vec![Default::default()], vec![Default::default()])
stackslib/src/net/inv.rs:2481:9: replace PeerNetwork::with_inv_state -> Result<R, net_error> with Ok(Default::default())
stackslib/src/net/inv.rs:2495:9: replace PeerNetwork::get_outbound_sync_peers -> HashSet<NeighborKey> with HashSet::from_iter([Default::default()])
stackslib/src/net/inv.rs:2555:9: replace PeerNetwork::with_neighbor_blocks_inv -> Result<R, net_error> with Ok(Default::default())
stackslib/src/net/inv.rs:2575:9: replace PeerNetwork::get_local_blocks_inv -> Result<BlocksInvData, net_error> with Ok(Default::default())
stackslib/src/net/neighbors/mod.rs:119:9: replace PeerNetwork::new_outbound_or_pingback_walk -> Result<NeighborWalk<PeerDBNeighborWalk, PeerNetworkComms>, net_error> with Ok(Default::default())
stackslib/src/net/neighbors/mod.rs:182:9: replace PeerNetwork::new_maybe_inbound_walk -> Result<NeighborWalk<PeerDBNeighborWalk, PeerNetworkComms>, net_error> with Ok(Default::default())
stackslib/src/net/neighbors/mod.rs:211:9: replace PeerNetwork::new_neighbor_walk -> Option<NeighborWalk<PeerDBNeighborWalk, PeerNetworkComms>> with Some(Default::default())
stackslib/src/net/neighbors/mod.rs:386:9: replace PeerNetwork::walk_peer_graph -> (bool, Option<NeighborWalkResult>) with (true, Some(Default::default()))
stackslib/src/net/neighbors/mod.rs:386:9: replace PeerNetwork::walk_peer_graph -> (bool, Option<NeighborWalkResult>) with (false, Some(Default::default()))
stackslib/src/net/p2p.rs:171:9: replace NetworkHandleServer::pair -> (NetworkHandleServer, NetworkHandle) with (Default::default(), Default::default())
stackslib/src/net/p2p.rs:503:9: replace PeerNetwork::get_current_epoch -> StacksEpoch with Default::default()
stackslib/src/net/p2p.rs:519:9: replace PeerNetwork::with_http -> R with Default::default()
stackslib/src/net/p2p.rs:562:9: replace PeerNetwork::bound_neighbor_key -> &NeighborKey with &Default::default()
stackslib/src/net/p2p.rs:567:9: replace PeerNetwork::get_chain_view -> &BurnchainView with &Default::default()
stackslib/src/net/p2p.rs:572:9: replace PeerNetwork::get_local_peer -> &LocalPeer with &Default::default()
stackslib/src/net/p2p.rs:577:9: replace PeerNetwork::get_connection_opts -> &ConnectionOptions with &Default::default()
stackslib/src/net/p2p.rs:582:9: replace PeerNetwork::get_p2p_convo -> Option<&ConversationP2P> with Some(&Default::default())
stackslib/src/net/p2p.rs:587:9: replace PeerNetwork::get_p2p_convo_mut -> Option<&mut ConversationP2P> with Some(Box::leak(Box::new(Default::default())))
stackslib/src/net/p2p.rs:597:9: replace PeerNetwork::get_neighbor_walk_db -> PeerDBNeighborWalk with Default::default()
stackslib/src/net/p2p.rs:602:9: replace PeerNetwork::get_neighbor_comms -> PeerNetworkComms with Default::default()
stackslib/src/net/p2p.rs:607:9: replace PeerNetwork::peerdb_conn -> &DBConn with &Default::default()
stackslib/src/net/p2p.rs:612:9: replace PeerNetwork::peerdb_tx_begin -> Result<DBTx<'a>, db_error> with Ok(Default::default())
stackslib/src/net/p2p.rs:617:9: replace PeerNetwork::get_stackerdbs -> &StackerDBs with &Default::default()
stackslib/src/net/p2p.rs:625:9: replace PeerNetwork::stackerdbs_tx_begin -> Result<StackerDBTx<'a>, net_error> with Ok(Default::default())
stackslib/src/net/p2p.rs:636:9: replace PeerNetwork::get_walk_pingbacks -> &HashMap<NeighborAddress, NeighborPingback> with &HashMap::new()
stackslib/src/net/p2p.rs:636:9: replace PeerNetwork::get_walk_pingbacks -> &HashMap<NeighborAddress, NeighborPingback> with &HashMap::from_iter([(Default::default(), Default::default())])
stackslib/src/net/p2p.rs:641:9: replace PeerNetwork::get_burnchain -> &Burnchain with &Default::default()
stackslib/src/net/p2p.rs:651:9: replace PeerNetwork::get_pox_id -> &PoxId with &Default::default()
stackslib/src/net/p2p.rs:656:9: replace PeerNetwork::get_header_cache -> &BlockHeaderCache with &Default::default()
stackslib/src/net/p2p.rs:666:9: replace PeerNetwork::get_atlasdb -> &AtlasDB with &Default::default()
stackslib/src/net/p2p.rs:671:9: replace PeerNetwork::get_atlasdb_mut -> &mut AtlasDB with Box::leak(Box::new(Default::default()))
stackslib/src/net/p2p.rs:701:9: replace PeerNetwork::with_network_state -> Result<R, net_error> with Ok(Default::default())
stackslib/src/net/p2p.rs:720:9: replace PeerNetwork::with_attachments_downloader -> Result<R, net_error> with Ok(Default::default())
stackslib/src/net/p2p.rs:733:9: replace PeerNetwork::new_handle -> NetworkHandle with Default::default()
stackslib/src/net/p2p.rs:796:9: replace PeerNetwork::send_p2p_message -> Result<ReplyHandleP2P, net_error> with Ok(Default::default())
stackslib/src/net/p2p.rs:814:9: replace PeerNetwork::send_neighbor_message -> Result<ReplyHandleP2P, net_error> with Ok(Default::default())
stackslib/src/net/p2p.rs:1079:9: replace PeerNetwork::coalesce_neighbors -> Vec<NeighborKey> with vec![Default::default()]
stackslib/src/net/p2p.rs:1115:9: replace PeerNetwork::sample_broadcast_peers -> Result<Vec<NeighborKey>, net_error> with Ok(vec![Default::default()])
stackslib/src/net/p2p.rs:1405:9: replace PeerNetwork::lookup_peer -> Result<Option<Neighbor>, net_error> with Ok(Some(Default::default()))
stackslib/src/net/p2p.rs:1450:9: replace PeerNetwork::get_event_neighbor_key -> Option<NeighborKey> with Some(Default::default())
stackslib/src/net/p2p.rs:1658:9: replace PeerNetwork::get_neighbor_convo -> Option<&ConversationP2P> with Some(&Default::default())
stackslib/src/net/p2p.rs:1669:9: replace PeerNetwork::get_neighbor_convo_mut -> Option<&mut ConversationP2P> with Some(Box::leak(Box::new(Default::default())))
stackslib/src/net/p2p.rs:1765:9: replace PeerNetwork::sign_for_neighbor -> Result<StacksMessage, net_error> with Ok(Default::default())
stackslib/src/net/p2p.rs:1781:9: replace PeerNetwork::sign_for_p2p -> Result<StacksMessage, net_error> with Ok(Default::default())
stackslib/src/net/p2p.rs:1801:9: replace PeerNetwork::sign_for_p2p_reply -> Result<StacksMessage, net_error> with Ok(Default::default())
stackslib/src/net/p2p.rs:1879:9: replace PeerNetwork::with_p2p_convo -> Result<R, net_error> with Ok(Default::default())
stackslib/src/net/p2p.rs:1918:9: replace PeerNetwork::process_p2p_conversation -> Result<(Vec<StacksMessage>, bool), net_error> with Ok((vec![Default::default()], true))
stackslib/src/net/p2p.rs:1918:9: replace PeerNetwork::process_p2p_conversation -> Result<(Vec<StacksMessage>, bool), net_error> with Ok((vec![Default::default()], false))
stackslib/src/net/p2p.rs:2006:9: replace PeerNetwork::process_ready_sockets -> (Vec<usize>, HashMap<usize, Vec<StacksMessage>>) with (vec![], HashMap::from_iter([(0, vec![Default::default()])]))
stackslib/src/net/p2p.rs:2006:9: replace PeerNetwork::process_ready_sockets -> (Vec<usize>, HashMap<usize, Vec<StacksMessage>>) with (vec![], HashMap::from_iter([(1, vec![Default::default()])]))
stackslib/src/net/p2p.rs:2006:9: replace PeerNetwork::process_ready_sockets -> (Vec<usize>, HashMap<usize, Vec<StacksMessage>>) with (vec![0], HashMap::from_iter([(0, vec![Default::default()])]))
stackslib/src/net/p2p.rs:2006:9: replace PeerNetwork::process_ready_sockets -> (Vec<usize>, HashMap<usize, Vec<StacksMessage>>) with (vec![0], HashMap::from_iter([(1, vec![Default::default()])]))
stackslib/src/net/p2p.rs:2006:9: replace PeerNetwork::process_ready_sockets -> (Vec<usize>, HashMap<usize, Vec<StacksMessage>>) with (vec![1], HashMap::from_iter([(0, vec![Default::default()])]))
stackslib/src/net/p2p.rs:2006:9: replace PeerNetwork::process_ready_sockets -> (Vec<usize>, HashMap<usize, Vec<StacksMessage>>) with (vec![1], HashMap::from_iter([(1, vec![Default::default()])]))
stackslib/src/net/p2p.rs:2047:9: replace PeerNetwork::get_neighbor_stats -> Option<NeighborStats> with Some(Default::default())
stackslib/src/net/p2p.rs:2399:9: replace PeerNetwork::do_network_mempool_sync -> Option<Vec<StacksTransaction>> with Some(vec![Default::default()])
stackslib/src/net/p2p.rs:2860:9: replace PeerNetwork::find_next_push_block -> Option<(ConsensusHash, StacksBlock)> with Some((Default::default(), Default::default()))
stackslib/src/net/p2p.rs:2924:9: replace PeerNetwork::find_next_push_microblocks -> Option<(ConsensusHash, BlockHeaderHash, Vec<StacksMicroblock>)> with Some((Default::default(), Default::default(), vec![]))
stackslib/src/net/p2p.rs:2924:9: replace PeerNetwork::find_next_push_microblocks -> Option<(ConsensusHash, BlockHeaderHash, Vec<StacksMicroblock>)> with Some((Default::default(), Default::default(), vec![Default::default()]))
stackslib/src/net/p2p.rs:3360:9: replace PeerNetwork::try_get_url_ip -> Result<Option<SocketAddr>, net_error> with Ok(Some(Default::default()))
stackslib/src/net/p2p.rs:3405:9: replace PeerNetwork::mempool_sync_pick_outbound_peer -> Result<Option<MempoolSyncState>, net_error> with Ok(Some(Default::default()))
stackslib/src/net/p2p.rs:3466:9: replace PeerNetwork::mempool_sync_begin_resolve_data_url -> Result<Option<MempoolSyncState>, net_error> with Ok(Some(Default::default()))
stackslib/src/net/p2p.rs:3521:9: replace PeerNetwork::mempool_sync_resolve_data_url -> Result<(bool, Option<SocketAddr>), net_error> with Ok((true, Some(Default::default())))
stackslib/src/net/p2p.rs:3521:9: replace PeerNetwork::mempool_sync_resolve_data_url -> Result<(bool, Option<SocketAddr>), net_error> with Ok((false, Some(Default::default())))
stackslib/src/net/p2p.rs:3591:9: replace PeerNetwork::mempool_sync_recv_response -> Result<(bool, Option<Txid>, Option<Vec<StacksTransaction>>), net_error> with Ok((true, None, Some(vec![Default::default()])))
stackslib/src/net/p2p.rs:3591:9: replace PeerNetwork::mempool_sync_recv_response -> Result<(bool, Option<Txid>, Option<Vec<StacksTransaction>>), net_error> with Ok((true, Some(Default::default()), None))
stackslib/src/net/p2p.rs:3591:9: replace PeerNetwork::mempool_sync_recv_response -> Result<(bool, Option<Txid>, Option<Vec<StacksTransaction>>), net_error> with Ok((true, Some(Default::default()), Some(vec![])))
stackslib/src/net/p2p.rs:3591:9: replace PeerNetwork::mempool_sync_recv_response -> Result<(bool, Option<Txid>, Option<Vec<StacksTransaction>>), net_error> with Ok((true, Some(Default::default()), Some(vec![Default::default()])))
stackslib/src/net/p2p.rs:3591:9: replace PeerNetwork::mempool_sync_recv_response -> Result<(bool, Option<Txid>, Option<Vec<StacksTransaction>>), net_error> with Ok((false, None, Some(vec![Default::default()])))
stackslib/src/net/p2p.rs:3591:9: replace PeerNetwork::mempool_sync_recv_response -> Result<(bool, Option<Txid>, Option<Vec<StacksTransaction>>), net_error> with Ok((false, Some(Default::default()), None))
stackslib/src/net/p2p.rs:3591:9: replace PeerNetwork::mempool_sync_recv_response -> Result<(bool, Option<Txid>, Option<Vec<StacksTransaction>>), net_error> with Ok((false, Some(Default::default()), Some(vec![])))
stackslib/src/net/p2p.rs:3591:9: replace PeerNetwork::mempool_sync_recv_response -> Result<(bool, Option<Txid>, Option<Vec<StacksTransaction>>), net_error> with Ok((false, Some(Default::default()), Some(vec![Default::default()])))
stackslib/src/net/p2p.rs:3643:9: replace PeerNetwork::do_mempool_sync -> (bool, Option<Vec<StacksTransaction>>) with (true, Some(vec![Default::default()]))
stackslib/src/net/p2p.rs:3643:9: replace PeerNetwork::do_mempool_sync -> (bool, Option<Vec<StacksTransaction>>) with (false, Some(vec![Default::default()]))
stackslib/src/net/p2p.rs:4183:9: replace PeerNetwork::find_outbound_neighbor -> Option<NeighborKey> with Some(Default::default())
stackslib/src/net/p2p.rs:4930:9: replace PeerNetwork::handle_unsolicited_messages -> HashMap<NeighborKey, Vec<StacksMessage>> with HashMap::from_iter([(Default::default(), vec![])])
stackslib/src/net/p2p.rs:4930:9: replace PeerNetwork::handle_unsolicited_messages -> HashMap<NeighborKey, Vec<StacksMessage>> with HashMap::from_iter([(Default::default(), vec![Default::default()])])
stackslib/src/net/p2p.rs:5129:9: replace PeerNetwork::load_local_peer -> Result<LocalPeer, net_error> with Ok(Default::default())
stackslib/src/net/p2p.rs:5153:9: replace PeerNetwork::get_stacker_db_configs_owned -> HashMap<QualifiedContractIdentifier, StackerDBConfig> with HashMap::from_iter([(Default::default(), Default::default())])
stackslib/src/net/p2p.rs:5158:9: replace PeerNetwork::get_stacker_db_configs -> &HashMap<QualifiedContractIdentifier, StackerDBConfig> with &HashMap::new()
stackslib/src/net/p2p.rs:5158:9: replace PeerNetwork::get_stacker_db_configs -> &HashMap<QualifiedContractIdentifier, StackerDBConfig> with &HashMap::from_iter([(Default::default(), Default::default())])
stackslib/src/net/p2p.rs:5216:9: replace PeerNetwork::refresh_burnchain_view -> Result<HashMap<NeighborKey, Vec<StacksMessage>>, net_error> with Ok(HashMap::from_iter([(Default::default(), vec![])]))
stackslib/src/net/p2p.rs:5216:9: replace PeerNetwork::refresh_burnchain_view -> Result<HashMap<NeighborKey, Vec<StacksMessage>>, net_error> with Ok(HashMap::from_iter([(Default::default(), vec![Default::default()])]))
stackslib/src/net/p2p.rs:5654:9: replace PeerNetwork::run -> Result<NetworkResult, net_error> with Ok(Default::default())
stackslib/src/net/poll.rs:91:9: replace NetworkState::bind_address -> Result<mio_net::TcpListener, net_error> with Ok(Default::default())
stackslib/src/net/poll.rs:129:9: replace NetworkState::bind -> Result<(usize, SocketAddr), net_error> with Ok((0, Default::default()))
stackslib/src/net/poll.rs:129:9: replace NetworkState::bind -> Result<(usize, SocketAddr), net_error> with Ok((1, Default::default()))
stackslib/src/net/poll.rs:308:9: replace NetworkState::connect -> Result<mio_net::TcpStream, net_error> with Ok(Default::default())
stackslib/src/net/poll.rs:372:9: replace NetworkState::poll -> Result<HashMap<usize, NetworkPollState>, net_error> with Ok(HashMap::from_iter([(0, Default::default())]))
stackslib/src/net/poll.rs:372:9: replace NetworkState::poll -> Result<HashMap<usize, NetworkPollState>, net_error> with Ok(HashMap::from_iter([(1, Default::default())]))
stackslib/src/net/prune.rs:47:9: replace PeerNetwork::org_neighbor_distribution -> Result<HashMap<u32, Vec<(NeighborKey, NeighborStats)>>, net_error> with Ok(HashMap::from_iter([(0, vec![(Default::default(), Default::default())])]))
stackslib/src/net/prune.rs:47:9: replace PeerNetwork::org_neighbor_distribution -> Result<HashMap<u32, Vec<(NeighborKey, NeighborStats)>>, net_error> with Ok(HashMap::from_iter([(1, vec![(Default::default(), Default::default())])]))
stackslib/src/net/prune.rs:113:9: replace PeerNetwork::compare_neighbor_uptime_health -> Ordering with Default::default()
stackslib/src/net/prune.rs:178:9: replace PeerNetwork::prune_frontier_outbound_orgs -> Result<Vec<NeighborKey>, net_error> with Ok(vec![Default::default()])
stackslib/src/net/prune.rs:312:9: replace PeerNetwork::prune_frontier_inbound_ip -> Vec<NeighborKey> with vec![Default::default()]
stackslib/src/net/relay.rs:119:9: replace <impl AsMemPoolEventDispatcher for T>::as_mempool_event_dispatcher -> &dyn MemPoolEventDispatcher with &Default::default()
stackslib/src/net/relay.rs:125:9: replace <impl AsStackerDBEventDispatcher for T>::as_stackerdb_event_dispatcher -> &dyn StackerDBEventDispatcher with &Default::default()
stackslib/src/net/relay.rs:140:9: replace <impl RelayPayload for BlocksAvailableData>::get_digest -> Sha512Trunc256Sum with Default::default()
stackslib/src/net/relay.rs:153:9: replace <impl RelayPayload for StacksBlock>::get_digest -> Sha512Trunc256Sum with Default::default()
stackslib/src/net/relay.rs:163:9: replace <impl RelayPayload for StacksMicroblock>::get_digest -> Sha512Trunc256Sum with Default::default()
stackslib/src/net/relay.rs:173:9: replace <impl RelayPayload for StacksTransaction>::get_digest -> Sha512Trunc256Sum with Default::default()
stackslib/src/net/relay.rs:294:9: replace RelayerStats::count_relay_dups -> HashMap<NeighborKey, usize> with HashMap::from_iter([(Default::default(), 0)])
stackslib/src/net/relay.rs:294:9: replace RelayerStats::count_relay_dups -> HashMap<NeighborKey, usize> with HashMap::from_iter([(Default::default(), 1)])
stackslib/src/net/relay.rs:323:9: replace RelayerStats::count_ASNs -> Result<HashMap<NeighborKey, usize>, net_error> with Ok(HashMap::from_iter([(Default::default(), 0)]))
stackslib/src/net/relay.rs:323:9: replace RelayerStats::count_ASNs -> Result<HashMap<NeighborKey, usize>, net_error> with Ok(HashMap::from_iter([(Default::default(), 1)]))
stackslib/src/net/relay.rs:368:9: replace RelayerStats::get_inbound_relay_rankings -> HashMap<NeighborKey, usize> with HashMap::from_iter([(Default::default(), 0)])
stackslib/src/net/relay.rs:368:9: replace RelayerStats::get_inbound_relay_rankings -> HashMap<NeighborKey, usize> with HashMap::from_iter([(Default::default(), 1)])
stackslib/src/net/relay.rs:402:9: replace RelayerStats::get_outbound_relay_rankings -> Result<HashMap<NeighborKey, usize>, net_error> with Ok(HashMap::from_iter([(Default::default(), 0)]))
stackslib/src/net/relay.rs:402:9: replace RelayerStats::get_outbound_relay_rankings -> Result<HashMap<NeighborKey, usize>, net_error> with Ok(HashMap::from_iter([(Default::default(), 1)]))
stackslib/src/net/relay.rs:426:9: replace RelayerStats::sample_neighbors -> Vec<NeighborKey> with vec![Default::default()]
stackslib/src/net/relay.rs:484:9: replace Relayer::from_p2p -> Relayer with Default::default()
stackslib/src/net/relay.rs:535:9: replace Relayer::get_parent_stacks_block_snapshot -> Result<BlockSnapshot, chainstate_error> with Ok(Default::default())
stackslib/src/net/relay.rs:658:9: replace Relayer::make_microblocksdata_messages -> Vec<(Vec<RelayData>, MicroblocksData)> with vec![(vec![], Default::default())]
stackslib/src/net/relay.rs:658:9: replace Relayer::make_microblocksdata_messages -> Vec<(Vec<RelayData>, MicroblocksData)> with vec![(vec![Default::default()], Default::default())]
stackslib/src/net/relay.rs:735:9: replace Relayer::preprocess_downloaded_blocks -> HashMap<ConsensusHash, StacksBlock> with HashMap::from_iter([(Default::default(), Default::default())])
stackslib/src/net/relay.rs:841:9: replace Relayer::preprocess_pushed_blocks -> Result<(HashMap<ConsensusHash, StacksBlock>, Vec<NeighborKey>), net_error> with Ok((HashMap::new(), vec![Default::default()]))
stackslib/src/net/relay.rs:841:9: replace Relayer::preprocess_pushed_blocks -> Result<(HashMap<ConsensusHash, StacksBlock>, Vec<NeighborKey>), net_error> with Ok((HashMap::from_iter([(Default::default(), Default::default())]), vec![]))
stackslib/src/net/relay.rs:841:9: replace Relayer::preprocess_pushed_blocks -> Result<(HashMap<ConsensusHash, StacksBlock>, Vec<NeighborKey>), net_error> with Ok((HashMap::from_iter([(Default::default(), Default::default())]), vec![Default::default()]))
stackslib/src/net/relay.rs:946:9: replace Relayer::preprocess_downloaded_microblocks -> HashMap<ConsensusHash, (StacksBlockId, Vec<StacksMicroblock>)> with HashMap::from_iter([(Default::default(), (Default::default(), vec![]))])
stackslib/src/net/relay.rs:946:9: replace Relayer::preprocess_downloaded_microblocks -> HashMap<ConsensusHash, (StacksBlockId, Vec<StacksMicroblock>)> with HashMap::from_iter([(Default::default(), (Default::default(), vec![Default::default()]))])
stackslib/src/net/relay.rs:1048:9: replace Relayer::preprocess_pushed_microblocks -> Result<(Vec<(Vec<RelayData>, MicroblocksData)>, Vec<NeighborKey>), net_error> with Ok((vec![], vec![Default::default()]))
stackslib/src/net/relay.rs:1048:9: replace Relayer::preprocess_pushed_microblocks -> Result<(Vec<(Vec<RelayData>, MicroblocksData)>, Vec<NeighborKey>), net_error> with Ok((vec![(vec![], Default::default())], vec![]))
stackslib/src/net/relay.rs:1048:9: replace Relayer::preprocess_pushed_microblocks -> Result<(Vec<(Vec<RelayData>, MicroblocksData)>, Vec<NeighborKey>), net_error> with Ok((vec![(vec![], Default::default())], vec![Default::default()]))
stackslib/src/net/relay.rs:1048:9: replace Relayer::preprocess_pushed_microblocks -> Result<(Vec<(Vec<RelayData>, MicroblocksData)>, Vec<NeighborKey>), net_error> with Ok((vec![(vec![Default::default()], Default::default())], vec![]))
stackslib/src/net/relay.rs:1048:9: replace Relayer::preprocess_pushed_microblocks -> Result<(Vec<(Vec<RelayData>, MicroblocksData)>, Vec<NeighborKey>), net_error> with Ok((vec![(vec![Default::default()], Default::default())], vec![Default::default()]))
stackslib/src/net/relay.rs:1383:9: replace Relayer::process_new_blocks -> Result<(HashMap<ConsensusHash, StacksBlock>, HashMap<ConsensusHash, (StacksBlockId, Vec<StacksMicroblock>)>, Vec<(Vec<RelayData>, MicroblocksData)>, Vec<NeighborKey>,), net_error, > with Ok((HashMap::new(), HashMap::new(), vec![], vec![Default::default()]))
stackslib/src/net/relay.rs:1383:9: replace Relayer::process_new_blocks -> Result<(HashMap<ConsensusHash, StacksBlock>, HashMap<ConsensusHash, (StacksBlockId, Vec<StacksMicroblock>)>, Vec<(Vec<RelayData>, MicroblocksData)>, Vec<NeighborKey>,), net_error, > with Ok((HashMap::new(), HashMap::new(), vec![(vec![], Default::default())], vec![]))
stackslib/src/net/relay.rs:1383:9: replace Relayer::process_new_blocks -> Result<(HashMap<ConsensusHash, StacksBlock>, HashMap<ConsensusHash, (StacksBlockId, Vec<StacksMicroblock>)>, Vec<(Vec<RelayData>, MicroblocksData)>, Vec<NeighborKey>,), net_error, > with Ok((HashMap::new(), HashMap::new(), vec![(vec![], Default::default())], vec![Default::default()]))
stackslib/src/net/relay.rs:1383:9: replace Relayer::process_new_blocks -> Result<(HashMap<ConsensusHash, StacksBlock>, HashMap<ConsensusHash, (StacksBlockId, Vec<StacksMicroblock>)>, Vec<(Vec<RelayData>, MicroblocksData)>, Vec<NeighborKey>,), net_error, > with Ok((HashMap::new(), HashMap::new(), vec![(vec![Default::default()], Default::default())], vec![]))
stackslib/src/net/relay.rs:1383:9: replace Relayer::process_new_blocks -> Result<(HashMap<ConsensusHash, StacksBlock>, HashMap<ConsensusHash, (StacksBlockId, Vec<StacksMicroblock>)>, Vec<(Vec<RelayData>, MicroblocksData)>, Vec<NeighborKey>,), net_error, > with Ok((HashMap::new(), HashMap::new(), vec![(vec![Default::default()], Default::default())], vec![Default::default()]))
stackslib/src/net/relay.rs:1383:9: replace Relayer::process_new_blocks -> Result<(HashMap<ConsensusHash, StacksBlock>, HashMap<ConsensusHash, (StacksBlockId, Vec<StacksMicroblock>)>, Vec<(Vec<RelayData>, MicroblocksData)>, Vec<NeighborKey>,), net_error, > with Ok((HashMap::new(), HashMap::from_iter([(Default::default(), (Default::default(), vec![]))]), vec![], vec![]))
stackslib/src/net/relay.rs:1383:9: replace Relayer::process_new_blocks -> Result<(HashMap<ConsensusHash, StacksBlock>, HashMap<ConsensusHash, (StacksBlockId, Vec<StacksMicroblock>)>, Vec<(Vec<RelayData>, MicroblocksData)>, Vec<NeighborKey>,), net_error, > with Ok((HashMap::new(), HashMap::from_iter([(Default::default(), (Default::default(), vec![]))]), vec![], vec![Default::default()]))
stackslib/src/net/relay.rs:1383:9: replace Relayer::process_new_blocks -> Result<(HashMap<ConsensusHash, StacksBlock>, HashMap<ConsensusHash, (StacksBlockId, Vec<StacksMicroblock>)>, Vec<(Vec<RelayData>, MicroblocksData)>, Vec<NeighborKey>,), net_error, > with Ok((HashMap::new(), HashMap::from_iter([(Default::default(), (Default::default(), vec![]))]), vec![(vec![], Default::default())], vec![]))
stackslib/src/net/relay.rs:1383:9: replace Relayer::process_new_blocks -> Result<(HashMap<ConsensusHash, StacksBlock>, HashMap<ConsensusHash, (StacksBlockId, Vec<StacksMicroblock>)>, Vec<(Vec<RelayData>, MicroblocksData)>, Vec<NeighborKey>,), net_error, > with Ok((HashMap::new(), HashMap::from_iter([(Default::default(), (Default::default(), vec![]))]), vec![(vec![], Default::default())], vec![Default::default()]))
stackslib/src/net/relay.rs:1383:9: replace Relayer::process_new_blocks -> Result<(HashMap<ConsensusHash, StacksBlock>, HashMap<ConsensusHash, (StacksBlockId, Vec<StacksMicroblock>)>, Vec<(Vec<RelayData>, MicroblocksData)>, Vec<NeighborKey>,), net_error, > with Ok((HashMap::new(), HashMap::from_iter([(Default::default(), (Default::default(), vec![]))]), vec![(vec![Default::default()], Default::default())], vec![]))
stackslib/src/net/relay.rs:1383:9: replace Relayer::process_new_blocks -> Result<(HashMap<ConsensusHash, StacksBlock>, HashMap<ConsensusHash, (StacksBlockId, Vec<StacksMicroblock>)>, Vec<(Vec<RelayData>, MicroblocksData)>, Vec<NeighborKey>,), net_error, > with Ok((HashMap::new(), HashMap::from_iter([(Default::default(), (Default::default(), vec![]))]), vec![(vec![Default::default()], Default::default())], vec![Default::default()]))
stackslib/src/net/relay.rs:1383:9: replace Relayer::process_new_blocks -> Result<(HashMap<ConsensusHash, StacksBlock>, HashMap<ConsensusHash, (StacksBlockId, Vec<StacksMicroblock>)>, Vec<(Vec<RelayData>, MicroblocksData)>, Vec<NeighborKey>,), net_error, > with Ok((HashMap::new(), HashMap::from_iter([(Default::default(), (Default::default(), vec![Default::default()]))]), vec![], vec![]))
stackslib/src/net/relay.rs:1383:9: replace Relayer::process_new_blocks -> Result<(HashMap<ConsensusHash, StacksBlock>, HashMap<ConsensusHash, (StacksBlockId, Vec<StacksMicroblock>)>, Vec<(Vec<RelayData>, MicroblocksData)>, Vec<NeighborKey>,), net_error, > with Ok((HashMap::new(), HashMap::from_iter([(Default::default(), (Default::default(), vec![Default::default()]))]), vec![], vec![Default::default()]))
stackslib/src/net/relay.rs:1383:9: replace Relayer::process_new_blocks -> Result<(HashMap<ConsensusHash, StacksBlock>, HashMap<ConsensusHash, (StacksBlockId, Vec<StacksMicroblock>)>, Vec<(Vec<RelayData>, MicroblocksData)>, Vec<NeighborKey>,), net_error, > with Ok((HashMap::new(), HashMap::from_iter([(Default::default(), (Default::default(), vec![Default::default()]))]), vec![(vec![], Default::default())], vec![]))
stackslib/src/net/relay.rs:1383:9: replace Relayer::process_new_blocks -> Result<(HashMap<ConsensusHash, StacksBlock>, HashMap<ConsensusHash, (StacksBlockId, Vec<StacksMicroblock>)>, Vec<(Vec<RelayData>, MicroblocksData)>, Vec<NeighborKey>,), net_error, > with Ok((HashMap::new(), HashMap::from_iter([(Default::default(), (Default::default(), vec![Default::default()]))]), vec![(vec![], Default::default())], vec![Default::default()]))
stackslib/src/net/relay.rs:1383:9: replace Relayer::process_new_blocks -> Result<(HashMap<ConsensusHash, StacksBlock>, HashMap<ConsensusHash, (StacksBlockId, Vec<StacksMicroblock>)>, Vec<(Vec<RelayData>, MicroblocksData)>, Vec<NeighborKey>,), net_error, > with Ok((HashMap::new(), HashMap::from_iter([(Default::default(), (Default::default(), vec![Default::default()]))]), vec![(vec![Default::default()], Default::default())], vec![]))
stackslib/src/net/relay.rs:1383:9: replace Relayer::process_new_blocks -> Result<(HashMap<ConsensusHash, StacksBlock>, HashMap<ConsensusHash, (StacksBlockId, Vec<StacksMicroblock>)>, Vec<(Vec<RelayData>, MicroblocksData)>, Vec<NeighborKey>,), net_error, > with Ok((HashMap::new(), HashMap::from_iter([(Default::default(), (Default::default(), vec![Default::default()]))]), vec![(vec![Default::default()], Default::default())], vec![Default::default()]))
stackslib/src/net/relay.rs:1383:9: replace Relayer::process_new_blocks -> Result<(HashMap<ConsensusHash, StacksBlock>, HashMap<ConsensusHash, (StacksBlockId, Vec<StacksMicroblock>)>, Vec<(Vec<RelayData>, MicroblocksData)>, Vec<NeighborKey>,), net_error, > with Ok((HashMap::from_iter([(Default::default(), Default::default())]), HashMap::new(), vec![], vec![]))
stackslib/src/net/relay.rs:1383:9: replace Relayer::process_new_blocks -> Result<(HashMap<ConsensusHash, StacksBlock>, HashMap<ConsensusHash, (StacksBlockId, Vec<StacksMicroblock>)>, Vec<(Vec<RelayData>, MicroblocksData)>, Vec<NeighborKey>,), net_error, > with Ok((HashMap::from_iter([(Default::default(), Default::default())]), HashMap::new(), vec![], vec![Default::default()]))
stackslib/src/net/relay.rs:1383:9: replace Relayer::process_new_blocks -> Result<(HashMap<ConsensusHash, StacksBlock>, HashMap<ConsensusHash, (StacksBlockId, Vec<StacksMicroblock>)>, Vec<(Vec<RelayData>, MicroblocksData)>, Vec<NeighborKey>,), net_error, > with Ok((HashMap::from_iter([(Default::default(), Default::default())]), HashMap::new(), vec![(vec![], Default::default())], vec![]))
stackslib/src/net/relay.rs:1383:9: replace Relayer::process_new_blocks -> Result<(HashMap<ConsensusHash, StacksBlock>, HashMap<ConsensusHash, (StacksBlockId, Vec<StacksMicroblock>)>, Vec<(Vec<RelayData>, MicroblocksData)>, Vec<NeighborKey>,), net_error, > with Ok((HashMap::from_iter([(Default::default(), Default::default())]), HashMap::new(), vec![(vec![], Default::default())], vec![Default::default()]))
stackslib/src/net/relay.rs:1383:9: replace Relayer::process_new_blocks -> Result<(HashMap<ConsensusHash, StacksBlock>, HashMap<ConsensusHash, (StacksBlockId, Vec<StacksMicroblock>)>, Vec<(Vec<RelayData>, MicroblocksData)>, Vec<NeighborKey>,), net_error, > with Ok((HashMap::from_iter([(Default::default(), Default::default())]), HashMap::new(), vec![(vec![Default::default()], Default::default())], vec![]))
stackslib/src/net/relay.rs:1383:9: replace Relayer::process_new_blocks -> Result<(HashMap<ConsensusHash, StacksBlock>, HashMap<ConsensusHash, (StacksBlockId, Vec<StacksMicroblock>)>, Vec<(Vec<RelayData>, MicroblocksData)>, Vec<NeighborKey>,), net_error, > with Ok((HashMap::from_iter([(Default::default(), Default::default())]), HashMap::new(), vec![(vec![Default::default()], Default::default())], vec![Default::default()]))
stackslib/src/net/relay.rs:1383:9: replace Relayer::process_new_blocks -> Result<(HashMap<ConsensusHash, StacksBlock>, HashMap<ConsensusHash, (StacksBlockId, Vec<StacksMicroblock>)>, Vec<(Vec<RelayData>, MicroblocksData)>, Vec<NeighborKey>,), net_error, > with Ok((HashMap::from_iter([(Default::default(), Default::default())]), HashMap::from_iter([(Default::default(), (Default::default(), vec![]))]), vec![], vec![]))
stackslib/src/net/relay.rs:1383:9: replace Relayer::process_new_blocks -> Result<(HashMap<ConsensusHash, StacksBlock>, HashMap<ConsensusHash, (StacksBlockId, Vec<StacksMicroblock>)>, Vec<(Vec<RelayData>, MicroblocksData)>, Vec<NeighborKey>,), net_error, > with Ok((HashMap::from_iter([(Default::default(), Default::default())]), HashMap::from_iter([(Default::default(), (Default::default(), vec![]))]), vec![], vec![Default::default()]))
stackslib/src/net/relay.rs:1383:9: replace Relayer::process_new_blocks -> Result<(HashMap<ConsensusHash, StacksBlock>, HashMap<ConsensusHash, (StacksBlockId, Vec<StacksMicroblock>)>, Vec<(Vec<RelayData>, MicroblocksData)>, Vec<NeighborKey>,), net_error, > with Ok((HashMap::from_iter([(Default::default(), Default::default())]), HashMap::from_iter([(Default::default(), (Default::default(), vec![]))]), vec![(vec![], Default::default())], vec![]))
stackslib/src/net/relay.rs:1383:9: replace Relayer::process_new_blocks -> Result<(HashMap<ConsensusHash, StacksBlock>, HashMap<ConsensusHash, (StacksBlockId, Vec<StacksMicroblock>)>, Vec<(Vec<RelayData>, MicroblocksData)>, Vec<NeighborKey>,), net_error, > with Ok((HashMap::from_iter([(Default::default(), Default::default())]), HashMap::from_iter([(Default::default(), (Default::default(), vec![]))]), vec![(vec![], Default::default())], vec![Default::default()]))
stackslib/src/net/relay.rs:1383:9: replace Relayer::process_new_blocks -> Result<(HashMap<ConsensusHash, StacksBlock>, HashMap<ConsensusHash, (StacksBlockId, Vec<StacksMicroblock>)>, Vec<(Vec<RelayData>, MicroblocksData)>, Vec<NeighborKey>,), net_error, > with Ok((HashMap::from_iter([(Default::default(), Default::default())]), HashMap::from_iter([(Default::default(), (Default::default(), vec![]))]), vec![(vec![Default::default()], Default::default())], vec![]))
stackslib/src/net/relay.rs:1383:9: replace Relayer::process_new_blocks -> Result<(HashMap<ConsensusHash, StacksBlock>, HashMap<ConsensusHash, (StacksBlockId, Vec<StacksMicroblock>)>, Vec<(Vec<RelayData>, MicroblocksData)>, Vec<NeighborKey>,), net_error, > with Ok((HashMap::from_iter([(Default::default(), Default::default())]), HashMap::from_iter([(Default::default(), (Default::default(), vec![]))]), vec![(vec![Default::default()], Default::default())], vec![Default::default()]))
stackslib/src/net/relay.rs:1383:9: replace Relayer::process_new_blocks -> Result<(HashMap<ConsensusHash, StacksBlock>, HashMap<ConsensusHash, (StacksBlockId, Vec<StacksMicroblock>)>, Vec<(Vec<RelayData>, MicroblocksData)>, Vec<NeighborKey>,), net_error, > with Ok((HashMap::from_iter([(Default::default(), Default::default())]), HashMap::from_iter([(Default::default(), (Default::default(), vec![Default::default()]))]), vec![], vec![]))
stackslib/src/net/relay.rs:1383:9: replace Relayer::process_new_blocks -> Result<(HashMap<ConsensusHash, StacksBlock>, HashMap<ConsensusHash, (StacksBlockId, Vec<StacksMicroblock>)>, Vec<(Vec<RelayData>, MicroblocksData)>, Vec<NeighborKey>,), net_error, > with Ok((HashMap::from_iter([(Default::default(), Default::default())]), HashMap::from_iter([(Default::default(), (Default::default(), vec![Default::default()]))]), vec![], vec![Default::default()]))
stackslib/src/net/relay.rs:1383:9: replace Relayer::process_new_blocks -> Result<(HashMap<ConsensusHash, StacksBlock>, HashMap<ConsensusHash, (StacksBlockId, Vec<StacksMicroblock>)>, Vec<(Vec<RelayData>, MicroblocksData)>, Vec<NeighborKey>,), net_error, > with Ok((HashMap::from_iter([(Default::default(), Default::default())]), HashMap::from_iter([(Default::default(), (Default::default(), vec![Default::default()]))]), vec![(vec![], Default::default())], vec![]))
stackslib/src/net/relay.rs:1383:9: replace Relayer::process_new_blocks -> Result<(HashMap<ConsensusHash, StacksBlock>, HashMap<ConsensusHash, (StacksBlockId, Vec<StacksMicroblock>)>, Vec<(Vec<RelayData>, MicroblocksData)>, Vec<NeighborKey>,), net_error, > with Ok((HashMap::from_iter([(Default::default(), Default::default())]), HashMap::from_iter([(Default::default(), (Default::default(), vec![Default::default()]))]), vec![(vec![], Default::default())], vec![Default::default()]))
stackslib/src/net/relay.rs:1383:9: replace Relayer::process_new_blocks -> Result<(HashMap<ConsensusHash, StacksBlock>, HashMap<ConsensusHash, (StacksBlockId, Vec<StacksMicroblock>)>, Vec<(Vec<RelayData>, MicroblocksData)>, Vec<NeighborKey>,), net_error, > with Ok((HashMap::from_iter([(Default::default(), Default::default())]), HashMap::from_iter([(Default::default(), (Default::default(), vec![Default::default()]))]), vec![(vec![Default::default()], Default::default())], vec![]))
stackslib/src/net/relay.rs:1383:9: replace Relayer::process_new_blocks -> Result<(HashMap<ConsensusHash, StacksBlock>, HashMap<ConsensusHash, (StacksBlockId, Vec<StacksMicroblock>)>, Vec<(Vec<RelayData>, MicroblocksData)>, Vec<NeighborKey>,), net_error, > with Ok((HashMap::from_iter([(Default::default(), Default::default())]), HashMap::from_iter([(Default::default(), (Default::default(), vec![Default::default()]))]), vec![(vec![Default::default()], Default::default())], vec![Default::default()]))
stackslib/src/net/relay.rs:1566:9: replace Relayer::process_transactions -> Result<Vec<(Vec<RelayData>, StacksTransaction)>, net_error> with Ok(vec![(vec![], Default::default())])
stackslib/src/net/relay.rs:1566:9: replace Relayer::process_transactions -> Result<Vec<(Vec<RelayData>, StacksTransaction)>, net_error> with Ok(vec![(vec![Default::default()], Default::default())])
stackslib/src/net/relay.rs:1863:9: replace Relayer::process_network_result -> Result<ProcessedNetReceipts, net_error> with Ok(Default::default())
stackslib/src/net/relay.rs:2034:9: replace PeerNetwork::find_block_recipients -> Result<(Vec<NeighborKey>, Vec<NeighborKey>), net_error> with Ok((vec![], vec![Default::default()]))
stackslib/src/net/relay.rs:2034:9: replace PeerNetwork::find_block_recipients -> Result<(Vec<NeighborKey>, Vec<NeighborKey>), net_error> with Ok((vec![Default::default()], vec![]))
stackslib/src/net/relay.rs:2034:9: replace PeerNetwork::find_block_recipients -> Result<(Vec<NeighborKey>, Vec<NeighborKey>), net_error> with Ok((vec![Default::default()], vec![Default::default()]))
stackslib/src/net/rpc.rs:188:9: replace ConversationHttp::get_url -> Option<&UrlString> with Some(&Default::default())
stackslib/src/net/rpc.rs:193:9: replace ConversationHttp::get_peer_addr -> &SocketAddr with &Default::default()
stackslib/src/net/rpc.rs:204:9: replace ConversationHttp::start_request -> Result<ReplyHandleHttp, net_error> with Ok(Default::default())
stackslib/src/net/rpc.rs:286:9: replace ConversationHttp::handle_request -> Result<Option<StacksMessageType>, net_error> with Ok(Some(Default::default()))
stackslib/src/net/rpc.rs:416:9: replace ConversationHttp::try_send_recv_response -> Result<StacksHttpResponse, Result<ReplyHandleHttp, net_error>> with Ok(Default::default())
stackslib/src/net/rpc.rs:474:9: replace ConversationHttp::try_get_response -> Option<StacksHttpResponse> with Some(Default::default())
stackslib/src/net/rpc.rs:527:9: replace ConversationHttp::chat -> Result<Vec<StacksMessageType>, net_error> with Ok(vec![Default::default()])
stackslib/src/net/rpc.rs:659:9: replace ConversationHttp::get_peer_host -> PeerHost with Default::default()
stackslib/src/net/server.rs:103:9: replace HttpPeer::get_conversation -> Option<&mut ConversationHttp> with Some(Box::leak(Box::new(Default::default())))
stackslib/src/net/server.rs:114:9: replace HttpPeer::get_conversation_and_socket -> (Option<&mut ConversationHttp>, Option<&mut mio::net::TcpStream>,) with (None, Some(Box::leak(Box::new(Default::default()))))
stackslib/src/net/server.rs:114:9: replace HttpPeer::get_conversation_and_socket -> (Option<&mut ConversationHttp>, Option<&mut mio::net::TcpStream>,) with (Some(Box::leak(Box::new(Default::default()))), None)
stackslib/src/net/server.rs:114:9: replace HttpPeer::get_conversation_and_socket -> (Option<&mut ConversationHttp>, Option<&mut mio::net::TcpStream>,) with (Some(Box::leak(Box::new(Default::default()))), Some(Box::leak(Box::new(Default::default()))))
stackslib/src/net/server.rs:423:9: replace HttpPeer::process_http_conversation -> Result<(bool, Vec<StacksMessageType>), net_error> with Ok((true, vec![Default::default()]))
stackslib/src/net/server.rs:423:9: replace HttpPeer::process_http_conversation -> Result<(bool, Vec<StacksMessageType>), net_error> with Ok((false, vec![Default::default()]))
stackslib/src/net/server.rs:552:9: replace HttpPeer::process_ready_sockets -> (Vec<StacksMessageType>, Vec<usize>) with (vec![Default::default()], vec![])
stackslib/src/net/server.rs:552:9: replace HttpPeer::process_ready_sockets -> (Vec<StacksMessageType>, Vec<usize>) with (vec![Default::default()], vec![0])
stackslib/src/net/server.rs:552:9: replace HttpPeer::process_ready_sockets -> (Vec<StacksMessageType>, Vec<usize>) with (vec![Default::default()], vec![1])
stackslib/src/net/server.rs:636:9: replace HttpPeer::run -> Vec<StacksMessageType> with vec![Default::default()]
stackslib/src/net/stackerdb/mod.rs:176:9: replace StackerDBConfig::noop -> StackerDBConfig with Default::default()
stackslib/src/net/stackerdb/mod.rs:271:9: replace StackerDBSyncResult::from_pushed_chunk -> StackerDBSyncResult with Default::default()
stackslib/src/net/stackerdb/mod.rs:296:9: replace PeerNetwork::run_stacker_db_sync -> Result<Vec<StackerDBSyncResult>, net_error> with Ok(vec![Default::default()])
stackslib/src/net/stackerdb/mod.rs:344:9: replace PeerNetwork::make_StackerDBChunksInv_or_Nack -> StacksMessageType with Default::default()
stackslib/src/chainstate/burn/mod.rs:121:9: replace SortitionHash::initial -> SortitionHash with Default::default()
stackslib/src/chainstate/burn/mod.rs:126:9: replace SortitionHash::mix_burn_header -> SortitionHash with Default::default()
stackslib/src/chainstate/burn/mod.rs:137:9: replace SortitionHash::mix_VRF_seed -> SortitionHash with Default::default()
stackslib/src/chainstate/burn/mod.rs:189:9: replace OpsHash::from_txids -> OpsHash with Default::default()
stackslib/src/chainstate/burn/mod.rs:240:9: replace <impl ConsensusHashExtensions for ConsensusHash>::empty -> ConsensusHash with Default::default()
stackslib/src/chainstate/burn/mod.rs:262:9: replace <impl ConsensusHashExtensions for ConsensusHash>::from_ops -> ConsensusHash with Default::default()
stackslib/src/chainstate/burn/mod.rs:308:9: replace <impl ConsensusHashExtensions for ConsensusHash>::get_prev_consensus_hashes -> Result<Vec<ConsensusHash>, db_error> with Ok(vec![Default::default()])
stackslib/src/chainstate/burn/mod.rs:346:9: replace <impl ConsensusHashExtensions for ConsensusHash>::from_parent_block_data -> Result<ConsensusHash, db_error> with Ok(Default::default())
stackslib/src/chainstate/burn/mod.rs:362:9: replace <impl ConsensusHashExtensions for ConsensusHash>::from_data -> ConsensusHash with Default::default()
stackslib/src/chainstate/coordinator/mod.rs:102:9: replace RewardCycleInfo::selected_anchor_block -> Option<(&BlockHeaderHash, &Txid)> with Some((&Default::default(), &Default::default()))
stackslib/src/chainstate/coordinator/mod.rs:118:9: replace RewardCycleInfo::known_selected_anchor_block -> Option<&RewardSet> with Some(&Default::default())
stackslib/src/chainstate/coordinator/mod.rs:126:9: replace RewardCycleInfo::known_selected_anchor_block_owned -> Option<RewardSet> with Some(Default::default())
stackslib/src/chainstate/coordinator/mod.rs:225:9: replace <impl From for Error>::from -> Error with Default::default()
stackslib/src/chainstate/coordinator/mod.rs:231:9: replace <impl From for Error>::from -> Error with Default::default()
stackslib/src/chainstate/coordinator/mod.rs:237:9: replace <impl From for Error>::from -> Error with Default::default()
stackslib/src/chainstate/coordinator/mod.rs:264:9: replace <impl RewardSetProvider for OnChainRewardSetProvider>::get_reward_set -> Result<RewardSet, Error> with Ok(Default::default())
stackslib/src/chainstate/coordinator/mod.rs:534:5: replace get_next_recipients -> Result<Option<RewardSetInfo>, Error> with Ok(Some(Default::default()))
stackslib/src/chainstate/coordinator/mod.rs:567:5: replace get_reward_cycle_info -> Result<Option<RewardCycleInfo>, Error> with Ok(Some(Default::default()))
stackslib/src/chainstate/coordinator/mod.rs:660:5: replace calculate_paid_rewards -> PaidRewards with Default::default()
stackslib/src/chainstate/coordinator/mod.rs:748:5: replace consolidate_affirmation_maps -> AffirmationMap with Default::default()
stackslib/src/chainstate/coordinator/mod.rs:773:5: replace static_get_heaviest_affirmation_map -> Result<AffirmationMap, Error> with Ok(Default::default())
stackslib/src/chainstate/coordinator/mod.rs:801:5: replace static_get_canonical_affirmation_map -> Result<AffirmationMap, Error> with Ok(Default::default())
stackslib/src/chainstate/coordinator/mod.rs:827:5: replace inner_static_get_stacks_tip_affirmation_map -> Result<AffirmationMap, Error> with Ok(Default::default())
stackslib/src/chainstate/coordinator/mod.rs:853:5: replace static_get_stacks_tip_affirmation_map -> Result<AffirmationMap, Error> with Ok(Default::default())
stackslib/src/chainstate/coordinator/mod.rs:878:9: replace ChainsCoordinator<'a, T, N, U, CE, FE, B>::handle_new_stacks_block -> Result<Option<BlockHeaderHash>, Error> with Ok(Some(Default::default()))
stackslib/src/chainstate/coordinator/mod.rs:891:9: replace ChainsCoordinator<'a, T, N, U, CE, FE, B>::get_snapshots_and_affirmation_maps_at_height -> Result<Vec<(BlockSnapshot, AffirmationMap)>, Error> with Ok(vec![(Default::default(), Default::default())])
stackslib/src/chainstate/coordinator/mod.rs:911:9: replace ChainsCoordinator<'a, T, N, U, CE, FE, B>::get_heaviest_affirmation_map -> Result<AffirmationMap, Error> with Ok(Default::default())
stackslib/src/chainstate/coordinator/mod.rs:924:9: replace ChainsCoordinator<'a, T, N, U, CE, FE, B>::get_canonical_affirmation_map -> Result<AffirmationMap, Error> with Ok(Default::default())
stackslib/src/chainstate/coordinator/mod.rs:943:9: replace ChainsCoordinator<'a, T, N, U, CE, FE, B>::find_highest_stacks_block_with_compatible_affirmation_map -> Result<(ConsensusHash, BlockHeaderHash, u64), Error> with Ok((Default::default(), Default::default(), 0))
stackslib/src/chainstate/coordinator/mod.rs:943:9: replace ChainsCoordinator<'a, T, N, U, CE, FE, B>::find_highest_stacks_block_with_compatible_affirmation_map -> Result<(ConsensusHash, BlockHeaderHash, u64), Error> with Ok((Default::default(), Default::default(), 1))
stackslib/src/chainstate/coordinator/mod.rs:1220:9: replace ChainsCoordinator<'a, T, N, U, CE, FE, B>::find_valid_sortitions -> Result<(u64, Vec<BlockSnapshot>), Error> with Ok((0, vec![Default::default()]))
stackslib/src/chainstate/coordinator/mod.rs:1220:9: replace ChainsCoordinator<'a, T, N, U, CE, FE, B>::find_valid_sortitions -> Result<(u64, Vec<BlockSnapshot>), Error> with Ok((1, vec![Default::default()]))
stackslib/src/chainstate/coordinator/mod.rs:1283:9: replace ChainsCoordinator<'a, T, N, U, CE, FE, B>::find_invalid_and_revalidated_sortitions -> Result<Option<(u64, u64, Vec<BlockSnapshot>)>, Error> with Ok(Some((0, 0, vec![Default::default()])))
stackslib/src/chainstate/coordinator/mod.rs:1283:9: replace ChainsCoordinator<'a, T, N, U, CE, FE, B>::find_invalid_and_revalidated_sortitions -> Result<Option<(u64, u64, Vec<BlockSnapshot>)>, Error> with Ok(Some((0, 1, vec![Default::default()])))
stackslib/src/chainstate/coordinator/mod.rs:1283:9: replace ChainsCoordinator<'a, T, N, U, CE, FE, B>::find_invalid_and_revalidated_sortitions -> Result<Option<(u64, u64, Vec<BlockSnapshot>)>, Error> with Ok(Some((1, 0, vec![Default::default()])))
stackslib/src/chainstate/coordinator/mod.rs:1283:9: replace ChainsCoordinator<'a, T, N, U, CE, FE, B>::find_invalid_and_revalidated_sortitions -> Result<Option<(u64, u64, Vec<BlockSnapshot>)>, Error> with Ok(Some((1, 1, vec![Default::default()])))
stackslib/src/chainstate/coordinator/mod.rs:1929:9: replace ChainsCoordinator<'a, T, N, U, CE, FE, B>::reinterpret_affirmed_pox_anchor_block_status -> Result<Option<BlockHeaderHash>, Error> with Ok(Some(Default::default()))
stackslib/src/chainstate/coordinator/mod.rs:2036:9: replace ChainsCoordinator<'a, T, N, U, CE, FE, B>::try_revalidate_sortition -> Result<Option<BlockSnapshot>, Error> with Ok(Some(Default::default()))
stackslib/src/chainstate/coordinator/mod.rs:2097:9: replace ChainsCoordinator<'a, T, N, U, CE, FE, B>::check_missing_anchor_block -> Result<Option<BlockHeaderHash>, Error> with Ok(Some(Default::default()))
stackslib/src/chainstate/coordinator/mod.rs:2139:9: replace ChainsCoordinator<'a, T, N, U, CE, FE, B>::handle_new_burnchain_block -> Result<Option<BlockHeaderHash>, Error> with Ok(Some(Default::default()))
stackslib/src/chainstate/coordinator/mod.rs:2151:9: replace ChainsCoordinator<'a, T, N, U, CE, FE, B>::inner_handle_new_burnchain_block -> Result<Option<BlockHeaderHash>, Error> with Ok(Some(Default::default()))
stackslib/src/chainstate/coordinator/mod.rs:2576:9: replace ChainsCoordinator<'a, T, N, U, CE, FE, B>::get_reward_cycle_info -> Result<Option<RewardCycleInfo>, Error> with Ok(Some(Default::default()))
stackslib/src/chainstate/coordinator/mod.rs:2779:9: replace ChainsCoordinator<'a, T, N, U, CE, FE, B>::check_pox_anchor_affirmation -> Result<Option<BlockHeaderHash>, Error> with Ok(Some(Default::default()))
stackslib/src/chainstate/coordinator/mod.rs:2843:9: replace ChainsCoordinator<'a, T, N, U, CE, FE, B>::consider_pox_anchor -> Result<Option<BlockHeaderHash>, Error> with Ok(Some(Default::default()))
stackslib/src/chainstate/coordinator/mod.rs:2900:9: replace ChainsCoordinator<'a, T, N, U, CE, FE, B>::process_ready_blocks -> Result<Option<BlockHeaderHash>, Error> with Ok(Some(Default::default()))
stackslib/src/chainstate/coordinator/mod.rs:3087:9: replace ChainsCoordinator<'a, T, N, U, CE, FE, B>::process_new_pox_anchor -> Result<Option<BlockHeaderHash>, Error> with Ok(Some(Default::default()))
stackslib/src/chainstate/stacks/mod.rs:127:9: replace <impl From for Error>::from -> Error with Default::default()
stackslib/src/chainstate/stacks/mod.rs:133:9: replace <impl From for Error>::from -> Error with Default::default()
stackslib/src/chainstate/stacks/mod.rs:139:9: replace <impl From for Error>::from -> Error with Default::default()
stackslib/src/chainstate/stacks/mod.rs:145:9: replace <impl From for Error>::from -> Error with Default::default()
stackslib/src/chainstate/stacks/mod.rs:214:9: replace <impl Error for Error>::cause -> Option<&dyn error::Error> with Some(&Default::default())
stackslib/src/chainstate/stacks/mod.rs:305:9: replace <impl From for Error>::from -> Error with Default::default()
stackslib/src/chainstate/stacks/mod.rs:311:9: replace <impl From for Error>::from -> Error with Default::default()
stackslib/src/chainstate/stacks/mod.rs:317:9: replace <impl From for Error>::from -> Error with Default::default()
stackslib/src/chainstate/stacks/mod.rs:327:9: replace Error::from_cost_error -> Error with Default::default()
stackslib/src/chainstate/stacks/mod.rs:343:9: replace Txid::from_stacks_tx -> Txid with Default::default()
stackslib/src/chainstate/stacks/mod.rs:351:9: replace Txid::from_sighash_bytes -> Txid with Default::default()
stackslib/src/chainstate/stacks/mod.rs:398:9: replace TransactionPublicKeyEncoding::from_u8 -> Option<TransactionPublicKeyEncoding> with Some(Default::default())
stackslib/src/chainstate/stacks/mod.rs:439:9: replace TransactionAuthField::as_signature -> Option<(TransactionPublicKeyEncoding, MessageSignature)> with Some((Default::default(), Default::default()))
stackslib/src/chainstate/stacks/mod.rs:483:9: replace SinglesigHashMode::to_address_hash_mode -> AddressHashMode with Default::default()
stackslib/src/chainstate/stacks/mod.rs:490:9: replace SinglesigHashMode::from_address_hash_mode -> Option<SinglesigHashMode> with Some(Default::default())
stackslib/src/chainstate/stacks/mod.rs:498:9: replace SinglesigHashMode::from_u8 -> Option<SinglesigHashMode> with Some(Default::default())
stackslib/src/chainstate/stacks/mod.rs:508:9: replace MultisigHashMode::to_address_hash_mode -> AddressHashMode with Default::default()
stackslib/src/chainstate/stacks/mod.rs:515:9: replace MultisigHashMode::from_address_hash_mode -> Option<MultisigHashMode> with Some(Default::default())
stackslib/src/chainstate/stacks/mod.rs:523:9: replace MultisigHashMode::from_u8 -> Option<MultisigHashMode> with Some(Default::default())
stackslib/src/chainstate/stacks/mod.rs:579:9: replace TransactionContractCall::contract_identifier -> QualifiedContractIdentifier with Default::default()
stackslib/src/chainstate/stacks/mod.rs:659:9: replace AssetInfoID::from_u8 -> Option<AssetInfoID> with Some(Default::default())
stackslib/src/chainstate/stacks/mod.rs:680:9: replace FungibleConditionCode::from_u8 -> Option<FungibleConditionCode> with Some(Default::default())
stackslib/src/chainstate/stacks/mod.rs:710:9: replace NonfungibleConditionCode::from_u8 -> Option<NonfungibleConditionCode> with Some(Default::default())
stackslib/src/chainstate/stacks/mod.rs:749:9: replace PostConditionPrincipal::to_principal_data -> PrincipalData with Default::default()
stackslib/src/burnchains/affirmation.rs:276:9: replace AffirmationMapEntry::from_chr -> Option<AffirmationMapEntry> with Some(Default::default())
stackslib/src/burnchains/affirmation.rs:325:9: replace <impl Serialize for AffirmationMap>::serialize -> Result<S::Ok, S::Error> with Ok(Default::default())
stackslib/src/burnchains/affirmation.rs:332:9: replace <impl Deserialize for AffirmationMap>::deserialize -> Result<AffirmationMap, D::Error> with Ok(Default::default())
stackslib/src/burnchains/affirmation.rs:360:9: replace AffirmationMap::empty -> AffirmationMap with Default::default()
stackslib/src/burnchains/affirmation.rs:366:9: replace AffirmationMap::at -> Option<&AffirmationMapEntry> with Some(&Default::default())
stackslib/src/burnchains/affirmation.rs:374:9: replace AffirmationMap::pop -> Option<AffirmationMapEntry> with Some(Default::default())
stackslib/src/burnchains/affirmation.rs:382:9: replace AffirmationMap::as_slice -> &[AffirmationMapEntry] with Vec::leak(vec![Default::default()])
stackslib/src/burnchains/affirmation.rs:394:9: replace AffirmationMap::decode -> Option<AffirmationMap> with Some(Default::default())
stackslib/src/burnchains/affirmation.rs:547:5: replace read_prepare_phase_commits -> Result<Vec<Vec<LeaderBlockCommitOp>>, Error> with Ok(vec![vec![Default::default()]])
stackslib/src/burnchains/affirmation.rs:622:5: replace read_parent_block_commits -> Result<Vec<LeaderBlockCommitOp>, Error> with Ok(vec![Default::default()])
stackslib/src/burnchains/affirmation.rs:693:5: replace filter_orphan_block_commits -> Vec<Vec<LeaderBlockCommitOp>> with vec![vec![Default::default()]]
stackslib/src/burnchains/affirmation.rs:736:5: replace filter_missed_block_commits -> Vec<Vec<LeaderBlockCommitOp>> with vec![vec![Default::default()]]
stackslib/src/burnchains/affirmation.rs:776:5: replace inner_find_heaviest_block_commit_ptr -> Option<(PoxAnchorPtr, BTreeMap<(u64, u32), (u64, u32)>)> with Some((Default::default(), BTreeMap::new()))
stackslib/src/burnchains/affirmation.rs:776:5: replace inner_find_heaviest_block_commit_ptr -> Option<(PoxAnchorPtr, BTreeMap<(u64, u32), (u64, u32)>)> with Some((Default::default(), BTreeMap::from_iter([((0, 0), (0, 0))])))
stackslib/src/burnchains/affirmation.rs:776:5: replace inner_find_heaviest_block_commit_ptr -> Option<(PoxAnchorPtr, BTreeMap<(u64, u32), (u64, u32)>)> with Some((Default::default(), BTreeMap::from_iter([((0, 0), (0, 1))])))
stackslib/src/burnchains/affirmation.rs:776:5: replace inner_find_heaviest_block_commit_ptr -> Option<(PoxAnchorPtr, BTreeMap<(u64, u32), (u64, u32)>)> with Some((Default::default(), BTreeMap::from_iter([((0, 0), (1, 0))])))
stackslib/src/burnchains/affirmation.rs:776:5: replace inner_find_heaviest_block_commit_ptr -> Option<(PoxAnchorPtr, BTreeMap<(u64, u32), (u64, u32)>)> with Some((Default::default(), BTreeMap::from_iter([((0, 0), (1, 1))])))
stackslib/src/burnchains/affirmation.rs:776:5: replace inner_find_heaviest_block_commit_ptr -> Option<(PoxAnchorPtr, BTreeMap<(u64, u32), (u64, u32)>)> with Some((Default::default(), BTreeMap::from_iter([((0, 1), (0, 0))])))
stackslib/src/burnchains/affirmation.rs:776:5: replace inner_find_heaviest_block_commit_ptr -> Option<(PoxAnchorPtr, BTreeMap<(u64, u32), (u64, u32)>)> with Some((Default::default(), BTreeMap::from_iter([((0, 1), (0, 1))])))
stackslib/src/burnchains/affirmation.rs:776:5: replace inner_find_heaviest_block_commit_ptr -> Option<(PoxAnchorPtr, BTreeMap<(u64, u32), (u64, u32)>)> with Some((Default::default(), BTreeMap::from_iter([((0, 1), (1, 0))])))
stackslib/src/burnchains/affirmation.rs:776:5: replace inner_find_heaviest_block_commit_ptr -> Option<(PoxAnchorPtr, BTreeMap<(u64, u32), (u64, u32)>)> with Some((Default::default(), BTreeMap::from_iter([((0, 1), (1, 1))])))
stackslib/src/burnchains/affirmation.rs:776:5: replace inner_find_heaviest_block_commit_ptr -> Option<(PoxAnchorPtr, BTreeMap<(u64, u32), (u64, u32)>)> with Some((Default::default(), BTreeMap::from_iter([((1, 0), (0, 0))])))
stackslib/src/burnchains/affirmation.rs:776:5: replace inner_find_heaviest_block_commit_ptr -> Option<(PoxAnchorPtr, BTreeMap<(u64, u32), (u64, u32)>)> with Some((Default::default(), BTreeMap::from_iter([((1, 0), (0, 1))])))
stackslib/src/burnchains/affirmation.rs:776:5: replace inner_find_heaviest_block_commit_ptr -> Option<(PoxAnchorPtr, BTreeMap<(u64, u32), (u64, u32)>)> with Some((Default::default(), BTreeMap::from_iter([((1, 0), (1, 0))])))
stackslib/src/burnchains/affirmation.rs:776:5: replace inner_find_heaviest_block_commit_ptr -> Option<(PoxAnchorPtr, BTreeMap<(u64, u32), (u64, u32)>)> with Some((Default::default(), BTreeMap::from_iter([((1, 0), (1, 1))])))
stackslib/src/burnchains/affirmation.rs:776:5: replace inner_find_heaviest_block_commit_ptr -> Option<(PoxAnchorPtr, BTreeMap<(u64, u32), (u64, u32)>)> with Some((Default::default(), BTreeMap::from_iter([((1, 1), (0, 0))])))
stackslib/src/burnchains/affirmation.rs:776:5: replace inner_find_heaviest_block_commit_ptr -> Option<(PoxAnchorPtr, BTreeMap<(u64, u32), (u64, u32)>)> with Some((Default::default(), BTreeMap::from_iter([((1, 1), (1, 0))])))
stackslib/src/burnchains/affirmation.rs:776:5: replace inner_find_heaviest_block_commit_ptr -> Option<(PoxAnchorPtr, BTreeMap<(u64, u32), (u64, u32)>)> with Some((Default::default(), BTreeMap::from_iter([((1, 1), (0, 1))])))
stackslib/src/burnchains/affirmation.rs:776:5: replace inner_find_heaviest_block_commit_ptr -> Option<(PoxAnchorPtr, BTreeMap<(u64, u32), (u64, u32)>)> with Some((Default::default(), BTreeMap::from_iter([((1, 1), (1, 1))])))
stackslib/src/burnchains/affirmation.rs:928:5: replace find_heaviest_block_commit -> Result<Option<(LeaderBlockCommitOp, Vec<Vec<bool>>, u64, u64)>, DBError> with Ok(Some((Default::default(), vec![], 0, 0)))
stackslib/src/burnchains/affirmation.rs:928:5: replace find_heaviest_block_commit -> Result<Option<(LeaderBlockCommitOp, Vec<Vec<bool>>, u64, u64)>, DBError> with Ok(Some((Default::default(), vec![], 0, 1)))
stackslib/src/burnchains/affirmation.rs:928:5: replace find_heaviest_block_commit -> Result<Option<(LeaderBlockCommitOp, Vec<Vec<bool>>, u64, u64)>, DBError> with Ok(Some((Default::default(), vec![], 1, 0)))
stackslib/src/burnchains/affirmation.rs:928:5: replace find_heaviest_block_commit -> Result<Option<(LeaderBlockCommitOp, Vec<Vec<bool>>, u64, u64)>, DBError> with Ok(Some((Default::default(), vec![], 1, 1)))
stackslib/src/burnchains/affirmation.rs:928:5: replace find_heaviest_block_commit -> Result<Option<(LeaderBlockCommitOp, Vec<Vec<bool>>, u64, u64)>, DBError> with Ok(Some((Default::default(), vec![vec![]], 0, 0)))
stackslib/src/burnchains/affirmation.rs:928:5: replace find_heaviest_block_commit -> Result<Option<(LeaderBlockCommitOp, Vec<Vec<bool>>, u64, u64)>, DBError> with Ok(Some((Default::default(), vec![vec![]], 0, 1)))
stackslib/src/burnchains/affirmation.rs:928:5: replace find_heaviest_block_commit -> Result<Option<(LeaderBlockCommitOp, Vec<Vec<bool>>, u64, u64)>, DBError> with Ok(Some((Default::default(), vec![vec![]], 1, 0)))
stackslib/src/burnchains/affirmation.rs:928:5: replace find_heaviest_block_commit -> Result<Option<(LeaderBlockCommitOp, Vec<Vec<bool>>, u64, u64)>, DBError> with Ok(Some((Default::default(), vec![vec![]], 1, 1)))
stackslib/src/burnchains/affirmation.rs:928:5: replace find_heaviest_block_commit -> Result<Option<(LeaderBlockCommitOp, Vec<Vec<bool>>, u64, u64)>, DBError> with Ok(Some((Default::default(), vec![vec![true]], 0, 0)))
stackslib/src/burnchains/affirmation.rs:928:5: replace find_heaviest_block_commit -> Result<Option<(LeaderBlockCommitOp, Vec<Vec<bool>>, u64, u64)>, DBError> with Ok(Some((Default::default(), vec![vec![true]], 0, 1)))
stackslib/src/burnchains/affirmation.rs:928:5: replace find_heaviest_block_commit -> Result<Option<(LeaderBlockCommitOp, Vec<Vec<bool>>, u64, u64)>, DBError> with Ok(Some((Default::default(), vec![vec![true]], 1, 0)))
stackslib/src/burnchains/affirmation.rs:928:5: replace find_heaviest_block_commit -> Result<Option<(LeaderBlockCommitOp, Vec<Vec<bool>>, u64, u64)>, DBError> with Ok(Some((Default::default(), vec![vec![true]], 1, 1)))
stackslib/src/burnchains/affirmation.rs:928:5: replace find_heaviest_block_commit -> Result<Option<(LeaderBlockCommitOp, Vec<Vec<bool>>, u64, u64)>, DBError> with Ok(Some((Default::default(), vec![vec![false]], 0, 0)))
stackslib/src/burnchains/affirmation.rs:928:5: replace find_heaviest_block_commit -> Result<Option<(LeaderBlockCommitOp, Vec<Vec<bool>>, u64, u64)>, DBError> with Ok(Some((Default::default(), vec![vec![false]], 0, 1)))
stackslib/src/burnchains/affirmation.rs:928:5: replace find_heaviest_block_commit -> Result<Option<(LeaderBlockCommitOp, Vec<Vec<bool>>, u64, u64)>, DBError> with Ok(Some((Default::default(), vec![vec![false]], 1, 0)))
stackslib/src/burnchains/affirmation.rs:928:5: replace find_heaviest_block_commit -> Result<Option<(LeaderBlockCommitOp, Vec<Vec<bool>>, u64, u64)>, DBError> with Ok(Some((Default::default(), vec![vec![false]], 1, 1)))
stackslib/src/burnchains/affirmation.rs:1027:5: replace inner_find_valid_prepare_phase_commits -> Result<Vec<Vec<LeaderBlockCommitOp>>, Error> with Ok(vec![vec![Default::default()]])
stackslib/src/burnchains/affirmation.rs:1070:5: replace find_pox_anchor_block_ptr -> Result<Option<PoxAnchorPtr>, Error> with Ok(Some(Default::default()))
stackslib/src/burnchains/affirmation.rs:1105:5: replace find_pox_anchor_block -> Result<(Vec<Vec<LeaderBlockCommitOp>>, Option<(LeaderBlockCommitOp, Vec<Vec<bool>>)>,), Error, > with Ok((vec![], Some((Default::default(), vec![]))))
stackslib/src/burnchains/affirmation.rs:1105:5: replace find_pox_anchor_block -> Result<(Vec<Vec<LeaderBlockCommitOp>>, Option<(LeaderBlockCommitOp, Vec<Vec<bool>>)>,), Error, > with Ok((vec![], Some((Default::default(), vec![vec![true]]))))
stackslib/src/burnchains/affirmation.rs:1105:5: replace find_pox_anchor_block -> Result<(Vec<Vec<LeaderBlockCommitOp>>, Option<(LeaderBlockCommitOp, Vec<Vec<bool>>)>,), Error, > with Ok((vec![], Some((Default::default(), vec![vec![]]))))
stackslib/src/burnchains/affirmation.rs:1105:5: replace find_pox_anchor_block -> Result<(Vec<Vec<LeaderBlockCommitOp>>, Option<(LeaderBlockCommitOp, Vec<Vec<bool>>)>,), Error, > with Ok((vec![], Some((Default::default(), vec![vec![false]]))))
stackslib/src/burnchains/affirmation.rs:1105:5: replace find_pox_anchor_block -> Result<(Vec<Vec<LeaderBlockCommitOp>>, Option<(LeaderBlockCommitOp, Vec<Vec<bool>>)>,), Error, > with Ok((vec![vec![]], Some((Default::default(), vec![]))))
stackslib/src/burnchains/affirmation.rs:1105:5: replace find_pox_anchor_block -> Result<(Vec<Vec<LeaderBlockCommitOp>>, Option<(LeaderBlockCommitOp, Vec<Vec<bool>>)>,), Error, > with Ok((vec![vec![]], Some((Default::default(), vec![vec![]]))))
stackslib/src/burnchains/affirmation.rs:1105:5: replace find_pox_anchor_block -> Result<(Vec<Vec<LeaderBlockCommitOp>>, Option<(LeaderBlockCommitOp, Vec<Vec<bool>>)>,), Error, > with Ok((vec![vec![]], Some((Default::default(), vec![vec![true]]))))
stackslib/src/burnchains/affirmation.rs:1105:5: replace find_pox_anchor_block -> Result<(Vec<Vec<LeaderBlockCommitOp>>, Option<(LeaderBlockCommitOp, Vec<Vec<bool>>)>,), Error, > with Ok((vec![vec![]], Some((Default::default(), vec![vec![false]]))))
stackslib/src/burnchains/affirmation.rs:1105:5: replace find_pox_anchor_block -> Result<(Vec<Vec<LeaderBlockCommitOp>>, Option<(LeaderBlockCommitOp, Vec<Vec<bool>>)>,), Error, > with Ok((vec![vec![Default::default()]], None))
stackslib/src/burnchains/affirmation.rs:1105:5: replace find_pox_anchor_block -> Result<(Vec<Vec<LeaderBlockCommitOp>>, Option<(LeaderBlockCommitOp, Vec<Vec<bool>>)>,), Error, > with Ok((vec![vec![Default::default()]], Some((Default::default(), vec![]))))
stackslib/src/burnchains/affirmation.rs:1105:5: replace find_pox_anchor_block -> Result<(Vec<Vec<LeaderBlockCommitOp>>, Option<(LeaderBlockCommitOp, Vec<Vec<bool>>)>,), Error, > with Ok((vec![vec![Default::default()]], Some((Default::default(), vec![vec![]]))))
stackslib/src/burnchains/affirmation.rs:1105:5: replace find_pox_anchor_block -> Result<(Vec<Vec<LeaderBlockCommitOp>>, Option<(LeaderBlockCommitOp, Vec<Vec<bool>>)>,), Error, > with Ok((vec![vec![Default::default()]], Some((Default::default(), vec![vec![true]]))))
stackslib/src/burnchains/affirmation.rs:1105:5: replace find_pox_anchor_block -> Result<(Vec<Vec<LeaderBlockCommitOp>>, Option<(LeaderBlockCommitOp, Vec<Vec<bool>>)>,), Error, > with Ok((vec![vec![Default::default()]], Some((Default::default(), vec![vec![false]]))))
stackslib/src/burnchains/bitcoin/mod.rs:148:9: replace <impl From for Error>::from -> Error with Default::default()
stackslib/src/burnchains/bitcoin/mod.rs:121:9: replace <impl Error for Error>::cause -> Option<&dyn error::Error> with Some(&Default::default())
stackslib/src/burnchains/bitcoin/mod.rs:199:9: replace <impl From for BitcoinTxInput>::from -> BitcoinTxInput with Default::default()
stackslib/src/burnchains/bitcoin/mod.rs:205:9: replace <impl From for BitcoinTxInput>::from -> BitcoinTxInput with Default::default()
stackslib/src/burnchains/burnchain.rs:75:9: replace BurnchainStateTransitionOps::noop -> BurnchainStateTransitionOps with Default::default()
stackslib/src/burnchains/burnchain.rs:81:9: replace BurnchainStateTransitionOps::from -> BurnchainStateTransitionOps with Default::default()
stackslib/src/burnchains/burnchain.rs:90:9: replace BurnchainStateTransition::noop -> BurnchainStateTransition with Default::default()
stackslib/src/burnchains/burnchain.rs:105:9: replace BurnchainStateTransition::from_block_ops -> Result<BurnchainStateTransition, burnchain_error> with Ok(Default::default())
stackslib/src/burnchains/burnchain.rs:316:9: replace BurnchainSigner::new_p2pkh -> BurnchainSigner with Default::default()
stackslib/src/burnchains/burnchain.rs:309:9: replace BurnchainSigner::mock_parts -> BurnchainSigner with Default::default()
stackslib/src/burnchains/burnchain.rs:322:9: replace BurnchainRecipient::try_from_bitcoin_output -> Option<BurnchainRecipient> with Some(Default::default())
stackslib/src/burnchains/burnchain.rs:341:9: replace BurnchainBlock::block_hash -> BurnchainHeaderHash with Default::default()
stackslib/src/burnchains/burnchain.rs:347:9: replace BurnchainBlock::parent_block_hash -> BurnchainHeaderHash with Default::default()
stackslib/src/burnchains/burnchain.rs:353:9: replace BurnchainBlock::txs -> Vec<BurnchainTransaction> with vec![Default::default()]
stackslib/src/burnchains/burnchain.rs:369:9: replace BurnchainBlock::header -> BurnchainBlockHeader with Default::default()
stackslib/src/burnchains/burnchain.rs:550:9: replace Burnchain::regtest -> Burnchain with Default::default()
stackslib/src/burnchains/burnchain.rs:651:9: replace Burnchain::connect_db -> Result<(SortitionDB, BurnchainDB), burnchain_error> with Ok((Default::default(), Default::default()))
stackslib/src/burnchains/burnchain.rs:672:9: replace Burnchain::open_burnchain_db -> Result<BurnchainDB, burnchain_error> with Ok(Default::default())
stackslib/src/burnchains/burnchain.rs:691:9: replace Burnchain::open_sortition_db -> Result<SortitionDB, burnchain_error> with Ok(Default::default())
stackslib/src/burnchains/burnchain.rs:706:9: replace Burnchain::open_db -> Result<(SortitionDB, BurnchainDB), burnchain_error> with Ok((Default::default(), Default::default()))
stackslib/src/burnchains/burnchain.rs:723:9: replace Burnchain::classify_transaction -> Option<BlockstackOperationType> with Some(Default::default())
stackslib/src/burnchains/burnchain.rs:901:9: replace Burnchain::filter_block_VRF_dups -> Vec<BlockstackOperationType> with vec![Default::default()]
stackslib/src/burnchains/burnchain.rs:938:9: replace Burnchain::process_block -> Result<BurnchainBlockHeader, burnchain_error> with Ok(Default::default())
stackslib/src/burnchains/burnchain.rs:997:9: replace Burnchain::process_block_and_sortition_deprecated -> Result<(BlockSnapshot, BurnchainStateTransition), burnchain_error> with Ok((Default::default(), Default::default()))
stackslib/src/burnchains/burnchain.rs:1099:9: replace Burnchain::sync_with_indexer_deprecated -> Result<(BlockSnapshot, Option<BurnchainStateTransition>), burnchain_error> with Ok((Default::default(), None))
stackslib/src/burnchains/burnchain.rs:1099:9: replace Burnchain::sync_with_indexer_deprecated -> Result<(BlockSnapshot, Option<BurnchainStateTransition>), burnchain_error> with Ok((Default::default(), Some(Default::default())))
stackslib/src/burnchains/burnchain.rs:1323:9: replace Burnchain::get_highest_burnchain_block -> Result<Option<BurnchainBlockHeader>, burnchain_error> with Ok(Some(Default::default()))
stackslib/src/burnchains/burnchain.rs:1364:9: replace Burnchain::sync_with_indexer -> Result<BurnchainBlockHeader, burnchain_error> with Ok(Default::default())
stackslib/src/burnchains/db.rs:66:9: replace BurnchainHeaderReader::read_burnchain_header -> Result<Option<BurnchainBlockHeader>, DBError> with Ok(Some(Default::default()))
stackslib/src/burnchains/db.rs:87:9: replace <impl FromColumn for AffirmationMap>::from_column -> Result<AffirmationMap, DBError> with Ok(Default::default())
stackslib/src/burnchains/db.rs:95:9: replace <impl FromRow for AffirmationMap>::from_row -> Result<AffirmationMap, DBError> with Ok(Default::default())
stackslib/src/burnchains/db.rs:101:9: replace <impl FromRow for BlockCommitMetadata>::from_row -> Result<BlockCommitMetadata, DBError> with Ok(Default::default())
stackslib/src/burnchains/db.rs:183:9: replace <impl FromRow for BurnchainBlockHeader>::from_row -> Result<BurnchainBlockHeader, DBError> with Ok(Default::default())
stackslib/src/burnchains/db.rs:201:9: replace <impl FromRow for BlockstackOperationType>::from_row -> Result<BlockstackOperationType, DBError> with Ok(Default::default())
stackslib/src/burnchains/db.rs:921:9: replace BurnchainDBTransaction<'a>::conn -> &DBConn with &Default::default()
stackslib/src/burnchains/db.rs:925:9: replace BurnchainDBTransaction<'a>::get_canonical_chain_tip -> Result<BurnchainBlockHeader, BurnchainError> with Ok(Default::default())
stackslib/src/burnchains/db.rs:977:9: replace BurnchainDB::connect -> Result<BurnchainDB, BurnchainError> with Ok(Default::default())
stackslib/src/burnchains/db.rs:1059:9: replace BurnchainDB::open -> Result<BurnchainDB, BurnchainError> with Ok(Default::default())
stackslib/src/burnchains/db.rs:1074:9: replace BurnchainDB::conn -> &DBConn with &Default::default()
stackslib/src/burnchains/db.rs:1078:9: replace BurnchainDB::tx_begin -> Result<BurnchainDBTransaction<'a>, BurnchainError> with Ok(Default::default())
stackslib/src/burnchains/db.rs:1085:9: replace BurnchainDB::inner_get_canonical_chain_tip -> Result<BurnchainBlockHeader, BurnchainError> with Ok(Default::default())
stackslib/src/burnchains/db.rs:1091:9: replace BurnchainDB::get_canonical_chain_tip -> Result<BurnchainBlockHeader, BurnchainError> with Ok(Default::default())
stackslib/src/burnchains/db.rs:1115:9: replace BurnchainDB::get_burnchain_header -> Result<Option<BurnchainBlockHeader>, BurnchainError> with Ok(Some(Default::default()))
stackslib/src/burnchains/db.rs:1125:9: replace BurnchainDB::get_burnchain_block -> Result<BurnchainBlockData, BurnchainError> with Ok(Default::default())
stackslib/src/burnchains/db.rs:1144:9: replace BurnchainDB::inner_get_burnchain_op -> Option<BlockstackOperationType> with Some(Default::default())
stackslib/src/burnchains/db.rs:1163:9: replace BurnchainDB::find_burnchain_op -> Option<BlockstackOperationType> with Some(Default::default())
stackslib/src/burnchains/db.rs:1190:9: replace BurnchainDB::get_blockstack_transactions -> Vec<BlockstackOperationType> with vec![Default::default()]
stackslib/src/burnchains/db.rs:1234:9: replace BurnchainDB::get_affirmation_map -> Result<Option<AffirmationMap>, DBError> with Ok(Some(Default::default()))
stackslib/src/burnchains/db.rs:1298:9: replace BurnchainDB::get_anchor_block_commit_metadatas -> Result<Vec<BlockCommitMetadata>, DBError> with Ok(vec![Default::default()])
stackslib/src/burnchains/db.rs:1310:9: replace BurnchainDB::get_canonical_anchor_block_commit_metadata -> Result<Option<BlockCommitMetadata>, DBError> with Ok(Some(Default::default()))
stackslib/src/burnchains/db.rs:1329:9: replace BurnchainDB::get_canonical_anchor_block_commit -> Result<Option<(LeaderBlockCommitOp, BlockCommitMetadata)>, DBError> with Ok(Some((Default::default(), Default::default())))
stackslib/src/burnchains/db.rs:1350:9: replace BurnchainDB::get_anchor_block_commit -> Result<Option<(LeaderBlockCommitOp, BlockCommitMetadata)>, DBError> with Ok(Some((Default::default(), Default::default())))
stackslib/src/burnchains/db.rs:1398:9: replace BurnchainDB::store_new_burnchain_block -> Result<Vec<BlockstackOperationType>, BurnchainError> with Ok(vec![Default::default()])
stackslib/src/burnchains/db.rs:1442:9: replace BurnchainDB::get_block_commit -> Result<Option<LeaderBlockCommitOp>, DBError> with Ok(Some(Default::default()))
stackslib/src/burnchains/db.rs:1457:9: replace BurnchainDB::get_commit_in_block_at -> Result<Option<LeaderBlockCommitOp>, DBError> with Ok(Some(Default::default()))
stackslib/src/burnchains/db.rs:1488:9: replace BurnchainDB::get_commit_at -> Result<Option<LeaderBlockCommitOp>, DBError> with Ok(Some(Default::default()))
stackslib/src/burnchains/db.rs:1504:9: replace BurnchainDB::get_commit_metadata -> Result<Option<BlockCommitMetadata>, DBError> with Ok(Some(Default::default()))
stackslib/src/burnchains/db.rs:1524:9: replace BurnchainDB::get_heaviest_anchor_block -> Result<Option<(LeaderBlockCommitOp, BlockCommitMetadata)>, DBError> with Ok(Some((Default::default(), Default::default())))
stackslib/src/burnchains/db.rs:1557:9: replace BurnchainDB::get_heaviest_anchor_block_affirmation_map -> Result<AffirmationMap, DBError> with Ok(Default::default())
stackslib/src/burnchains/db.rs:1614:9: replace BurnchainDB::get_override_affirmation_map -> Result<Option<AffirmationMap>, DBError> with Ok(Some(Default::default()))
stackslib/src/burnchains/db.rs:1639:9: replace BurnchainDB::get_canonical_affirmation_map -> Result<AffirmationMap, DBError> with Ok(Default::default())
stackslib/src/clarity_vm/clarity.rs:150:9: replace <impl From for Error>::from -> Self with Default::default()
stackslib/src/clarity_vm/clarity.rs:203:9: replace ClarityBlockConnection<'a, 'b>::set_cost_tracker -> LimitedCostTracker with Default::default()
stackslib/src/clarity_vm/clarity.rs:213:9: replace ClarityBlockConnection<'a, 'b>::cost_so_far -> ExecutionCost with Default::default()
stackslib/src/clarity_vm/clarity.rs:221:9: replace ClarityBlockConnection<'a, 'b>::block_limit -> Option<ExecutionCost> with Some(Default::default())
stackslib/src/clarity_vm/clarity.rs:241:9: replace ClarityInstance::with_marf -> R with Default::default()
stackslib/src/clarity_vm/clarity.rs:256:9: replace ClarityInstance::get_epoch_of -> StacksEpoch with Default::default()
stackslib/src/clarity_vm/clarity.rs:281:9: replace ClarityInstance::begin_block -> ClarityBlockConnection<'a, 'b> with Default::default()
stackslib/src/clarity_vm/clarity.rs:316:9: replace ClarityInstance::begin_genesis_block -> ClarityBlockConnection<'a, 'b> with Default::default()
stackslib/src/clarity_vm/clarity.rs:342:9: replace ClarityInstance::begin_test_genesis_block -> ClarityBlockConnection<'a, 'b> with Default::default()
stackslib/src/clarity_vm/clarity.rs:438:9: replace ClarityInstance::begin_test_genesis_block_2_1 -> ClarityBlockConnection<'a, 'b> with Default::default()
stackslib/src/clarity_vm/clarity.rs:533:9: replace ClarityInstance::begin_unconfirmed -> ClarityBlockConnection<'a, 'b> with Default::default()
stackslib/src/clarity_vm/clarity.rs:570:9: replace ClarityInstance::read_only_connection -> ClarityReadOnlyConnection<'a> with Default::default()
stackslib/src/clarity_vm/clarity.rs:582:9: replace ClarityInstance::read_only_connection_checked -> Result<ClarityReadOnlyConnection<'a>, Error> with Ok(Default::default())
stackslib/src/clarity_vm/clarity.rs:615:9: replace ClarityInstance::eval_read_only -> Result<Value, Error> with Ok(Default::default())
stackslib/src/clarity_vm/clarity.rs:631:9: replace ClarityInstance::destroy -> MarfedKV with Default::default()
stackslib/src/clarity_vm/clarity.rs:641:9: replace <impl ClarityConnection for ClarityBlockConnection<'a, 'b>>::with_clarity_db_readonly_owned -> R with Default::default()
stackslib/src/clarity_vm/clarity.rs:653:9: replace <impl ClarityConnection for ClarityBlockConnection<'a, 'b>>::with_analysis_db_readonly -> R with Default::default()
stackslib/src/clarity_vm/clarity.rs:661:9: replace <impl ClarityConnection for ClarityBlockConnection<'a, 'b>>::get_epoch -> StacksEpochId with Default::default()
stackslib/src/clarity_vm/clarity.rs:671:9: replace <impl ClarityConnection for ClarityReadOnlyConnection<'_>>::with_clarity_db_readonly_owned -> R with Default::default()
stackslib/src/clarity_vm/clarity.rs:684:9: replace <impl ClarityConnection for ClarityReadOnlyConnection<'_>>::with_analysis_db_readonly -> R with Default::default()
stackslib/src/clarity_vm/clarity.rs:692:9: replace <impl ClarityConnection for ClarityReadOnlyConnection<'_>>::get_epoch -> StacksEpochId with Default::default()
stackslib/src/clarity_vm/clarity.rs:736:9: replace ClarityBlockConnection<'a, 'b>::precommit_to_block -> PreCommitClarityBlock<'a> with Default::default()
stackslib/src/clarity_vm/clarity.rs:751:9: replace ClarityBlockConnection<'a, 'b>::commit_to_block -> LimitedCostTracker with Default::default()
stackslib/src/clarity_vm/clarity.rs:764:9: replace ClarityBlockConnection<'a, 'b>::commit_mined_block -> LimitedCostTracker with Default::default()
stackslib/src/clarity_vm/clarity.rs:776:9: replace ClarityBlockConnection<'a, 'b>::commit_unconfirmed -> LimitedCostTracker with Default::default()
stackslib/src/clarity_vm/clarity.rs:785:9: replace ClarityBlockConnection<'a, 'b>::initialize_epoch_2_05 -> Result<StacksTransactionReceipt, Error> with Ok(Default::default())
stackslib/src/clarity_vm/clarity.rs:872:9: replace ClarityBlockConnection<'a, 'b>::initialize_epoch_2_1 -> Result<Vec<StacksTransactionReceipt>, Error> with Ok(vec![Default::default()])
stackslib/src/clarity_vm/clarity.rs:1067:9: replace ClarityBlockConnection<'a, 'b>::initialize_epoch_2_2 -> Result<Vec<StacksTransactionReceipt>, Error> with Ok(vec![Default::default()])
stackslib/src/clarity_vm/clarity.rs:1094:9: replace ClarityBlockConnection<'a, 'b>::initialize_epoch_2_3 -> Result<Vec<StacksTransactionReceipt>, Error> with Ok(vec![Default::default()])
stackslib/src/clarity_vm/clarity.rs:1123:9: replace ClarityBlockConnection<'a, 'b>::initialize_epoch_2_4 -> Result<Vec<StacksTransactionReceipt>, Error> with Ok(vec![Default::default()])
stackslib/src/clarity_vm/clarity.rs:1259:9: replace ClarityBlockConnection<'a, 'b>::start_transaction_processing -> ClarityTransactionConnection<'c, 'a> with Default::default()
stackslib/src/clarity_vm/clarity.rs:1290:9: replace ClarityBlockConnection<'a, 'b>::as_free_transaction -> R with Default::default()
stackslib/src/clarity_vm/clarity.rs:1309:9: replace ClarityBlockConnection<'a, 'b>::as_transaction -> R with Default::default()
stackslib/src/clarity_vm/clarity.rs:1320:9: replace ClarityBlockConnection<'a, 'b>::destruct -> WritableMarfStore<'a> with Default::default()
stackslib/src/clarity_vm/clarity.rs:1335:9: replace <impl ClarityConnection for ClarityTransactionConnection<'a, 'b>>::with_clarity_db_readonly_owned -> R with Default::default()
stackslib/src/clarity_vm/clarity.rs:1353:9: replace <impl ClarityConnection for ClarityTransactionConnection<'a, 'b>>::with_analysis_db_readonly -> R with Default::default()
stackslib/src/clarity_vm/clarity.rs:1362:9: replace <impl ClarityConnection for ClarityTransactionConnection<'a, 'b>>::get_epoch -> StacksEpochId with Default::default()
stackslib/src/clarity_vm/clarity.rs:1396:9: replace <impl TransactionConnection for ClarityTransactionConnection<'a, 'b>>::with_abort_callback -> Result<(R, AssetMap, Vec<StacksTransactionEvent>, bool), E> with Ok((Default::default(), Default::default(), vec![], true))
stackslib/src/clarity_vm/clarity.rs:1396:9: replace <impl TransactionConnection for ClarityTransactionConnection<'a, 'b>>::with_abort_callback -> Result<(R, AssetMap, Vec<StacksTransactionEvent>, bool), E> with Ok((Default::default(), Default::default(), vec![], false))
stackslib/src/clarity_vm/clarity.rs:1396:9: replace <impl TransactionConnection for ClarityTransactionConnection<'a, 'b>>::with_abort_callback -> Result<(R, AssetMap, Vec<StacksTransactionEvent>, bool), E> with Ok((Default::default(), Default::default(), vec![Default::default()], true))
stackslib/src/clarity_vm/clarity.rs:1396:9: replace <impl TransactionConnection for ClarityTransactionConnection<'a, 'b>>::with_abort_callback -> Result<(R, AssetMap, Vec<StacksTransactionEvent>, bool), E> with Ok((Default::default(), Default::default(), vec![Default::default()], false))
stackslib/src/clarity_vm/clarity.rs:1446:9: replace <impl TransactionConnection for ClarityTransactionConnection<'a, 'b>>::with_analysis_db -> R with Default::default()
stackslib/src/clarity_vm/clarity.rs:1463:9: replace ClarityTransactionConnection<'a, 'b>::with_clarity_db -> Result<R, Error> with Ok(Default::default())
stackslib/src/clarity_vm/clarity.rs:1485:9: replace ClarityTransactionConnection<'a, 'b>::cost_so_far -> ExecutionCost with Default::default()
stackslib/src/clarity_vm/clarity.rs:1498:9: replace ClarityTransactionConnection<'a, 'b>::run_poison_microblock -> Result<Value, Error> with Ok(Default::default())
stackslib/src/clarity_vm/database/mod.rs:43:9: replace <impl HeadersDB for HeadersDBConn<'a>>::get_stacks_block_header_hash_for_block -> Option<BlockHeaderHash> with Some(Default::default())
stackslib/src/clarity_vm/database/mod.rs:52:9: replace <impl HeadersDB for HeadersDBConn<'a>>::get_burn_header_hash_for_block -> Option<BurnchainHeaderHash> with Some(Default::default())
stackslib/src/clarity_vm/database/mod.rs:58:9: replace <impl HeadersDB for HeadersDBConn<'a>>::get_consensus_hash_for_block -> Option<ConsensusHash> with Some(Default::default())
stackslib/src/clarity_vm/database/mod.rs:79:9: replace <impl HeadersDB for HeadersDBConn<'a>>::get_vrf_seed_for_block -> Option<VRFSeed> with Some(Default::default())
stackslib/src/clarity_vm/database/mod.rs:86:9: replace <impl HeadersDB for HeadersDBConn<'a>>::get_miner_address -> Option<StacksAddress> with Some(Default::default())
stackslib/src/clarity_vm/database/mod.rs:117:9: replace <impl HeadersDB for ChainstateTx<'a>>::get_stacks_block_header_hash_for_block -> Option<BlockHeaderHash> with Some(Default::default())
stackslib/src/clarity_vm/database/mod.rs:126:9: replace <impl HeadersDB for ChainstateTx<'a>>::get_burn_header_hash_for_block -> Option<BurnchainHeaderHash> with Some(Default::default())
stackslib/src/clarity_vm/database/mod.rs:132:9: replace <impl HeadersDB for ChainstateTx<'a>>::get_consensus_hash_for_block -> Option<ConsensusHash> with Some(Default::default())
stackslib/src/clarity_vm/database/mod.rs:153:9: replace <impl HeadersDB for ChainstateTx<'a>>::get_vrf_seed_for_block -> Option<VRFSeed> with Some(Default::default())
stackslib/src/clarity_vm/database/mod.rs:160:9: replace <impl HeadersDB for ChainstateTx<'a>>::get_miner_address -> Option<StacksAddress> with Some(Default::default())
stackslib/src/clarity_vm/database/mod.rs:194:9: replace <impl HeadersDB for MARF<StacksBlockId>>::get_stacks_block_header_hash_for_block -> Option<BlockHeaderHash> with Some(Default::default())
stackslib/src/clarity_vm/database/mod.rs:203:9: replace <impl HeadersDB for MARF<StacksBlockId>>::get_burn_header_hash_for_block -> Option<BurnchainHeaderHash> with Some(Default::default())
stackslib/src/clarity_vm/database/mod.rs:209:9: replace <impl HeadersDB for MARF<StacksBlockId>>::get_consensus_hash_for_block -> Option<ConsensusHash> with Some(Default::default())
stackslib/src/clarity_vm/database/mod.rs:230:9: replace <impl HeadersDB for MARF<StacksBlockId>>::get_vrf_seed_for_block -> Option<VRFSeed> with Some(Default::default())
stackslib/src/clarity_vm/database/mod.rs:237:9: replace <impl HeadersDB for MARF<StacksBlockId>>::get_miner_address -> Option<StacksAddress> with Some(Default::default())
stackslib/src/clarity_vm/database/mod.rs:275:5: replace get_stacks_header_column -> Option<R> with Some(Default::default())
stackslib/src/clarity_vm/database/mod.rs:300:5: replace get_miner_column -> Option<R> with Some(Default::default())
stackslib/src/clarity_vm/database/mod.rs:317:5: replace get_matured_reward -> Option<MinerReward> with Some(Default::default())
stackslib/src/clarity_vm/database/mod.rs:355:5: replace get_pox_start_cycle_info -> Result<Option<PoxStartCycleInfo>, ChainstateError> with Ok(Some(Default::default()))
stackslib/src/clarity_vm/database/mod.rs:379:9: replace <impl SortitionDBRef for SortitionHandleTx<'_>>::get_pox_start_cycle_info -> Result<Option<PoxStartCycleInfo>, ChainstateError> with Ok(Some(Default::default()))
stackslib/src/clarity_vm/database/mod.rs:398:9: replace <impl SortitionDBRef for SortitionDBConn<'_>>::get_pox_start_cycle_info -> Result<Option<PoxStartCycleInfo>, ChainstateError> with Ok(Some(Default::default()))
stackslib/src/clarity_vm/database/mod.rs:417:9: replace <impl BurnStateDB for SortitionHandleTx<'_>>::get_burn_header_hash -> Option<BurnchainHeaderHash> with Some(Default::default())
stackslib/src/clarity_vm/database/mod.rs:434:9: replace <impl BurnStateDB for SortitionHandleTx<'_>>::get_sortition_id_from_consensus_hash -> Option<SortitionId> with Some(Default::default())
stackslib/src/clarity_vm/database/mod.rs:441:9: replace <impl BurnStateDB for SortitionHandleTx<'_>>::get_stacks_epoch -> Option<StacksEpoch> with Some(Default::default())
stackslib/src/clarity_vm/database/mod.rs:473:9: replace <impl BurnStateDB for SortitionHandleTx<'_>>::get_stacks_epoch_by_epoch_id -> Option<StacksEpoch> with Some(Default::default())
stackslib/src/clarity_vm/database/mod.rs:481:9: replace <impl BurnStateDB for SortitionHandleTx<'_>>::get_pox_payout_addrs -> Option<(Vec<TupleData>, u128)> with Some((vec![Default::default()], 0))
stackslib/src/clarity_vm/database/mod.rs:481:9: replace <impl BurnStateDB for SortitionHandleTx<'_>>::get_pox_payout_addrs -> Option<(Vec<TupleData>, u128)> with Some((vec![Default::default()], 1))
stackslib/src/clarity_vm/database/mod.rs:513:9: replace <impl BurnStateDB for SortitionHandleTx<'_>>::get_ast_rules -> clarity::vm::ast::ASTRules with Default::default()
stackslib/src/clarity_vm/database/mod.rs:530:9: replace <impl BurnStateDB for SortitionDBConn<'_>>::get_burn_header_hash -> Option<BurnchainHeaderHash> with Some(Default::default())
stackslib/src/clarity_vm/database/mod.rs:553:9: replace <impl BurnStateDB for SortitionDBConn<'_>>::get_sortition_id_from_consensus_hash -> Option<SortitionId> with Some(Default::default())
stackslib/src/clarity_vm/database/mod.rs:560:9: replace <impl BurnStateDB for SortitionDBConn<'_>>::get_stacks_epoch -> Option<StacksEpoch> with Some(Default::default())
stackslib/src/clarity_vm/database/mod.rs:592:9: replace <impl BurnStateDB for SortitionDBConn<'_>>::get_stacks_epoch_by_epoch_id -> Option<StacksEpoch> with Some(Default::default())
stackslib/src/clarity_vm/database/mod.rs:600:9: replace <impl BurnStateDB for SortitionDBConn<'_>>::get_pox_payout_addrs -> Option<(Vec<TupleData>, u128)> with Some((vec![Default::default()], 0))
stackslib/src/clarity_vm/database/mod.rs:600:9: replace <impl BurnStateDB for SortitionDBConn<'_>>::get_pox_payout_addrs -> Option<(Vec<TupleData>, u128)> with Some((vec![Default::default()], 1))
stackslib/src/clarity_vm/database/mod.rs:624:9: replace <impl BurnStateDB for SortitionDBConn<'_>>::get_ast_rules -> clarity::vm::ast::ASTRules with Default::default()
stackslib/src/clarity_vm/database/mod.rs:645:9: replace MemoryBackingStore::as_clarity_db -> ClarityDatabase<'a> with Default::default()
stackslib/src/clarity_vm/database/mod.rs:655:9: replace MemoryBackingStore::as_clarity_db_with_databases -> ClarityDatabase<'a> with Default::default()
stackslib/src/clarity_vm/database/mod.rs:659:9: replace MemoryBackingStore::as_analysis_db -> AnalysisDatabase<'a> with Default::default()
stackslib/src/clarity_vm/database/mod.rs:665:9: replace <impl ClarityBackingStore for MemoryBackingStore>::set_block_hash -> InterpreterResult<StacksBlockId> with InterpreterResult::new()
stackslib/src/clarity_vm/database/mod.rs:665:9: replace <impl ClarityBackingStore for MemoryBackingStore>::set_block_hash -> InterpreterResult<StacksBlockId> with InterpreterResult::from_iter([Default::default()])
stackslib/src/clarity_vm/database/mod.rs:665:9: replace <impl ClarityBackingStore for MemoryBackingStore>::set_block_hash -> InterpreterResult<StacksBlockId> with InterpreterResult::new(Default::default())
stackslib/src/clarity_vm/database/mod.rs:665:9: replace <impl ClarityBackingStore for MemoryBackingStore>::set_block_hash -> InterpreterResult<StacksBlockId> with InterpreterResult::from(Default::default())
stackslib/src/clarity_vm/database/mod.rs:677:9: replace <impl ClarityBackingStore for MemoryBackingStore>::get_side_store -> &Connection with &Default::default()
stackslib/src/clarity_vm/database/mod.rs:681:9: replace <impl ClarityBackingStore for MemoryBackingStore>::get_block_at_height -> Option<StacksBlockId> with Some(Default::default())
stackslib/src/clarity_vm/database/mod.rs:689:9: replace <impl ClarityBackingStore for MemoryBackingStore>::get_open_chain_tip -> StacksBlockId with Default::default()
stackslib/src/clarity_vm/database/mod.rs:701:9: replace <impl ClarityBackingStore for MemoryBackingStore>::get_cc_special_cases_handler -> Option<SpecialCaseHandler> with Some(Default::default())
stackslib/src/core/mempool.rs:103:9: replace TxTag::from -> TxTag with Default::default()
stackslib/src/core/mempool.rs:125:9: replace <impl StacksMessageCodec for TxTag>::consensus_deserialize -> Result<TxTag, codec_error> with Ok(Default::default())
stackslib/src/core/mempool.rs:159:9: replace <impl StacksMessageCodec for MemPoolSyncData>::consensus_deserialize -> Result<MemPoolSyncData, codec_error> with Ok(Default::default())
stackslib/src/core/mempool.rs:184:5: replace parse_mempool_query_page_id -> Result<Option<Txid>, net_error> with Ok(Some(Default::default()))
stackslib/src/core/mempool.rs:222:5: replace decode_tx_stream -> Result<(Vec<StacksTransaction>, Option<Txid>), net_error> with Ok((vec![], Some(Default::default())))
stackslib/src/core/mempool.rs:222:5: replace decode_tx_stream -> Result<(Vec<StacksTransaction>, Option<Txid>), net_error> with Ok((vec![Default::default()], None))
stackslib/src/core/mempool.rs:222:5: replace decode_tx_stream -> Result<(Vec<StacksTransaction>, Option<Txid>), net_error> with Ok((vec![Default::default()], Some(Default::default())))
stackslib/src/core/mempool.rs:424:9: replace MemPoolTxMetadata::get_unknown_nonces -> Vec<StacksAddress> with vec![Default::default()]
stackslib/src/core/mempool.rs:445:9: replace <impl FromStr for MemPoolWalkTxTypes>::from_str -> Result<Self, Self::Err> with Ok(Default::default())
stackslib/src/core/mempool.rs:464:9: replace MemPoolWalkTxTypes::all -> HashSet<MemPoolWalkTxTypes> with HashSet::from_iter([Default::default()])
stackslib/src/core/mempool.rs:474:9: replace MemPoolWalkTxTypes::only -> HashSet<MemPoolWalkTxTypes> with HashSet::from_iter([Default::default()])
stackslib/src/core/mempool.rs:500:9: replace MemPoolWalkSettings::default -> MemPoolWalkSettings with Default::default()
stackslib/src/core/mempool.rs:516:9: replace MemPoolWalkSettings::zero -> MemPoolWalkSettings with Default::default()
stackslib/src/core/mempool.rs:535:9: replace <impl FromRow for Txid>::from_row -> Result<Txid, db_error> with Ok(Default::default())
stackslib/src/core/mempool.rs:541:9: replace <impl FromRow for MemPoolTxMetadata>::from_row -> Result<MemPoolTxMetadata, db_error> with Ok(Default::default())
stackslib/src/core/mempool.rs:575:9: replace <impl FromRow for MemPoolTxInfo>::from_row -> Result<MemPoolTxInfo, db_error> with Ok(Default::default())
stackslib/src/core/mempool.rs:593:9: replace <impl FromRow for MemPoolTxInfoPartial>::from_row -> Result<MemPoolTxInfoPartial, db_error> with Ok(Default::default())
stackslib/src/core/mempool.rs:793:9: replace <impl Deref for MemPoolTx<'a>>::deref -> &DBTx<'a> with &Default::default()
stackslib/src/core/mempool.rs:799:9: replace <impl DerefMut for MemPoolTx<'a>>::deref_mut -> &mut DBTx<'a> with Box::leak(Box::new(Default::default()))
stackslib/src/core/mempool.rs:820:9: replace MemPoolTx<'a>::with_bloom_state -> R with Default::default()
stackslib/src/core/mempool.rs:879:9: replace MemPoolTx<'a>::update_bloom_counter -> Result<Option<Txid>, MemPoolRejection> with Ok(Some(Default::default()))
stackslib/src/core/mempool.rs:956:9: replace MemPoolTxInfo::from_tx -> MemPoolTxInfo with Default::default()
stackslib/src/core/mempool.rs:1153:9: replace CandidateCache::next -> Option<MemPoolTxInfoPartial> with Some(Default::default())
stackslib/src/core/mempool.rs:1204:5: replace order_nonces -> Ordering with Default::default()
stackslib/src/core/mempool.rs:1374:9: replace MemPoolDB::open_db -> Result<MemPoolDB, db_error> with Ok(Default::default())
stackslib/src/core/mempool.rs:1414:9: replace MemPoolDB::reopen -> Result<DBConn, db_error> with Ok(Default::default())
stackslib/src/core/mempool.rs:1437:9: replace MemPoolDB::open -> Result<MemPoolDB, db_error> with Ok(Default::default())
stackslib/src/core/mempool.rs:1472:9: replace MemPoolDB::find_origin_addresses_by_descending_fees -> Result<Vec<StacksAddress>, db_error> with Ok(vec![Default::default()])
stackslib/src/core/mempool.rs:1899:9: replace MemPoolDB::conn -> &DBConn with &Default::default()
stackslib/src/core/mempool.rs:1903:9: replace MemPoolDB::tx_begin -> Result<MemPoolTx<'a>, db_error> with Ok(Default::default())
stackslib/src/core/mempool.rs:1921:9: replace MemPoolDB::get_tx -> Result<Option<MemPoolTxInfo>, db_error> with Ok(Some(Default::default()))
stackslib/src/core/mempool.rs:1957:9: replace MemPoolDB::get_txs_at -> Result<Vec<MemPoolTxInfo>, db_error> with Ok(vec![Default::default()])
stackslib/src/core/mempool.rs:1978:9: replace MemPoolDB::get_txs_after -> Result<Vec<MemPoolTxInfo>, db_error> with Ok(vec![Default::default()])
stackslib/src/core/mempool.rs:1998:9: replace MemPoolDB::get_tx_metadata_by_address -> Result<Option<MemPoolTxMetadata>, db_error> with Ok(Some(Default::default()))
stackslib/src/core/mempool.rs:2215:9: replace MemPoolDB::poll -> Vec<StacksTransaction> with vec![Default::default()]
stackslib/src/core/mempool.rs:2624:9: replace MemPoolDB::get_txid_bloom_filter -> Result<BloomFilter<BloomNodeHasher>, db_error> with Ok(BloomFilter::new())
stackslib/src/core/mempool.rs:2624:9: replace MemPoolDB::get_txid_bloom_filter -> Result<BloomFilter<BloomNodeHasher>, db_error> with Ok(BloomFilter::from_iter([Default::default()]))
stackslib/src/core/mempool.rs:2624:9: replace MemPoolDB::get_txid_bloom_filter -> Result<BloomFilter<BloomNodeHasher>, db_error> with Ok(BloomFilter::new(Default::default()))
stackslib/src/core/mempool.rs:2624:9: replace MemPoolDB::get_txid_bloom_filter -> Result<BloomFilter<BloomNodeHasher>, db_error> with Ok(BloomFilter::from(Default::default()))
stackslib/src/core/mempool.rs:2642:9: replace MemPoolDB::get_bloom_txids -> Result<Vec<Txid>, db_error> with Ok(vec![Default::default()])
stackslib/src/core/mempool.rs:2659:9: replace MemPoolDB::get_txtags -> Result<Vec<TxTag>, db_error> with Ok(vec![Default::default()])
stackslib/src/core/mempool.rs:2687:9: replace MemPoolDB::make_mempool_sync_data -> Result<MemPoolSyncData, db_error> with Ok(Default::default())
stackslib/src/core/mempool.rs:2699:9: replace MemPoolDB::get_randomized_txid -> Result<Option<Txid>, db_error> with Ok(Some(Default::default()))
stackslib/src/core/mempool.rs:2712:9: replace MemPoolDB::find_next_missing_transactions -> Result<(Vec<StacksTransaction>, Option<Txid>, u64), db_error> with Ok((vec![], Some(Default::default()), 0))
stackslib/src/core/mempool.rs:2712:9: replace MemPoolDB::find_next_missing_transactions -> Result<(Vec<StacksTransaction>, Option<Txid>, u64), db_error> with Ok((vec![], Some(Default::default()), 1))
stackslib/src/core/mempool.rs:2712:9: replace MemPoolDB::find_next_missing_transactions -> Result<(Vec<StacksTransaction>, Option<Txid>, u64), db_error> with Ok((vec![Default::default()], None, 0))
stackslib/src/core/mempool.rs:2712:9: replace MemPoolDB::find_next_missing_transactions -> Result<(Vec<StacksTransaction>, Option<Txid>, u64), db_error> with Ok((vec![Default::default()], None, 1))
stackslib/src/core/mempool.rs:2712:9: replace MemPoolDB::find_next_missing_transactions -> Result<(Vec<StacksTransaction>, Option<Txid>, u64), db_error> with Ok((vec![Default::default()], Some(Default::default()), 0))
stackslib/src/core/mempool.rs:2712:9: replace MemPoolDB::find_next_missing_transactions -> Result<(Vec<StacksTransaction>, Option<Txid>, u64), db_error> with Ok((vec![Default::default()], Some(Default::default()), 1))
stackslib/src/core/mempool.rs:2737:9: replace MemPoolDB::static_find_next_missing_transactions -> Result<(Vec<StacksTransaction>, Option<Txid>, u64), db_error> with Ok((vec![], Some(Default::default()), 0))
stackslib/src/core/mempool.rs:2737:9: replace MemPoolDB::static_find_next_missing_transactions -> Result<(Vec<StacksTransaction>, Option<Txid>, u64), db_error> with Ok((vec![], Some(Default::default()), 1))
stackslib/src/core/mempool.rs:2737:9: replace MemPoolDB::static_find_next_missing_transactions -> Result<(Vec<StacksTransaction>, Option<Txid>, u64), db_error> with Ok((vec![Default::default()], None, 0))
stackslib/src/core/mempool.rs:2737:9: replace MemPoolDB::static_find_next_missing_transactions -> Result<(Vec<StacksTransaction>, Option<Txid>, u64), db_error> with Ok((vec![Default::default()], None, 1))
stackslib/src/core/mempool.rs:2737:9: replace MemPoolDB::static_find_next_missing_transactions -> Result<(Vec<StacksTransaction>, Option<Txid>, u64), db_error> with Ok((vec![Default::default()], Some(Default::default()), 0))
stackslib/src/core/mempool.rs:2737:9: replace MemPoolDB::static_find_next_missing_transactions -> Result<(Vec<StacksTransaction>, Option<Txid>, u64), db_error> with Ok((vec![Default::default()], Some(Default::default()), 1))
stackslib/src/cost_estimates/fee_medians.rs:65:9: replace WeightedMedianFeeRateEstimator<M>::open -> Result<Self, SqliteError> with Ok(Default::default())
stackslib/src/cost_estimates/fee_medians.rs:104:9: replace WeightedMedianFeeRateEstimator<M>::get_rate_estimates_from_sql -> Result<FeeRateEstimate, EstimatorError> with Ok(Default::default())
stackslib/src/cost_estimates/fee_medians.rs:221:9: replace <impl FeeEstimator for WeightedMedianFeeRateEstimator<M>>::get_rate_estimates -> Result<FeeRateEstimate, EstimatorError> with Ok(Default::default())
stackslib/src/cost_estimates/fee_medians.rs:234:5: replace fee_rate_estimate_from_sorted_weighted_fees -> FeeRateEstimate with Default::default()
stackslib/src/cost_estimates/fee_medians.rs:312:5: replace fee_rate_and_weight_from_receipt -> Option<FeeRateAndWeight> with Some(Default::default())
stackslib/src/cost_estimates/fee_rate_fuzzer.rs:53:9: replace FeeRateFuzzer<UnderlyingEstimator>::new_custom_creator -> FeeRateFuzzer<UnderlyingEstimator> with FeeRateFuzzer::new()
stackslib/src/cost_estimates/fee_rate_fuzzer.rs:53:9: replace FeeRateFuzzer<UnderlyingEstimator>::new_custom_creator -> FeeRateFuzzer<UnderlyingEstimator> with FeeRateFuzzer::from_iter([Default::default()])
stackslib/src/cost_estimates/fee_rate_fuzzer.rs:53:9: replace FeeRateFuzzer<UnderlyingEstimator>::new_custom_creator -> FeeRateFuzzer<UnderlyingEstimator> with FeeRateFuzzer::new(Default::default())
stackslib/src/cost_estimates/fee_rate_fuzzer.rs:53:9: replace FeeRateFuzzer<UnderlyingEstimator>::new_custom_creator -> FeeRateFuzzer<UnderlyingEstimator> with FeeRateFuzzer::from(Default::default())
stackslib/src/cost_estimates/fee_rate_fuzzer.rs:63:9: replace FeeRateFuzzer<UnderlyingEstimator>::fuzz_estimate -> FeeRateEstimate with Default::default()
stackslib/src/cost_estimates/fee_rate_fuzzer.rs:86:9: replace <impl FeeEstimator for FeeRateFuzzer<T>>::get_rate_estimates -> Result<FeeRateEstimate, EstimatorError> with Ok(Default::default())
stackslib/src/cost_estimates/fee_scalar.rs:49:9: replace ScalarFeeRateEstimator<M>::open -> Result<Self, SqliteError> with Ok(Default::default())
stackslib/src/cost_estimates/fee_scalar.rs:240:9: replace <impl FeeEstimator for ScalarFeeRateEstimator<M>>::get_rate_estimates -> Result<FeeRateEstimate, EstimatorError> with Ok(Default::default())
stackslib/src/cost_estimates/pessimistic.rs:84:9: replace <impl FromSql for Samples>::column_result -> rusqlite::types::FromSqlResult<Self> with FromSqlResult::new()
stackslib/src/cost_estimates/pessimistic.rs:84:9: replace <impl FromSql for Samples>::column_result -> rusqlite::types::FromSqlResult<Self> with FromSqlResult::from_iter([Default::default()])
stackslib/src/cost_estimates/pessimistic.rs:84:9: replace <impl FromSql for Samples>::column_result -> rusqlite::types::FromSqlResult<Self> with FromSqlResult::new(Default::default())
stackslib/src/cost_estimates/pessimistic.rs:84:9: replace <impl FromSql for Samples>::column_result -> rusqlite::types::FromSqlResult<Self> with FromSqlResult::from(Default::default())
stackslib/src/cost_estimates/pessimistic.rs:157:9: replace Samples::get_sqlite -> Samples with Default::default()
stackslib/src/cost_estimates/pessimistic.rs:177:9: replace PessimisticEstimator::open -> Result<PessimisticEstimator, EstimatorError> with Ok(Default::default())
stackslib/src/cost_estimates/pessimistic.rs:253:9: replace <impl From for EstimatorError>::from -> Self with Default::default()
stackslib/src/cost_estimates/pessimistic.rs:303:9: replace <impl CostEstimator for PessimisticEstimator>::estimate_cost -> Result<ExecutionCost, EstimatorError> with Ok(Default::default())
stackslib/src/net/api/callreadonly.rs:112:9: replace <impl HttpRequest for RPCCallReadOnlyRequestHandler>::path_regex -> Regex with Default::default()
stackslib/src/net/api/callreadonly.rs:127:9: replace <impl HttpRequest for RPCCallReadOnlyRequestHandler>::try_parse_request -> Result<HttpRequestContents, Error> with Ok(Default::default())
stackslib/src/net/api/callreadonly.rs:194:9: replace <impl RPCRequestHandler for RPCCallReadOnlyRequestHandler>::try_handle_request -> Result<(HttpResponsePreamble, HttpResponseContents), NetError> with Ok((Default::default(), Default::default()))
stackslib/src/net/api/callreadonly.rs:328:9: replace <impl HttpResponse for RPCCallReadOnlyRequestHandler>::try_parse_response -> Result<HttpResponsePayload, Error> with Ok(Default::default())
stackslib/src/net/api/callreadonly.rs:345:9: replace StacksHttpRequest::new_callreadonlyfunction -> StacksHttpRequest with Default::default()
stackslib/src/net/api/callreadonly.rs:367:9: replace StacksHttpResponse::decode_call_readonly_response -> Result<CallReadOnlyResponse, NetError> with Ok(Default::default())
stackslib/src/net/api/getaccount.rs:80:9: replace <impl HttpRequest for RPCGetAccountRequestHandler>::path_regex -> Regex with Default::default()
stackslib/src/net/api/getaccount.rs:96:9: replace <impl HttpRequest for RPCGetAccountRequestHandler>::try_parse_request -> Result<HttpRequestContents, Error> with Ok(Default::default())
stackslib/src/net/api/getaccount.rs:131:9: replace <impl RPCRequestHandler for RPCGetAccountRequestHandler>::try_handle_request -> Result<(HttpResponsePreamble, HttpResponseContents), NetError> with Ok((Default::default(), Default::default()))
stackslib/src/net/api/getaccount.rs:228:9: replace <impl HttpResponse for RPCGetAccountRequestHandler>::try_parse_response -> Result<HttpResponsePayload, Error> with Ok(Default::default())
stackslib/src/net/api/getaccount.rs:241:9: replace StacksHttpRequest::new_getaccount -> StacksHttpRequest with Default::default()
stackslib/src/net/api/getaccount.rs:255:9: replace StacksHttpResponse::decode_account_entry_response -> Result<AccountEntryResponse, NetError> with Ok(Default::default())
stackslib/src/net/api/getattachment.rs:59:9: replace <impl HttpRequest for RPCGetAttachmentRequestHandler>::path_regex -> Regex with Default::default()
stackslib/src/net/api/getattachment.rs:71:9: replace <impl HttpRequest for RPCGetAttachmentRequestHandler>::try_parse_request -> Result<HttpRequestContents, Error> with Ok(Default::default())
stackslib/src/net/api/getattachment.rs:105:9: replace <impl RPCRequestHandler for RPCGetAttachmentRequestHandler>::try_handle_request -> Result<(HttpResponsePreamble, HttpResponseContents), NetError> with Ok((Default::default(), Default::default()))
stackslib/src/net/api/getattachment.rs:147:9: replace <impl HttpResponse for RPCGetAttachmentRequestHandler>::try_parse_response -> Result<HttpResponsePayload, Error> with Ok(Default::default())
stackslib/src/net/api/getattachment.rs:155:9: replace StacksHttpRequest::new_getattachment -> StacksHttpRequest with Default::default()
stackslib/src/net/api/getattachment.rs:167:9: replace StacksHttpResponse::decode_atlas_get_attachment -> Result<GetAttachmentResponse, NetError> with Ok(Default::default())
stackslib/src/net/api/getattachmentsinv.rs:61:9: replace <impl HttpRequest for RPCGetAttachmentsInvRequestHandler>::path_regex -> Regex with Default::default()
stackslib/src/net/api/getattachmentsinv.rs:73:9: replace <impl HttpRequest for RPCGetAttachmentsInvRequestHandler>::try_parse_request -> Result<HttpRequestContents, Error> with Ok(Default::default())
stackslib/src/net/api/getattachmentsinv.rs:142:9: replace <impl RPCRequestHandler for RPCGetAttachmentsInvRequestHandler>::try_handle_request -> Result<(HttpResponsePreamble, HttpResponseContents), NetError> with Ok((Default::default(), Default::default()))
stackslib/src/net/api/getattachmentsinv.rs:230:9: replace <impl HttpResponse for RPCGetAttachmentsInvRequestHandler>::try_parse_response -> Result<HttpResponsePayload, Error> with Ok(Default::default())
stackslib/src/net/api/getattachmentsinv.rs:242:9: replace StacksHttpRequest::new_getattachmentsinv -> StacksHttpRequest with Default::default()
stackslib/src/net/api/getattachmentsinv.rs:259:9: replace StacksHttpResponse::decode_atlas_attachments_inv_response -> Result<GetAttachmentsInvResponse, NetError> with Ok(Default::default())
stackslib/src/net/api/getblock.rs:90:9: replace <impl HttpRequest for RPCBlocksRequestHandler>::path_regex -> Regex with Default::default()
stackslib/src/net/api/getblock.rs:102:9: replace <impl HttpRequest for RPCBlocksRequestHandler>::try_parse_request -> Result<HttpRequestContents, Error> with Ok(Default::default())
stackslib/src/net/api/getblock.rs:136:9: replace <impl RPCRequestHandler for RPCBlocksRequestHandler>::try_handle_request -> Result<(HttpResponsePreamble, HttpResponseContents), NetError> with Ok((Default::default(), Default::default()))
stackslib/src/net/api/getblock.rs:191:9: replace <impl HttpResponse for RPCBlocksRequestHandler>::try_parse_response -> Result<HttpResponsePayload, Error> with Ok(Default::default())
stackslib/src/net/api/getblock.rs:266:9: replace StacksHttpRequest::new_getblock -> StacksHttpRequest with Default::default()
stackslib/src/net/api/getblock.rs:300:9: replace StacksHttpResponse::decode_block -> Result<StacksBlock, NetError> with Ok(Default::default())
stackslib/src/net/api/getconstantval.rs:79:9: replace <impl HttpRequest for RPCGetConstantValRequestHandler>::path_regex -> Regex with Default::default()
stackslib/src/net/api/getconstantval.rs:95:9: replace <impl HttpRequest for RPCGetConstantValRequestHandler>::try_parse_request -> Result<HttpRequestContents, Error> with Ok(Default::default())
stackslib/src/net/api/getconstantval.rs:127:9: replace <impl RPCRequestHandler for RPCGetConstantValRequestHandler>::try_handle_request -> Result<(HttpResponsePreamble, HttpResponseContents), NetError> with Ok((Default::default(), Default::default()))
stackslib/src/net/api/getconstantval.rs:192:9: replace <impl HttpResponse for RPCGetConstantValRequestHandler>::try_parse_response -> Result<HttpResponsePayload, Error> with Ok(Default::default())
stackslib/src/net/api/getconstantval.rs:206:9: replace StacksHttpRequest::new_getconstantval -> StacksHttpRequest with Default::default()
stackslib/src/net/api/getconstantval.rs:221:9: replace StacksHttpResponse::decode_constant_val_response -> Result<ConstantValResponse, NetError> with Ok(Default::default())
stackslib/src/net/api/getcontractabi.rs:74:9: replace <impl HttpRequest for RPCGetContractAbiRequestHandler>::path_regex -> Regex with Default::default()
stackslib/src/net/api/getcontractabi.rs:90:9: replace <impl HttpRequest for RPCGetContractAbiRequestHandler>::try_parse_request -> Result<HttpRequestContents, Error> with Ok(Default::default())
stackslib/src/net/api/getcontractabi.rs:119:9: replace <impl RPCRequestHandler for RPCGetContractAbiRequestHandler>::try_handle_request -> Result<(HttpResponsePreamble, HttpResponseContents), NetError> with Ok((Default::default(), Default::default()))
stackslib/src/net/api/getcontractabi.rs:174:9: replace <impl HttpResponse for RPCGetContractAbiRequestHandler>::try_parse_response -> Result<HttpResponsePayload, Error> with Ok(Default::default())
stackslib/src/net/api/getcontractabi.rs:187:9: replace StacksHttpRequest::new_getcontractabi -> StacksHttpRequest with Default::default()
stackslib/src/net/api/getcontractabi.rs:202:9: replace StacksHttpResponse::decode_contract_abi_response -> Result<ContractInterface, NetError> with Ok(Default::default())
stackslib/src/net/api/getcontractsrc.rs:82:9: replace <impl HttpRequest for RPCGetContractSrcRequestHandler>::path_regex -> Regex with Default::default()
stackslib/src/net/api/getcontractsrc.rs:98:9: replace <impl HttpRequest for RPCGetContractSrcRequestHandler>::try_parse_request -> Result<HttpRequestContents, Error> with Ok(Default::default())
stackslib/src/net/api/getcontractsrc.rs:126:9: replace <impl RPCRequestHandler for RPCGetContractSrcRequestHandler>::try_handle_request -> Result<(HttpResponsePreamble, HttpResponseContents), NetError> with Ok((Default::default(), Default::default()))
stackslib/src/net/api/getcontractsrc.rs:197:9: replace <impl HttpResponse for RPCGetContractSrcRequestHandler>::try_parse_response -> Result<HttpResponsePayload, Error> with Ok(Default::default())
stackslib/src/net/api/getcontractsrc.rs:211:9: replace StacksHttpRequest::new_getcontractsrc -> StacksHttpRequest with Default::default()
stackslib/src/net/api/getcontractsrc.rs:225:9: replace StacksHttpResponse::decode_contract_src_response -> Result<ContractSrcResponse, NetError> with Ok(Default::default())
stackslib/src/net/api/getdatavar.rs:82:9: replace <impl HttpRequest for RPCGetDataVarRequestHandler>::path_regex -> Regex with Default::default()
stackslib/src/net/api/getdatavar.rs:98:9: replace <impl HttpRequest for RPCGetDataVarRequestHandler>::try_parse_request -> Result<HttpRequestContents, Error> with Ok(Default::default())
stackslib/src/net/api/getdatavar.rs:130:9: replace <impl RPCRequestHandler for RPCGetDataVarRequestHandler>::try_handle_request -> Result<(HttpResponsePreamble, HttpResponseContents), NetError> with Ok((Default::default(), Default::default()))
stackslib/src/net/api/getdatavar.rs:204:9: replace <impl HttpResponse for RPCGetDataVarRequestHandler>::try_parse_response -> Result<HttpResponsePayload, Error> with Ok(Default::default())
stackslib/src/net/api/getdatavar.rs:219:9: replace StacksHttpRequest::new_getdatavar -> StacksHttpRequest with Default::default()
stackslib/src/net/api/getdatavar.rs:236:9: replace StacksHttpResponse::decode_data_var_response -> Result<DataVarResponse, NetError> with Ok(Default::default())
stackslib/src/net/api/getheaders.rs:109:9: replace <impl HttpRequest for RPCHeadersRequestHandler>::path_regex -> Regex with Default::default()
stackslib/src/net/api/getheaders.rs:121:9: replace <impl HttpRequest for RPCHeadersRequestHandler>::try_parse_request -> Result<HttpRequestContents, Error> with Ok(Default::default())
stackslib/src/net/api/getheaders.rs:149:9: replace <impl RPCRequestHandler for RPCHeadersRequestHandler>::try_handle_request -> Result<(HttpResponsePreamble, HttpResponseContents), NetError> with Ok((Default::default(), Default::default()))
stackslib/src/net/api/getheaders.rs:223:9: replace <impl HttpResponse for RPCHeadersRequestHandler>::try_parse_response -> Result<HttpResponsePayload, Error> with Ok(Default::default())
stackslib/src/net/api/getheaders.rs:307:9: replace StacksHttpRequest::new_getheaders -> StacksHttpRequest with Default::default()
stackslib/src/net/api/getheaders.rs:319:9: replace StacksHttpResponse::decode_stacks_headers -> Result<Vec<ExtendedStacksHeader>, NetError> with Ok(vec![Default::default()])
stackslib/src/net/api/getinfo.rs:109:9: replace RPCPeerInfoData::from_network -> RPCPeerInfoData with Default::default()
stackslib/src/net/api/getinfo.rs:182:9: replace <impl HttpRequest for RPCPeerInfoRequestHandler>::path_regex -> Regex with Default::default()
stackslib/src/net/api/getinfo.rs:194:9: replace <impl HttpRequest for RPCPeerInfoRequestHandler>::try_parse_request -> Result<HttpRequestContents, Error> with Ok(Default::default())
stackslib/src/net/api/getinfo.rs:214:9: replace <impl RPCRequestHandler for RPCPeerInfoRequestHandler>::try_handle_request -> Result<(HttpResponsePreamble, HttpResponseContents), NetError> with Ok((Default::default(), Default::default()))
stackslib/src/net/api/getinfo.rs:237:9: replace <impl HttpResponse for RPCPeerInfoRequestHandler>::try_parse_response -> Result<HttpResponsePayload, Error> with Ok(Default::default())
stackslib/src/net/api/getinfo.rs:245:9: replace StacksHttpRequest::new_getinfo -> StacksHttpRequest with Default::default()
stackslib/src/net/api/getinfo.rs:260:9: replace StacksHttpResponse::decode_peer_info -> Result<RPCPeerInfoData, NetError> with Ok(Default::default())
stackslib/src/net/api/getistraitimplemented.rs:82:9: replace <impl HttpRequest for RPCGetIsTraitImplementedRequestHandler>::path_regex -> Regex with Default::default()
stackslib/src/net/api/getistraitimplemented.rs:98:9: replace <impl HttpRequest for RPCGetIsTraitImplementedRequestHandler>::try_parse_request -> Result<HttpRequestContents, Error> with Ok(Default::default())
stackslib/src/net/api/getistraitimplemented.rs:133:9: replace <impl RPCRequestHandler for RPCGetIsTraitImplementedRequestHandler>::try_handle_request -> Result<(HttpResponsePreamble, HttpResponseContents), NetError> with Ok((Default::default(), Default::default()))
stackslib/src/net/api/getistraitimplemented.rs:220:9: replace <impl HttpResponse for RPCGetIsTraitImplementedRequestHandler>::try_parse_response -> Result<HttpResponsePayload, Error> with Ok(Default::default())
stackslib/src/net/api/getistraitimplemented.rs:229:9: replace StacksHttpResponse::decode_is_trait_implemented_response -> Result<GetIsTraitImplementedResponse, NetError> with Ok(Default::default())
stackslib/src/net/api/getistraitimplemented.rs:248:9: replace StacksHttpRequest::new_get_is_trait_implemented -> StacksHttpRequest with Default::default()
stackslib/src/net/api/getmapentry.rs:88:9: replace <impl HttpRequest for RPCGetMapEntryRequestHandler>::path_regex -> Regex with Default::default()
stackslib/src/net/api/getmapentry.rs:105:9: replace <impl HttpRequest for RPCGetMapEntryRequestHandler>::try_parse_request -> Result<HttpRequestContents, Error> with Ok(Default::default())
stackslib/src/net/api/getmapentry.rs:153:9: replace <impl RPCRequestHandler for RPCGetMapEntryRequestHandler>::try_handle_request -> Result<(HttpResponsePreamble, HttpResponseContents), NetError> with Ok((Default::default(), Default::default()))
stackslib/src/net/api/getmapentry.rs:230:9: replace <impl HttpResponse for RPCGetMapEntryRequestHandler>::try_parse_response -> Result<HttpResponsePayload, Error> with Ok(Default::default())
stackslib/src/net/api/getmapentry.rs:246:9: replace StacksHttpRequest::new_getmapentry -> StacksHttpRequest with Default::default()
stackslib/src/net/api/getmapentry.rs:264:9: replace StacksHttpResponse::decode_map_entry_response -> Result<MapEntryResponse, NetError> with Ok(Default::default())
stackslib/src/net/api/getmicroblocks_confirmed.rs:61:9: replace StacksIndexedMicroblockStream::new_confirmed -> Result<Self, ChainError> with Ok(Default::default())
stackslib/src/net/api/getmicroblocks_confirmed.rs:79:9: replace <impl HttpRequest for RPCMicroblocksConfirmedRequestHandler>::path_regex -> Regex with Default::default()
stackslib/src/net/api/getmicroblocks_confirmed.rs:91:9: replace <impl HttpRequest for RPCMicroblocksConfirmedRequestHandler>::try_parse_request -> Result<HttpRequestContents, Error> with Ok(Default::default())
stackslib/src/net/api/getmicroblocks_confirmed.rs:117:9: replace <impl RPCRequestHandler for RPCMicroblocksConfirmedRequestHandler>::try_handle_request -> Result<(HttpResponsePreamble, HttpResponseContents), NetError> with Ok((Default::default(), Default::default()))
stackslib/src/net/api/getmicroblocks_confirmed.rs:184:9: replace StacksHttpRequest::new_getmicroblocks_confirmed -> StacksHttpRequest with Default::default()
stackslib/src/net/api/getmicroblocks_confirmed.rs:174:9: replace <impl HttpResponse for RPCMicroblocksConfirmedRequestHandler>::try_parse_response -> Result<HttpResponsePayload, Error> with Ok(Default::default())
stackslib/src/net/api/getmicroblocks_indexed.rs:112:9: replace <impl HttpRequest for RPCMicroblocksIndexedRequestHandler>::path_regex -> Regex with Default::default()
stackslib/src/net/api/getmicroblocks_indexed.rs:124:9: replace <impl HttpRequest for RPCMicroblocksIndexedRequestHandler>::try_parse_request -> Result<HttpRequestContents, Error> with Ok(Default::default())
stackslib/src/net/api/getmicroblocks_indexed.rs:151:9: replace <impl RPCRequestHandler for RPCMicroblocksIndexedRequestHandler>::try_handle_request -> Result<(HttpResponsePreamble, HttpResponseContents), NetError> with Ok((Default::default(), Default::default()))
stackslib/src/net/api/getmicroblocks_indexed.rs:205:9: replace <impl HttpResponse for RPCMicroblocksIndexedRequestHandler>::try_parse_response -> Result<HttpResponsePayload, Error> with Ok(Default::default())
stackslib/src/net/api/getmicroblocks_indexed.rs:268:9: replace StacksHttpRequest::new_getmicroblocks_indexed -> StacksHttpRequest with Default::default()
stackslib/src/net/api/getmicroblocks_indexed.rs:305:9: replace StacksHttpResponse::decode_microblocks -> Result<Vec<StacksMicroblock>, NetError> with Ok(vec![Default::default()])
stackslib/src/net/api/getmicroblocks_unconfirmed.rs:106:9: replace <impl HttpRequest for RPCMicroblocksUnconfirmedRequestHandler>::path_regex -> Regex with Default::default()
stackslib/src/net/api/getmicroblocks_unconfirmed.rs:118:9: replace <impl HttpRequest for RPCMicroblocksUnconfirmedRequestHandler>::try_parse_request -> Result<HttpRequestContents, Error> with Ok(Default::default())
stackslib/src/net/api/getmicroblocks_unconfirmed.rs:154:9: replace <impl RPCRequestHandler for RPCMicroblocksUnconfirmedRequestHandler>::try_handle_request -> Result<(HttpResponsePreamble, HttpResponseContents), NetError> with Ok((Default::default(), Default::default()))
stackslib/src/net/api/getmicroblocks_unconfirmed.rs:213:9: replace <impl HttpResponse for RPCMicroblocksUnconfirmedRequestHandler>::try_parse_response -> Result<HttpResponsePayload, Error> with Ok(Default::default())
stackslib/src/net/api/getmicroblocks_unconfirmed.rs:277:9: replace StacksHttpRequest::new_getmicroblocks_unconfirmed -> StacksHttpRequest with Default::default()
stackslib/src/net/api/getmicroblocks_unconfirmed.rs:290:9: replace StacksHttpResponse::decode_microblocks_unconfirmed -> Result<Vec<StacksMicroblock>, NetError> with Ok(vec![Default::default()])
stackslib/src/net/api/getneighbors.rs:64:9: replace RPCNeighbor::from_neighbor_key_and_pubkh -> RPCNeighbor with Default::default()
stackslib/src/net/api/getneighbors.rs:88:9: replace RPCNeighborsInfo::from_p2p -> Result<RPCNeighborsInfo, NetError> with Ok(Default::default())
stackslib/src/net/api/getneighbors.rs:179:9: replace <impl HttpRequest for RPCNeighborsRequestHandler>::path_regex -> Regex with Default::default()
stackslib/src/net/api/getneighbors.rs:191:9: replace <impl HttpRequest for RPCNeighborsRequestHandler>::try_parse_request -> Result<HttpRequestContents, Error> with Ok(Default::default())
stackslib/src/net/api/getneighbors.rs:211:9: replace <impl RPCRequestHandler for RPCNeighborsRequestHandler>::try_handle_request -> Result<(HttpResponsePreamble, HttpResponseContents), NetError> with Ok((Default::default(), Default::default()))
stackslib/src/net/api/getneighbors.rs:230:9: replace <impl HttpResponse for RPCNeighborsRequestHandler>::try_parse_response -> Result<HttpResponsePayload, Error> with Ok(Default::default())
stackslib/src/net/api/getneighbors.rs:238:9: replace StacksHttpRequest::new_getneighbors -> StacksHttpRequest with Default::default()
stackslib/src/net/api/getneighbors.rs:277:9: replace StacksHttpResponse::decode_rpc_neighbors -> Result<RPCNeighborsInfo, NetError> with Ok(Default::default())
stackslib/src/net/api/getpoxinfo.rs:117:9: replace RPCPoxInfoData::from_db -> Result<RPCPoxInfoData, NetError> with Ok(Default::default())
stackslib/src/net/api/getpoxinfo.rs:380:9: replace <impl HttpRequest for RPCPoxInfoRequestHandler>::path_regex -> Regex with Default::default()
stackslib/src/net/api/getpoxinfo.rs:392:9: replace <impl HttpRequest for RPCPoxInfoRequestHandler>::try_parse_request -> Result<HttpRequestContents, Error> with Ok(Default::default())
stackslib/src/net/api/getpoxinfo.rs:413:9: replace <impl RPCRequestHandler for RPCPoxInfoRequestHandler>::try_handle_request -> Result<(HttpResponsePreamble, HttpResponseContents), NetError> with Ok((Default::default(), Default::default()))
stackslib/src/net/api/getpoxinfo.rs:458:9: replace <impl HttpResponse for RPCPoxInfoRequestHandler>::try_parse_response -> Result<HttpResponsePayload, Error> with Ok(Default::default())
stackslib/src/net/api/getpoxinfo.rs:466:9: replace StacksHttpRequest::new_getpoxinfo -> StacksHttpRequest with Default::default()
stackslib/src/net/api/getpoxinfo.rs:478:9: replace StacksHttpResponse::decode_rpc_get_pox_info -> Result<RPCPoxInfoData, NetError> with Ok(Default::default())
stackslib/src/net/api/getstackerdbchunk.rs:74:9: replace <impl HttpRequest for RPCGetStackerDBChunkRequestHandler>::path_regex -> Regex with Default::default()
stackslib/src/net/api/getstackerdbchunk.rs:89:9: replace <impl HttpRequest for RPCGetStackerDBChunkRequestHandler>::try_parse_request -> Result<HttpRequestContents, Error> with Ok(Default::default())
stackslib/src/net/api/getstackerdbchunk.rs:132:9: replace <impl RPCRequestHandler for RPCGetStackerDBChunkRequestHandler>::try_handle_request -> Result<(HttpResponsePreamble, HttpResponseContents), NetError> with Ok((Default::default(), Default::default()))
stackslib/src/net/api/getstackerdbchunk.rs:210:9: replace <impl HttpResponse for RPCGetStackerDBChunkRequestHandler>::try_parse_response -> Result<HttpResponsePayload, Error> with Ok(Default::default())
stackslib/src/net/api/getstackerdbchunk.rs:223:9: replace StacksHttpRequest::new_get_stackerdb_chunk -> StacksHttpRequest with Default::default()
stackslib/src/net/api/getstackerdbmetadata.rs:69:9: replace <impl HttpRequest for RPCGetStackerDBMetadataRequestHandler>::path_regex -> Regex with Default::default()
stackslib/src/net/api/getstackerdbmetadata.rs:85:9: replace <impl HttpRequest for RPCGetStackerDBMetadataRequestHandler>::try_parse_request -> Result<HttpRequestContents, Error> with Ok(Default::default())
stackslib/src/net/api/getstackerdbmetadata.rs:111:9: replace <impl RPCRequestHandler for RPCGetStackerDBMetadataRequestHandler>::try_handle_request -> Result<(HttpResponsePreamble, HttpResponseContents), NetError> with Ok((Default::default(), Default::default()))
stackslib/src/net/api/getstackerdbmetadata.rs:152:9: replace <impl HttpResponse for RPCGetStackerDBMetadataRequestHandler>::try_parse_response -> Result<HttpResponsePayload, Error> with Ok(Default::default())
stackslib/src/net/api/getstackerdbmetadata.rs:162:9: replace StacksHttpRequest::new_get_stackerdb_metadata -> StacksHttpRequest with Default::default()
stackslib/src/net/api/getstackerdbmetadata.rs:179:9: replace StacksHttpResponse::decode_stackerdb_metadata -> Result<Vec<SlotMetadata>, NetError> with Ok(vec![Default::default()])
stackslib/src/net/api/getstxtransfercost.rs:71:9: replace <impl HttpRequest for RPCGetStxTransferCostRequestHandler>::try_parse_request -> Result<HttpRequestContents, Error> with Ok(Default::default())
stackslib/src/net/api/getstxtransfercost.rs:59:9: replace <impl HttpRequest for RPCGetStxTransferCostRequestHandler>::path_regex -> Regex with Default::default()
stackslib/src/net/api/getstxtransfercost.rs:93:9: replace <impl RPCRequestHandler for RPCGetStxTransferCostRequestHandler>::try_handle_request -> Result<(HttpResponsePreamble, HttpResponseContents), NetError> with Ok((Default::default(), Default::default()))
stackslib/src/net/api/getstxtransfercost.rs:108:9: replace <impl HttpResponse for RPCGetStxTransferCostRequestHandler>::try_parse_response -> Result<HttpResponsePayload, Error> with Ok(Default::default())
stackslib/src/net/api/getstxtransfercost.rs:115:9: replace StacksHttpRequest::new_get_stx_transfer_cost -> StacksHttpRequest with Default::default()
stackslib/src/net/api/gettransaction_unconfirmed.rs:75:9: replace <impl HttpRequest for RPCGetTransactionUnconfirmedRequestHandler>::path_regex -> Regex with Default::default()
stackslib/src/net/api/gettransaction_unconfirmed.rs:87:9: replace <impl HttpRequest for RPCGetTransactionUnconfirmedRequestHandler>::try_parse_request -> Result<HttpRequestContents, Error> with Ok(Default::default())
stackslib/src/net/api/gettransaction_unconfirmed.rs:114:9: replace <impl RPCRequestHandler for RPCGetTransactionUnconfirmedRequestHandler>::try_handle_request -> Result<(HttpResponsePreamble, HttpResponseContents), NetError> with Ok((Default::default(), Default::default()))
stackslib/src/net/api/gettransaction_unconfirmed.rs:187:9: replace <impl HttpResponse for RPCGetTransactionUnconfirmedRequestHandler>::try_parse_response -> Result<HttpResponsePayload, Error> with Ok(Default::default())
stackslib/src/net/api/gettransaction_unconfirmed.rs:195:9: replace StacksHttpRequest::new_gettransaction_unconfirmed -> StacksHttpRequest with Default::default()
stackslib/src/net/api/gettransaction_unconfirmed.rs:209:9: replace StacksHttpResponse::decode_gettransaction_unconfirmed -> Result<UnconfirmedTransactionResponse, NetError> with Ok(Default::default())
stackslib/src/net/api/postblock.rs:77:9: replace RPCPostBlockRequestHandler::parse_postblock_octets -> Result<StacksBlock, Error> with Ok(Default::default())
stackslib/src/net/api/postblock.rs:95:9: replace <impl HttpRequest for RPCPostBlockRequestHandler>::path_regex -> Regex with Default::default()
stackslib/src/net/api/postblock.rs:107:9: replace <impl HttpRequest for RPCPostBlockRequestHandler>::try_parse_request -> Result<HttpRequestContents, Error> with Ok(Default::default())
stackslib/src/net/api/postblock.rs:150:9: replace <impl RPCRequestHandler for RPCPostBlockRequestHandler>::try_handle_request -> Result<(HttpResponsePreamble, HttpResponseContents), NetError> with Ok((Default::default(), Default::default()))
stackslib/src/net/api/postblock.rs:262:9: replace <impl HttpResponse for RPCPostBlockRequestHandler>::try_parse_response -> Result<HttpResponsePayload, Error> with Ok(Default::default())
stackslib/src/net/api/postblock.rs:274:9: replace StacksHttpRequest::new_post_block -> StacksHttpRequest with Default::default()
stackslib/src/net/api/postblock.rs:286:9: replace StacksHttpResponse::decode_stacks_block_accepted -> Result<StacksBlockAcceptedData, NetError> with Ok(Default::default())
stackslib/src/net/api/postfeerate.rs:64:9: replace RPCFeeEstimate::estimate_fees -> Vec<RPCFeeEstimate> with vec![Default::default()]
stackslib/src/net/api/postfeerate.rs:111:9: replace <impl HttpRequest for RPCPostFeeRateRequestHandler>::path_regex -> Regex with Default::default()
stackslib/src/net/api/postfeerate.rs:123:9: replace <impl HttpRequest for RPCPostFeeRateRequestHandler>::try_parse_request -> Result<HttpRequestContents, Error> with Ok(Default::default())
stackslib/src/net/api/postfeerate.rs:176:9: replace <impl RPCRequestHandler for RPCPostFeeRateRequestHandler>::try_handle_request -> Result<(HttpResponsePreamble, HttpResponseContents), NetError> with Ok((Default::default(), Default::default()))
stackslib/src/net/api/postfeerate.rs:270:9: replace <impl HttpResponse for RPCPostFeeRateRequestHandler>::try_parse_response -> Result<HttpResponsePayload, Error> with Ok(Default::default())
stackslib/src/net/api/postfeerate.rs:277:9: replace StacksHttpResponse::decode_fee_estimate -> Result<RPCFeeEstimateResponse, NetError> with Ok(Default::default())
stackslib/src/net/api/postfeerate.rs:290:9: replace StacksHttpRequest::new_post_fee_rate -> StacksHttpRequest with Default::default()
stackslib/src/net/api/postmempoolquery.rs:63:9: replace RPCMempoolQueryRequestHandler::get_page_id_query -> Option<Txid> with Some(Default::default())
stackslib/src/net/api/postmempoolquery.rs:222:9: replace <impl HttpRequest for RPCMempoolQueryRequestHandler>::path_regex -> Regex with Default::default()
stackslib/src/net/api/postmempoolquery.rs:234:9: replace <impl HttpRequest for RPCMempoolQueryRequestHandler>::try_parse_request -> Result<HttpRequestContents, Error> with Ok(Default::default())
stackslib/src/net/api/postmempoolquery.rs:265:9: replace <impl RPCRequestHandler for RPCMempoolQueryRequestHandler>::try_handle_request -> Result<(HttpResponsePreamble, HttpResponseContents), NetError> with Ok((Default::default(), Default::default()))
stackslib/src/net/api/postmempoolquery.rs:322:9: replace <impl HttpResponse for RPCMempoolQueryRequestHandler>::try_parse_response -> Result<HttpResponsePayload, Error> with Ok(Default::default())
stackslib/src/net/api/postmempoolquery.rs:333:9: replace StacksHttpRequest::new_mempool_query -> StacksHttpRequest with Default::default()
stackslib/src/net/api/postmempoolquery.rs:355:9: replace StacksHttpResponse::decode_mempool_txs_page -> Result<(Vec<StacksTransaction>, Option<Txid>), NetError> with Ok((vec![], Some(Default::default())))
stackslib/src/net/api/postmempoolquery.rs:355:9: replace StacksHttpResponse::decode_mempool_txs_page -> Result<(Vec<StacksTransaction>, Option<Txid>), NetError> with Ok((vec![Default::default()], None))
stackslib/src/net/api/postmempoolquery.rs:355:9: replace StacksHttpResponse::decode_mempool_txs_page -> Result<(Vec<StacksTransaction>, Option<Txid>), NetError> with Ok((vec![Default::default()], Some(Default::default())))
stackslib/src/net/api/postmicroblock.rs:67:9: replace RPCPostMicroblockRequestHandler::parse_postmicroblock_octets -> Result<StacksMicroblock, Error> with Ok(Default::default())
stackslib/src/net/api/postmicroblock.rs:85:9: replace <impl HttpRequest for RPCPostMicroblockRequestHandler>::path_regex -> Regex with Default::default()
stackslib/src/net/api/postmicroblock.rs:97:9: replace <impl HttpRequest for RPCPostMicroblockRequestHandler>::try_parse_request -> Result<HttpRequestContents, Error> with Ok(Default::default())
stackslib/src/net/api/postmicroblock.rs:137:9: replace <impl RPCRequestHandler for RPCPostMicroblockRequestHandler>::try_handle_request -> Result<(HttpResponsePreamble, HttpResponseContents), NetError> with Ok((Default::default(), Default::default()))
stackslib/src/net/api/postmicroblock.rs:240:9: replace <impl HttpResponse for RPCPostMicroblockRequestHandler>::try_parse_response -> Result<HttpResponsePayload, Error> with Ok(Default::default())
stackslib/src/net/api/postmicroblock.rs:252:9: replace StacksHttpRequest::new_post_microblock -> StacksHttpRequest with Default::default()
stackslib/src/net/api/postmicroblock.rs:266:9: replace StacksHttpResponse::decode_stacks_microblock_response -> Result<BlockHeaderHash, NetError> with Ok(Default::default())
stackslib/src/net/api/poststackerdbchunk.rs:77:9: replace <impl HttpRequest for RPCPostStackerDBChunkRequestHandler>::path_regex -> Regex with Default::default()
stackslib/src/net/api/poststackerdbchunk.rs:93:9: replace <impl HttpRequest for RPCPostStackerDBChunkRequestHandler>::try_parse_request -> Result<HttpRequestContents, Error> with Ok(Default::default())
stackslib/src/net/api/poststackerdbchunk.rs:159:9: replace <impl RPCRequestHandler for RPCPostStackerDBChunkRequestHandler>::try_handle_request -> Result<(HttpResponsePreamble, HttpResponseContents), NetError> with Ok((Default::default(), Default::default()))
stackslib/src/net/api/poststackerdbchunk.rs:299:9: replace <impl HttpResponse for RPCPostStackerDBChunkRequestHandler>::try_parse_response -> Result<HttpResponsePayload, Error> with Ok(Default::default())
stackslib/src/net/api/poststackerdbchunk.rs:313:9: replace StacksHttpRequest::new_post_stackerdb_chunk -> StacksHttpRequest with Default::default()
stackslib/src/net/api/poststackerdbchunk.rs:338:9: replace StacksHttpResponse::decode_stackerdb_chunk_ack -> Result<StackerDBChunkAckData, NetError> with Ok(Default::default())
stackslib/src/net/api/posttransaction.rs:71:9: replace RPCPostTransactionRequestHandler::parse_posttransaction_octets -> Result<StacksTransaction, Error> with Ok(Default::default())
stackslib/src/net/api/posttransaction.rs:85:9: replace RPCPostTransactionRequestHandler::parse_posttransaction_json -> Result<(StacksTransaction, Option<Attachment>), Error> with Ok((Default::default(), None))
stackslib/src/net/api/posttransaction.rs:85:9: replace RPCPostTransactionRequestHandler::parse_posttransaction_json -> Result<(StacksTransaction, Option<Attachment>), Error> with Ok((Default::default(), Some(Default::default())))
stackslib/src/net/api/posttransaction.rs:132:9: replace <impl HttpRequest for RPCPostTransactionRequestHandler>::try_parse_request -> Result<HttpRequestContents, Error> with Ok(Default::default())
stackslib/src/net/api/posttransaction.rs:120:9: replace <impl HttpRequest for RPCPostTransactionRequestHandler>::path_regex -> Regex with Default::default()
stackslib/src/net/api/posttransaction.rs:188:9: replace <impl RPCRequestHandler for RPCPostTransactionRequestHandler>::try_handle_request -> Result<(HttpResponsePreamble, HttpResponseContents), NetError> with Ok((Default::default(), Default::default()))
stackslib/src/net/api/posttransaction.rs:297:9: replace <impl HttpResponse for RPCPostTransactionRequestHandler>::try_parse_response -> Result<HttpResponsePayload, Error> with Ok(Default::default())
stackslib/src/net/api/posttransaction.rs:305:9: replace StacksHttpRequest::new_post_transaction -> StacksHttpRequest with Default::default()
stackslib/src/net/api/posttransaction.rs:320:9: replace StacksHttpRequest::new_post_transaction_with_attachment -> StacksHttpRequest with Default::default()
stackslib/src/net/api/posttransaction.rs:360:9: replace StacksHttpResponse::decode_txid -> Result<Txid, NetError> with Ok(Default::default())
stackslib/src/net/atlas/db.rs:131:9: replace <impl FromRow for Attachment>::from_row -> Result<Attachment, db_error> with Ok(Default::default())
stackslib/src/net/atlas/db.rs:138:9: replace <impl FromRow for AttachmentInstance>::from_row -> Result<AttachmentInstance, db_error> with Ok(Default::default())
stackslib/src/net/atlas/db.rs:172:9: replace <impl ToSql for AttachmentInstanceStatus>::to_sql -> Result<ToSqlOutput<'_>, rusqlite::Error> with Ok(Default::default())
stackslib/src/net/atlas/db.rs:182:9: replace <impl FromSql for AttachmentInstanceStatus>::column_result -> Result<Self, FromSqlError> with Ok(Default::default())
stackslib/src/net/atlas/db.rs:282:9: replace AtlasDB::connect -> Result<AtlasDB, db_error> with Ok(Default::default())
stackslib/src/net/atlas/db.rs:310:9: replace AtlasDB::check_instantiate_db -> Result<AtlasDB, db_error> with Ok(Default::default())
stackslib/src/net/atlas/db.rs:447:9: replace AtlasDB::conn -> &Connection with &Default::default()
stackslib/src/net/atlas/db.rs:451:9: replace AtlasDB::tx_begin -> Result<Transaction<'a>, db_error> with Ok(Default::default())
stackslib/src/net/atlas/db.rs:604:9: replace AtlasDB::find_uninstantiated_attachment -> Result<Option<Attachment>, db_error> with Ok(Some(Default::default()))
stackslib/src/net/atlas/db.rs:631:9: replace AtlasDB::find_unresolved_attachment_instances -> Result<Vec<AttachmentInstance>, db_error> with Ok(vec![Default::default()])
stackslib/src/net/atlas/db.rs:640:9: replace AtlasDB::find_all_attachment_instances -> Result<Vec<AttachmentInstance>, db_error> with Ok(vec![Default::default()])
stackslib/src/net/atlas/db.rs:648:9: replace AtlasDB::find_attachment -> Result<Option<Attachment>, db_error> with Ok(Some(Default::default()))
stackslib/src/net/atlas/db.rs:682:9: replace AtlasDB::queued_attachments -> Result<Vec<AttachmentInstance>, db_error> with Ok(vec![Default::default()])
stackslib/src/net/atlas/download.rs:81:9: replace AttachmentsDownloader::pop_next_ready_batch -> Option<AttachmentsBatch> with Some(Default::default())
stackslib/src/net/atlas/download.rs:101:9: replace AttachmentsDownloader::run -> Result<(Vec<(AttachmentInstance, Attachment)>, Vec<usize>), net_error> with Ok((vec![(Default::default(), Default::default())], vec![]))
stackslib/src/net/atlas/download.rs:101:9: replace AttachmentsDownloader::run -> Result<(Vec<(AttachmentInstance, Attachment)>, Vec<usize>), net_error> with Ok((vec![(Default::default(), Default::default())], vec![0]))
stackslib/src/net/atlas/download.rs:101:9: replace AttachmentsDownloader::run -> Result<(Vec<(AttachmentInstance, Attachment)>, Vec<usize>), net_error> with Ok((vec![(Default::default(), Default::default())], vec![1]))
stackslib/src/net/atlas/download.rs:241:9: replace AttachmentsDownloader::check_attachment_instances -> Result<Vec<(AttachmentInstance, Attachment)>, DBError> with Ok(vec![(Default::default(), Default::default())])
stackslib/src/net/atlas/download.rs:302:9: replace AttachmentsDownloader::check_queued_attachment_instances -> Result<Vec<(AttachmentInstance, Attachment)>, DBError> with Ok(vec![(Default::default(), Default::default())])
stackslib/src/net/atlas/download.rs:322:9: replace AttachmentsDownloader::enqueue_initial_attachments -> Result<Vec<(AttachmentInstance, Attachment)>, DBError> with Ok(vec![(Default::default(), Default::default())])
stackslib/src/net/atlas/download.rs:376:9: replace AttachmentsBatchStateContext::get_peers_urls -> Vec<UrlString> with vec![Default::default()]
stackslib/src/net/atlas/download.rs:382:9: replace AttachmentsBatchStateContext::get_prioritized_attachments_inventory_requests -> BinaryHeap<AttachmentsInventoryRequest> with BinaryHeap::from_iter([Default::default()])
stackslib/src/net/atlas/download.rs:408:9: replace AttachmentsBatchStateContext::get_prioritized_attachments_requests -> BinaryHeap<AttachmentRequest> with BinaryHeap::from_iter([Default::default()])
stackslib/src/net/atlas/download.rs:494:9: replace AttachmentsBatchStateContext::extend_with_dns_lookups -> AttachmentsBatchStateContext with Default::default()
stackslib/src/net/atlas/download.rs:504:9: replace AttachmentsBatchStateContext::extend_with_inventories -> AttachmentsBatchStateContext with Default::default()
stackslib/src/net/atlas/download.rs:548:9: replace AttachmentsBatchStateContext::extend_with_attachments -> AttachmentsBatchStateContext with Default::default()
stackslib/src/net/atlas/download.rs:611:9: replace AttachmentsBatchStateMachine::try_proceed -> AttachmentsBatchStateMachine with Default::default()
stackslib/src/net/atlas/download.rs:700:9: replace BatchedDNSLookupsState::try_proceed -> BatchedDNSLookupsState with Default::default()
stackslib/src/net/atlas/download.rs:844:9: replace BatchedRequestsState<T>::try_proceed -> BatchedRequestsState<T> with BatchedRequestsState::new()
stackslib/src/net/atlas/download.rs:844:9: replace BatchedRequestsState<T>::try_proceed -> BatchedRequestsState<T> with BatchedRequestsState::from_iter([Default::default()])
stackslib/src/net/atlas/download.rs:844:9: replace BatchedRequestsState<T>::try_proceed -> BatchedRequestsState<T> with BatchedRequestsState::new(Default::default())
stackslib/src/net/atlas/download.rs:844:9: replace BatchedRequestsState<T>::try_proceed -> BatchedRequestsState<T> with BatchedRequestsState::from(Default::default())
stackslib/src/net/atlas/download.rs:995:9: replace BatchedRequestsResult<T>::empty -> BatchedRequestsResult<T> with BatchedRequestsResult::new()
stackslib/src/net/atlas/download.rs:995:9: replace BatchedRequestsResult<T>::empty -> BatchedRequestsResult<T> with BatchedRequestsResult::from_iter([Default::default()])
stackslib/src/net/atlas/download.rs:995:9: replace BatchedRequestsResult<T>::empty -> BatchedRequestsResult<T> with BatchedRequestsResult::from(Default::default())
stackslib/src/net/atlas/download.rs:1026:9: replace AttachmentsInventoryRequest::key -> (QualifiedContractIdentifier, Vec<u32>, StacksBlockId) with (Default::default(), vec![], Default::default())
stackslib/src/net/atlas/download.rs:1026:9: replace AttachmentsInventoryRequest::key -> (QualifiedContractIdentifier, Vec<u32>, StacksBlockId) with (Default::default(), vec![0], Default::default())
stackslib/src/net/atlas/download.rs:1026:9: replace AttachmentsInventoryRequest::key -> (QualifiedContractIdentifier, Vec<u32>, StacksBlockId) with (Default::default(), vec![1], Default::default())
stackslib/src/net/atlas/download.rs:1036:9: replace <impl Ord for AttachmentsInventoryRequest>::cmp -> Ordering with Default::default()
stackslib/src/net/atlas/download.rs:1042:9: replace <impl PartialOrd for AttachmentsInventoryRequest>::partial_cmp -> Option<Ordering> with Some(Default::default())
stackslib/src/net/atlas/download.rs:1048:9: replace <impl Requestable for AttachmentsInventoryRequest>::get_url -> &UrlString with &Default::default()
stackslib/src/net/atlas/download.rs:1052:9: replace <impl Requestable for AttachmentsInventoryRequest>::make_request_type -> StacksHttpRequest with Default::default()
stackslib/src/net/atlas/download.rs:1093:9: replace AttachmentRequest::get_most_reliable_source -> (&UrlString, &ReliabilityReport) with (&Default::default(), &Default::default())
stackslib/src/net/atlas/download.rs:1108:9: replace <impl Ord for AttachmentRequest>::cmp -> Ordering with Default::default()
stackslib/src/net/atlas/download.rs:1118:9: replace <impl PartialOrd for AttachmentRequest>::partial_cmp -> Option<Ordering> with Some(Default::default())
stackslib/src/net/atlas/download.rs:1124:9: replace <impl Requestable for AttachmentRequest>::get_url -> &UrlString with &Default::default()
stackslib/src/net/atlas/download.rs:1129:9: replace <impl Requestable for AttachmentRequest>::make_request_type -> StacksHttpRequest with Default::default()
stackslib/src/net/atlas/download.rs:1267:9: replace <impl Ord for AttachmentsBatch>::cmp -> Ordering with Default::default()
stackslib/src/net/atlas/download.rs:1280:9: replace <impl PartialOrd for AttachmentsBatch>::partial_cmp -> Option<Ordering> with Some(Default::default())
stackslib/src/net/atlas/download.rs:1310:9: replace ReliabilityReport::empty -> ReliabilityReport with Default::default()
stackslib/src/net/atlas/download.rs:1326:9: replace <impl Ord for ReliabilityReport>::cmp -> Ordering with Default::default()
stackslib/src/net/atlas/download.rs:1335:9: replace <impl PartialOrd for ReliabilityReport>::partial_cmp -> Option<Ordering> with Some(Default::default())
stackslib/src/net/http/common.rs:57:9: replace HttpReservedHeader::try_from_str -> Option<HttpReservedHeader> with Some(Default::default())
stackslib/src/net/http/common.rs:87:5: replace parse_bytestream -> Result<T, Error> with Ok(Default::default())
stackslib/src/net/http/common.rs:104:5: replace parse_json -> Result<T, Error> with Ok(Default::default())
stackslib/src/net/http/error.rs:34:5: replace try_parse_error_response -> Result<HttpResponsePayload, Error> with Ok(Default::default())
stackslib/src/net/http/error.rs:126:5: replace http_error_from_code_and_text -> Box<dyn HttpErrorResponse> with Box::new(Default::default())
stackslib/src/net/http/error.rs:153:9: replace HttpBadRequest::new_json -> Self with Default::default()
stackslib/src/net/http/error.rs:167:9: replace <impl HttpErrorResponse for HttpBadRequest>::payload -> HttpResponsePayload with Default::default()
stackslib/src/net/http/error.rs:183:9: replace <impl HttpErrorResponse for HttpBadRequest>::try_parse_response -> Result<HttpResponsePayload, Error> with Ok(Default::default())
stackslib/src/net/http/error.rs:203:9: replace <impl HttpErrorResponse for HttpUnauthorized>::payload -> HttpResponsePayload with Default::default()
stackslib/src/net/http/error.rs:210:9: replace <impl HttpErrorResponse for HttpUnauthorized>::try_parse_response -> Result<HttpResponsePayload, Error> with Ok(Default::default())
stackslib/src/net/http/error.rs:230:9: replace <impl HttpErrorResponse for HttpPaymentRequired>::payload -> HttpResponsePayload with Default::default()
stackslib/src/net/http/error.rs:237:9: replace <impl HttpErrorResponse for HttpPaymentRequired>::try_parse_response -> Result<HttpResponsePayload, Error> with Ok(Default::default())
stackslib/src/net/http/error.rs:257:9: replace <impl HttpErrorResponse for HttpForbidden>::payload -> HttpResponsePayload with Default::default()
stackslib/src/net/http/error.rs:264:9: replace <impl HttpErrorResponse for HttpForbidden>::try_parse_response -> Result<HttpResponsePayload, Error> with Ok(Default::default())
stackslib/src/net/http/error.rs:284:9: replace <impl HttpErrorResponse for HttpNotFound>::payload -> HttpResponsePayload with Default::default()
stackslib/src/net/http/error.rs:291:9: replace <impl HttpErrorResponse for HttpNotFound>::try_parse_response -> Result<HttpResponsePayload, Error> with Ok(Default::default())
stackslib/src/net/http/error.rs:311:9: replace <impl HttpErrorResponse for HttpServerError>::payload -> HttpResponsePayload with Default::default()
stackslib/src/net/http/error.rs:318:9: replace <impl HttpErrorResponse for HttpServerError>::try_parse_response -> Result<HttpResponsePayload, Error> with Ok(Default::default())
stackslib/src/net/http/error.rs:338:9: replace <impl HttpErrorResponse for HttpServiceUnavailable>::payload -> HttpResponsePayload with Default::default()
stackslib/src/net/http/error.rs:345:9: replace <impl HttpErrorResponse for HttpServiceUnavailable>::try_parse_response -> Result<HttpResponsePayload, Error> with Ok(Default::default())
stackslib/src/net/http/error.rs:366:9: replace <impl HttpErrorResponse for HttpError>::payload -> HttpResponsePayload with Default::default()
stackslib/src/net/http/error.rs:373:9: replace <impl HttpErrorResponse for HttpError>::try_parse_response -> Result<HttpResponsePayload, Error> with Ok(Default::default())
stackslib/src/net/http/request.rs:83:9: replace HttpRequestPreamble::with_content_type -> Self with Default::default()
stackslib/src/net/http/request.rs:89:9: replace HttpRequestPreamble::with_content_length -> Self with Default::default()
stackslib/src/net/http/request.rs:100:9: replace HttpRequestPreamble::new_for_peer -> HttpRequestPreamble with Default::default()
stackslib/src/net/http/request.rs:332:9: replace <impl StacksMessageCodec for HttpRequestPreamble>::consensus_deserialize -> Result<HttpRequestPreamble, CodecError> with Ok(Default::default())
stackslib/src/net/http/request.rs:477:9: replace HttpRequestPayload::content_type -> Option<HttpContentType> with Some(Default::default())
stackslib/src/net/http/request.rs:552:9: replace HttpRequestContents::query_string -> Self with Default::default()
stackslib/src/net/http/request.rs:559:9: replace HttpRequestContents::payload_json -> Self with Default::default()
stackslib/src/net/http/request.rs:565:9: replace HttpRequestContents::payload_bytes -> Self with Default::default()
stackslib/src/net/http/request.rs:571:9: replace HttpRequestContents::payload_text -> Self with Default::default()
stackslib/src/net/http/request.rs:577:9: replace HttpRequestContents::payload_stacks -> Self with Default::default()
stackslib/src/net/http/request.rs:583:9: replace HttpRequestContents::path_arg -> Self with Default::default()
stackslib/src/net/http/request.rs:589:9: replace HttpRequestContents::query_arg -> Self with Default::default()
stackslib/src/net/http/request.rs:595:9: replace HttpRequestContents::parsed_data -> Self with Default::default()
stackslib/src/net/http/request.rs:601:9: replace HttpRequestContents::get_path_args -> &HashMap<String, String> with &HashMap::new()
stackslib/src/net/http/request.rs:601:9: replace HttpRequestContents::get_path_args -> &HashMap<String, String> with &HashMap::from_iter([(String::new(), String::new())])
stackslib/src/net/http/request.rs:601:9: replace HttpRequestContents::get_path_args -> &HashMap<String, String> with &HashMap::from_iter([(String::new(), "xyzzy".into())])
stackslib/src/net/http/request.rs:601:9: replace HttpRequestContents::get_path_args -> &HashMap<String, String> with &HashMap::from_iter([("xyzzy".into(), String::new())])
stackslib/src/net/http/request.rs:601:9: replace HttpRequestContents::get_path_args -> &HashMap<String, String> with &HashMap::from_iter([("xyzzy".into(), "xyzzy".into())])
stackslib/src/net/http/request.rs:606:9: replace HttpRequestContents::get_query_args -> &HashMap<String, String> with &HashMap::new()
stackslib/src/net/http/request.rs:606:9: replace HttpRequestContents::get_query_args -> &HashMap<String, String> with &HashMap::from_iter([(String::new(), String::new())])
stackslib/src/net/http/request.rs:606:9: replace HttpRequestContents::get_query_args -> &HashMap<String, String> with &HashMap::from_iter([(String::new(), "xyzzy".into())])
stackslib/src/net/http/request.rs:606:9: replace HttpRequestContents::get_query_args -> &HashMap<String, String> with &HashMap::from_iter([("xyzzy".into(), String::new())])
stackslib/src/net/http/request.rs:606:9: replace HttpRequestContents::get_query_args -> &HashMap<String, String> with &HashMap::from_iter([("xyzzy".into(), "xyzzy".into())])
stackslib/src/net/http/request.rs:611:9: replace HttpRequestContents::get_path_arg -> Option<&String> with Some(&String::new())
stackslib/src/net/http/request.rs:611:9: replace HttpRequestContents::get_path_arg -> Option<&String> with Some(&"xyzzy".into())
stackslib/src/net/http/request.rs:616:9: replace HttpRequestContents::get_query_arg -> Option<&String> with Some(&String::new())
stackslib/src/net/http/request.rs:616:9: replace HttpRequestContents::get_query_arg -> Option<&String> with Some(&"xyzzy".into())
stackslib/src/net/http/request.rs:621:9: replace HttpRequestContents::get_parsed_data -> Option<&serde_json::Value> with Some(&Default::default())
stackslib/src/net/http/request.rs:636:9: replace HttpRequestContents::content_type -> Option<HttpContentType> with Some(Default::default())
stackslib/src/net/http/request.rs:646:9: replace HttpRequestContents::get_payload -> &HttpRequestPayload with &Default::default()
stackslib/src/net/http/request.rs:651:9: replace HttpRequestContents::into_payload -> HttpRequestPayload with Default::default()
stackslib/src/net/http/request.rs:675:9: replace <impl HttpRequestClone for T>::clone_box -> Box<dyn HttpRequest> with Box::new(Default::default())
stackslib/src/net/http/request.rs:681:9: replace <impl Clone for Box<dyn HttpRequest>>::clone -> Box<dyn HttpRequest> with Box::new(Default::default())
stackslib/src/net/http/response.rs:86:9: replace HttpResponseContents::from_stream -> HttpResponseContents with Default::default()
stackslib/src/net/http/response.rs:95:9: replace HttpResponseContents::from_ram -> HttpResponseContents with Default::default()
stackslib/src/net/http/response.rs:103:9: replace HttpResponseContents::try_from_json -> Result<HttpResponseContents, Error> with Ok(Default::default())
stackslib/src/net/http/response.rs:147:9: replace <impl From for HttpResponseContents>::from -> Self with Default::default()
stackslib/src/net/http/response.rs:178:9: replace HttpResponsePreamble::from_http_request_preamble -> HttpResponsePreamble with Default::default()
stackslib/src/net/http/response.rs:189:9: replace HttpResponsePreamble::ok_json -> HttpResponsePreamble with Default::default()
stackslib/src/net/http/response.rs:200:9: replace HttpResponsePreamble::raw_ok_json -> HttpResponsePreamble with Default::default()
stackslib/src/net/http/response.rs:211:9: replace HttpResponsePreamble::error_bytes -> Self with Default::default()
stackslib/src/net/http/response.rs:222:9: replace HttpResponsePreamble::error_json -> Self with Default::default()
stackslib/src/net/http/response.rs:233:9: replace HttpResponsePreamble::error_text -> Self with Default::default()
stackslib/src/net/http/response.rs:455:9: replace <impl StacksMessageCodec for HttpResponsePreamble>::consensus_deserialize -> Result<HttpResponsePreamble, CodecError> with Ok(Default::default())
stackslib/src/net/http/response.rs:609:9: replace <impl TryFrom for HttpResponseContents>::try_from -> Result<HttpResponseContents, Error> with Ok(Default::default())
stackslib/src/net/http/response.rs:625:9: replace HttpResponsePayload::try_from_json -> Result<HttpResponsePayload, Error> with Ok(Default::default())
stackslib/src/net/http/response.rs:741:9: replace <impl HttpResponseClone for T>::clone_box -> Box<dyn HttpResponse> with Box::new(Default::default())
stackslib/src/net/http/response.rs:747:9: replace <impl Clone for Box<dyn HttpResponse>>::clone -> Box<dyn HttpResponse> with Box::new(Default::default())
stackslib/src/net/neighbors/comms.rs:94:9: replace NeighborComms::neighbor_handshake -> Result<ReplyHandleP2P, net_error> with Ok(Default::default())
stackslib/src/net/neighbors/comms.rs:140:9: replace NeighborComms::neighbor_connect_and_handshake -> Result<Option<ReplyHandleP2P>, net_error> with Ok(Some(Default::default()))
stackslib/src/net/neighbors/comms.rs:232:9: replace NeighborComms::neighbor_session_begin_only -> Result<Option<ReplyHandleP2P>, net_error> with Ok(Some(Default::default()))
stackslib/src/net/neighbors/comms.rs:317:9: replace NeighborComms::neighbor_send_only -> Result<ReplyHandleP2P, net_error> with Ok(Default::default())
stackslib/src/net/neighbors/comms.rs:346:9: replace NeighborComms::neighbor_try_recv -> Result<StacksMessage, Result<ReplyHandleP2P, net_error>> with Ok(Default::default())
stackslib/src/net/neighbors/comms.rs:382:9: replace NeighborComms::poll_next_reply -> Result<Option<StacksMessage>, net_error> with Ok(Some(Default::default()))
stackslib/src/net/neighbors/comms.rs:483:9: replace <impl NeighborComms for PeerNetworkComms>::get_pinned_connections -> &HashSet<usize> with &HashSet::new()
stackslib/src/net/neighbors/comms.rs:483:9: replace <impl NeighborComms for PeerNetworkComms>::get_pinned_connections -> &HashSet<usize> with &HashSet::from_iter([0])
stackslib/src/net/neighbors/comms.rs:483:9: replace <impl NeighborComms for PeerNetworkComms>::get_pinned_connections -> &HashSet<usize> with &HashSet::from_iter([1])
stackslib/src/net/neighbors/comms.rs:523:9: replace <impl NeighborComms for PeerNetworkComms>::collect_replies -> Vec<(NeighborAddress, StacksMessage)> with vec![(Default::default(), Default::default())]
stackslib/src/net/neighbors/comms.rs:545:9: replace <impl NeighborComms for PeerNetworkComms>::take_dead_neighbors -> HashSet<NeighborKey> with HashSet::from_iter([Default::default()])
stackslib/src/net/neighbors/comms.rs:550:9: replace <impl NeighborComms for PeerNetworkComms>::take_broken_neighbors -> HashSet<NeighborKey> with HashSet::from_iter([Default::default()])
stackslib/src/net/neighbors/comms.rs:563:9: replace <impl ToNeighborKey for NeighborKey>::to_neighbor_key -> NeighborKey with Default::default()
stackslib/src/net/neighbors/comms.rs:574:9: replace <impl ToNeighborKey for NeighborAddress>::to_neighbor_key -> NeighborKey with Default::default()
stackslib/src/net/neighbors/comms.rs:602:9: replace <impl Iterator for NeighborCommsMessageIterator<'_, NS>>::next -> Option<Self::Item> with Some(Default::default())
stackslib/src/net/neighbors/comms.rs:673:9: replace NeighborCommsRequest::new_replies -> NeighborCommsMessageIterator<NS> with NeighborCommsMessageIterator::new()
stackslib/src/net/neighbors/comms.rs:673:9: replace NeighborCommsRequest::new_replies -> NeighborCommsMessageIterator<NS> with NeighborCommsMessageIterator::from_iter([Default::default()])
stackslib/src/net/neighbors/comms.rs:673:9: replace NeighborCommsRequest::new_replies -> NeighborCommsMessageIterator<NS> with NeighborCommsMessageIterator::new(Default::default())
stackslib/src/net/neighbors/comms.rs:673:9: replace NeighborCommsRequest::new_replies -> NeighborCommsMessageIterator<NS> with NeighborCommsMessageIterator::from(Default::default())
stackslib/src/net/neighbors/db.rs:62:9: replace NeighborReplacements::get_neighbor -> Option<&Neighbor> with Some(&Default::default())
stackslib/src/net/neighbors/db.rs:66:9: replace NeighborReplacements::iter_slots -> impl Iterator<Item =(&NeighborAddress, &u32)> with ::std::iter::once((&Default::default(), &0))
stackslib/src/net/neighbors/db.rs:66:9: replace NeighborReplacements::iter_slots -> impl Iterator<Item =(&NeighborAddress, &u32)> with ::std::iter::once((&Default::default(), &1))
stackslib/src/net/neighbors/db.rs:187:9: replace NeighborWalkDB::get_next_walk_neighbor -> Result<Neighbor, net_error> with Ok(Default::default())
stackslib/src/net/neighbors/db.rs:249:9: replace <impl NeighborWalkDB for PeerDBNeighborWalk>::get_fresh_random_neighbors -> Result<Vec<Neighbor>, net_error> with Ok(vec![Default::default()])
stackslib/src/net/neighbors/db.rs:278:9: replace <impl NeighborWalkDB for PeerDBNeighborWalk>::lookup_stale_neighbors -> Result<(HashMap<NeighborAddress, Neighbor>, Vec<NeighborAddress>), net_error> with Ok((HashMap::new(), vec![Default::default()]))
stackslib/src/net/neighbors/db.rs:278:9: replace <impl NeighborWalkDB for PeerDBNeighborWalk>::lookup_stale_neighbors -> Result<(HashMap<NeighborAddress, Neighbor>, Vec<NeighborAddress>), net_error> with Ok((HashMap::from_iter([(Default::default(), Default::default())]), vec![]))
stackslib/src/net/neighbors/db.rs:278:9: replace <impl NeighborWalkDB for PeerDBNeighborWalk>::lookup_stale_neighbors -> Result<(HashMap<NeighborAddress, Neighbor>, Vec<NeighborAddress>), net_error> with Ok((HashMap::from_iter([(Default::default(), Default::default())]), vec![Default::default()]))
stackslib/src/net/neighbors/db.rs:333:9: replace <impl NeighborWalkDB for PeerDBNeighborWalk>::add_or_schedule_replace_neighbor -> Result<(bool, Neighbor), net_error> with Ok((true, Default::default()))
stackslib/src/net/neighbors/db.rs:333:9: replace <impl NeighborWalkDB for PeerDBNeighborWalk>::add_or_schedule_replace_neighbor -> Result<(bool, Neighbor), net_error> with Ok((false, Default::default()))
stackslib/src/net/neighbors/db.rs:390:9: replace <impl NeighborWalkDB for PeerDBNeighborWalk>::get_initial_walk_neighbors -> Result<Vec<Neighbor>, net_error> with Ok(vec![Default::default()])
stackslib/src/net/neighbors/db.rs:474:9: replace <impl NeighborWalkDB for PeerDBNeighborWalk>::neighbor_from_handshake -> Result<Neighbor, net_error> with Ok(Default::default())
stackslib/src/net/neighbors/db.rs:490:9: replace <impl NeighborWalkDB for PeerDBNeighborWalk>::save_neighbor_from_handshake -> Result<Neighbor, net_error> with Ok(Default::default())
stackslib/src/net/neighbors/db.rs:509:9: replace <impl NeighborWalkDB for PeerDBNeighborWalk>::update_neighbor -> Result<Neighbor, net_error> with Ok(Default::default())
stackslib/src/net/neighbors/neighbor.rs:35:9: replace Neighbor::empty -> Neighbor with Default::default()
stackslib/src/net/neighbors/neighbor.rs:88:9: replace Neighbor::load_by_address -> Result<Option<Neighbor>, net_error> with Ok(Some(Default::default()))
stackslib/src/net/neighbors/walk.rs:271:9: replace NeighborWalk<DB, NC>::instantiate_walk -> Result<NeighborWalk<DB, NC>, net_error> with Ok(Default::default())
stackslib/src/net/neighbors/walk.rs:301:9: replace NeighborWalk<DB, NC>::instantiate_walk_to_always_allowed -> Result<NeighborWalk<DB, NC>, net_error> with Ok(Default::default())
stackslib/src/net/neighbors/walk.rs:336:9: replace NeighborWalk<DB, NC>::instantiate_walk_from_inbound -> Result<NeighborWalk<DB, NC>, net_error> with Ok(Default::default())
stackslib/src/net/neighbors/walk.rs:414:9: replace NeighborWalk<DB, NC>::instantiate_walk_from_pingback -> Result<NeighborWalk<DB, NC>, net_error> with Ok(Default::default())
stackslib/src/net/neighbors/walk.rs:479:9: replace NeighborWalk<DB, NC>::reset -> NeighborWalkResult with Default::default()
stackslib/src/net/neighbors/walk.rs:564:9: replace NeighborWalk<DB, NC>::get_pinned_connections -> &HashSet<usize> with &HashSet::new()
stackslib/src/net/neighbors/walk.rs:564:9: replace NeighborWalk<DB, NC>::get_pinned_connections -> &HashSet<usize> with &HashSet::from_iter([0])
stackslib/src/net/neighbors/walk.rs:564:9: replace NeighborWalk<DB, NC>::get_pinned_connections -> &HashSet<usize> with &HashSet::from_iter([1])
stackslib/src/net/neighbors/walk.rs:570:9: replace NeighborWalk<DB, NC>::filter_sensible_neighbors -> Vec<NeighborAddress> with vec![Default::default()]
stackslib/src/net/neighbors/walk.rs:663:9: replace NeighborWalk<DB, NC>::handle_handshake_accept -> Result<Neighbor, net_error> with Ok(Default::default())
stackslib/src/net/neighbors/walk.rs:1361:9: replace NeighborWalk<DB, NC>::pick_random_neighbor -> Option<Neighbor> with Some(Default::default())
stackslib/src/net/neighbors/walk.rs:1755:9: replace NeighborWalk<DB, NC>::ping_existing_neighbors_try_finish -> Result<Option<NeighborWalkResult>, net_error> with Ok(Some(Default::default()))
stackslib/src/net/neighbors/walk.rs:1854:9: replace NeighborWalk<DB, NC>::run -> Result<Option<NeighborWalkResult>, net_error> with Ok(Some(Default::default()))
stackslib/src/net/stackerdb/config.rs:164:9: replace StackerDBConfig::eval_signer_slots -> Result<Vec<(StacksAddress, u32)>, net_error> with Ok(vec![(Default::default(), 0)])
stackslib/src/net/stackerdb/config.rs:164:9: replace StackerDBConfig::eval_signer_slots -> Result<Vec<(StacksAddress, u32)>, net_error> with Ok(vec![(Default::default(), 1)])
stackslib/src/net/stackerdb/config.rs:264:9: replace StackerDBConfig::eval_config -> Result<StackerDBConfig, net_error> with Ok(Default::default())
stackslib/src/net/stackerdb/config.rs:447:9: replace StackerDBConfig::from_smart_contract -> Result<StackerDBConfig, net_error> with Ok(Default::default())
stackslib/src/net/stackerdb/db.rs:99:9: replace <impl FromRow for SlotMetadata>::from_row -> Result<SlotMetadata, db_error> with Ok(Default::default())
stackslib/src/net/stackerdb/db.rs:119:9: replace <impl FromRow for SlotValidation>::from_row -> Result<SlotValidation, db_error> with Ok(Default::default())
stackslib/src/net/stackerdb/db.rs:137:9: replace <impl FromRow for StackerDBChunkData>::from_row -> Result<StackerDBChunkData, db_error> with Ok(Default::default())
stackslib/src/net/stackerdb/db.rs:171:5: replace inner_get_slot_metadata -> Result<Option<SlotMetadata>, net_error> with Ok(Some(Default::default()))
stackslib/src/net/stackerdb/db.rs:185:5: replace inner_get_slot_validation -> Result<Option<SlotValidation>, net_error> with Ok(Some(Default::default()))
stackslib/src/net/stackerdb/db.rs:198:9: replace StackerDBTx<'a>::conn -> &DBConn with &Default::default()
stackslib/src/net/stackerdb/db.rs:218:9: replace StackerDBTx<'a>::get_stackerdb_contract_ids -> Result<Vec<QualifiedContractIdentifier>, net_error> with Ok(vec![Default::default()])
stackslib/src/net/stackerdb/db.rs:351:9: replace StackerDBTx<'a>::get_slot_metadata -> Result<Option<SlotMetadata>, net_error> with Ok(Some(Default::default()))
stackslib/src/net/stackerdb/db.rs:360:9: replace StackerDBTx<'a>::get_slot_validation -> Result<Option<SlotValidation>, net_error> with Ok(Some(Default::default()))
stackslib/src/net/stackerdb/db.rs:434:9: replace StackerDBs::instantiate -> Result<StackerDBs, net_error> with Ok(Default::default())
stackslib/src/net/stackerdb/db.rs:486:9: replace StackerDBs::connect -> Result<StackerDBs, net_error> with Ok(Default::default())
stackslib/src/net/stackerdb/db.rs:496:9: replace StackerDBs::reopen -> Result<StackerDBs, net_error> with Ok(Default::default())
stackslib/src/net/stackerdb/db.rs:505:9: replace StackerDBs::tx_begin -> Result<StackerDBTx<'a>, db_error> with Ok(Default::default())
stackslib/src/net/stackerdb/db.rs:521:9: replace StackerDBs::get_stackerdb_contract_ids -> Result<Vec<QualifiedContractIdentifier>, net_error> with Ok(vec![Default::default()])
stackslib/src/net/stackerdb/db.rs:534:9: replace StackerDBs::get_slot_signer -> Result<Option<StacksAddress>, net_error> with Ok(Some(Default::default()))
stackslib/src/net/stackerdb/db.rs:546:9: replace StackerDBs::get_slot_metadata -> Result<Option<SlotMetadata>, net_error> with Ok(Some(Default::default()))
stackslib/src/net/stackerdb/db.rs:555:9: replace StackerDBs::get_db_slot_metadata -> Result<Vec<SlotMetadata>, net_error> with Ok(vec![Default::default()])
stackslib/src/net/stackerdb/db.rs:567:9: replace StackerDBs::get_slot_validation -> Result<Option<SlotValidation>, net_error> with Ok(Some(Default::default()))
stackslib/src/net/stackerdb/db.rs:619:9: replace StackerDBs::get_chunk -> Result<Option<StackerDBChunkData>, net_error> with Ok(Some(Default::default()))
stackslib/src/net/stackerdb/sync.rs:90:9: replace StackerDBSync<NC>::find_new_replicas -> Result<HashSet<NeighborAddress>, net_error> with Ok(HashSet::from_iter([Default::default()]))
stackslib/src/net/stackerdb/sync.rs:120:9: replace StackerDBSync<NC>::reset -> Result<StackerDBSyncResult, net_error> with Ok(Default::default())
stackslib/src/net/stackerdb/sync.rs:163:9: replace StackerDBSync<NC>::get_pinned_connections -> &HashSet<usize> with &HashSet::new()
stackslib/src/net/stackerdb/sync.rs:163:9: replace StackerDBSync<NC>::get_pinned_connections -> &HashSet<usize> with &HashSet::from_iter([0])
stackslib/src/net/stackerdb/sync.rs:163:9: replace StackerDBSync<NC>::get_pinned_connections -> &HashSet<usize> with &HashSet::from_iter([1])
stackslib/src/net/stackerdb/sync.rs:168:9: replace StackerDBSync<NC>::make_getchunkinv -> StacksMessageType with Default::default()
stackslib/src/net/stackerdb/sync.rs:184:9: replace StackerDBSync<NC>::make_chunk_request_schedule -> Result<Vec<(StackerDBGetChunkData, Vec<NeighborAddress>)>, net_error> with Ok(vec![(Default::default(), vec![])])
stackslib/src/net/stackerdb/sync.rs:184:9: replace StackerDBSync<NC>::make_chunk_request_schedule -> Result<Vec<(StackerDBGetChunkData, Vec<NeighborAddress>)>, net_error> with Ok(vec![(Default::default(), vec![Default::default()])])
stackslib/src/net/stackerdb/sync.rs:294:9: replace StackerDBSync<NC>::make_chunk_push_schedule -> Result<Vec<(StackerDBPushChunkData, Vec<NeighborAddress>)>, net_error> with Ok(vec![(Default::default(), vec![])])
stackslib/src/net/stackerdb/sync.rs:294:9: replace StackerDBSync<NC>::make_chunk_push_schedule -> Result<Vec<(StackerDBPushChunkData, Vec<NeighborAddress>)>, net_error> with Ok(vec![(Default::default(), vec![Default::default()])])
stackslib/src/net/stackerdb/sync.rs:1076:9: replace StackerDBSync<NC>::run -> Result<Option<StackerDBSyncResult>, net_error> with Ok(Some(Default::default()))
stackslib/src/chainstate/burn/db/mod.rs:56:9: replace <impl FromColumn for VRFPublicKey>::from_column -> Result<VRFPublicKey, db_error> with Ok(Default::default())
stackslib/src/chainstate/burn/db/mod.rs:66:9: replace <impl FromColumn for StacksAddress>::from_column -> Result<Self, db_error> with Ok(Default::default())
stackslib/src/chainstate/burn/db/mod.rs:76:9: replace <impl FromColumn for PoxAddress>::from_column -> Result<Self, db_error> with Ok(Default::default())
stackslib/src/chainstate/burn/db/mod.rs:86:9: replace <impl FromColumn for BitcoinAddress>::from_column -> Result<Self, db_error> with Ok(Default::default())
stackslib/src/chainstate/burn/distribution.rs:70:9: replace LinkedCommitIdentifier::spent_txid -> &Txid with &Default::default()
stackslib/src/chainstate/burn/distribution.rs:91:9: replace LinkedCommitIdentifier::txid -> &Txid with &Default::default()
stackslib/src/chainstate/burn/distribution.rs:161:9: replace BurnSamplePoint::make_min_median_distribution -> Vec<BurnSamplePoint> with vec![Default::default()]
stackslib/src/chainstate/burn/operations/mod.rs:155:9: replace <impl Error for Error>::cause -> Option<&dyn error::Error> with Some(&Default::default())
stackslib/src/chainstate/burn/operations/mod.rs:164:9: replace <impl From for Error>::from -> Error with Default::default()
stackslib/src/chainstate/burn/operations/mod.rs:326:9: replace BlockstackOperationType::opcode -> Opcodes with Default::default()
stackslib/src/chainstate/burn/operations/mod.rs:338:9: replace BlockstackOperationType::txid -> Txid with Default::default()
stackslib/src/chainstate/burn/operations/mod.rs:342:9: replace BlockstackOperationType::txid_ref -> &Txid with &Default::default()
stackslib/src/chainstate/burn/operations/mod.rs:378:9: replace BlockstackOperationType::burn_header_hash -> BurnchainHeaderHash with Default::default()
stackslib/src/chainstate/burn/sortition.rs:49:9: replace BlockSnapshot::empty -> BlockSnapshot with Default::default()
stackslib/src/chainstate/burn/sortition.rs:82:9: replace BlockSnapshot::initial -> BlockSnapshot with Default::default()
stackslib/src/chainstate/burn/sortition.rs:117:9: replace BlockSnapshot::get_canonical_stacks_block_id -> StacksBlockId with Default::default()
stackslib/src/chainstate/burn/sortition.rs:168:9: replace BlockSnapshot::select_winning_block -> Result<Option<LeaderBlockCommitOp>, db_error> with Ok(Some(Default::default()))
stackslib/src/chainstate/burn/sortition.rs:216:9: replace BlockSnapshot::make_snapshot_no_sortition -> Result<BlockSnapshot, db_error> with Ok(Default::default())
stackslib/src/chainstate/burn/sortition.rs:287:9: replace BlockSnapshot::make_snapshot -> Result<BlockSnapshot, db_error> with Ok(Default::default())
stackslib/src/chainstate/coordinator/comm.rs:215:9: replace CoordinatorCommunication::instantiate -> (CoordinatorReceivers, CoordinatorChannels) with (Default::default(), Default::default())
stackslib/src/chainstate/stacks/address.rs:98:9: replace PoxAddress::hashmode -> Option<AddressHashMode> with Some(Default::default())
stackslib/src/chainstate/stacks/address.rs:117:9: replace PoxAddress::hash160 -> Hash160 with Default::default()
stackslib/src/chainstate/stacks/address.rs:140:9: replace PoxAddress::try_standard_from_pox_tuple -> Option<PoxAddress> with Some(Default::default())
stackslib/src/chainstate/stacks/address.rs:170:9: replace PoxAddress::try_addr20_from_pox_tuple -> Option<PoxAddress> with Some(Default::default())
stackslib/src/chainstate/stacks/address.rs:190:9: replace PoxAddress::try_addr32_from_pox_tuple -> Option<PoxAddress> with Some(Default::default())
stackslib/src/chainstate/stacks/address.rs:206:9: replace PoxAddress::try_from_pox_tuple -> Option<PoxAddress> with Some(Default::default())
stackslib/src/chainstate/stacks/address.rs:262:9: replace PoxAddress::from_db_string -> Option<PoxAddress> with Some(Default::default())
stackslib/src/chainstate/stacks/address.rs:296:9: replace PoxAddress::standard_burn_address -> PoxAddress with Default::default()
stackslib/src/chainstate/stacks/address.rs:306:9: replace PoxAddress::as_clarity_tuple -> Option<TupleData> with Some(Default::default())
stackslib/src/chainstate/stacks/address.rs:361:9: replace PoxAddress::coerce_hash_mode -> PoxAddress with Default::default()
stackslib/src/chainstate/stacks/address.rs:373:9: replace PoxAddress::try_into_stacks_address -> Option<StacksAddress> with Some(Default::default())
stackslib/src/chainstate/stacks/address.rs:436:9: replace PoxAddress::try_from_bitcoin_output -> Option<PoxAddress> with Some(Default::default())
stackslib/src/chainstate/stacks/address.rs:477:9: replace PoxAddress::from_legacy -> PoxAddress with Default::default()
stackslib/src/chainstate/stacks/address.rs:497:9: replace <impl StacksAddressExtensions for StacksAddress>::from_legacy_bitcoin_address -> StacksAddress with Default::default()
stackslib/src/chainstate/stacks/auth.rs:72:9: replace <impl StacksMessageCodec for TransactionAuthField>::consensus_deserialize -> Result<TransactionAuthField, codec_error> with Ok(Default::default())
stackslib/src/chainstate/stacks/auth.rs:126:9: replace <impl StacksMessageCodec for MultisigSpendingCondition>::consensus_deserialize -> Result<MultisigSpendingCondition, codec_error> with Ok(Default::default())
stackslib/src/chainstate/stacks/auth.rs:220:9: replace MultisigSpendingCondition::pop_auth_field -> Option<TransactionAuthField> with Some(Default::default())
stackslib/src/chainstate/stacks/auth.rs:224:9: replace MultisigSpendingCondition::address_mainnet -> StacksAddress with Default::default()
stackslib/src/chainstate/stacks/auth.rs:231:9: replace MultisigSpendingCondition::address_testnet -> StacksAddress with Default::default()
stackslib/src/chainstate/stacks/auth.rs:245:9: replace MultisigSpendingCondition::verify -> Result<Txid, net_error> with Ok(Default::default())
stackslib/src/chainstate/stacks/auth.rs:331:9: replace <impl StacksMessageCodec for SinglesigSpendingCondition>::consensus_deserialize -> Result<SinglesigSpendingCondition, codec_error> with Ok(Default::default())
stackslib/src/chainstate/stacks/auth.rs:378:9: replace SinglesigSpendingCondition::pop_signature -> Option<TransactionAuthField> with Some(Default::default())
stackslib/src/chainstate/stacks/auth.rs:392:9: replace SinglesigSpendingCondition::address_mainnet -> StacksAddress with Default::default()
stackslib/src/chainstate/stacks/auth.rs:403:9: replace SinglesigSpendingCondition::address_testnet -> StacksAddress with Default::default()
stackslib/src/chainstate/stacks/auth.rs:422:9: replace SinglesigSpendingCondition::verify -> Result<Txid, net_error> with Ok(Default::default())
stackslib/src/chainstate/stacks/auth.rs:472:9: replace <impl StacksMessageCodec for TransactionSpendingCondition>::consensus_deserialize -> Result<TransactionSpendingCondition, codec_error> with Ok(Default::default())
stackslib/src/chainstate/stacks/auth.rs:497:9: replace TransactionSpendingCondition::new_singlesig_p2pkh -> Option<TransactionSpendingCondition> with Some(Default::default())
stackslib/src/chainstate/stacks/auth.rs:518:9: replace TransactionSpendingCondition::new_singlesig_p2wpkh -> Option<TransactionSpendingCondition> with Some(Default::default())
stackslib/src/chainstate/stacks/auth.rs:541:9: replace TransactionSpendingCondition::new_multisig_p2sh -> Option<TransactionSpendingCondition> with Some(Default::default())
stackslib/src/chainstate/stacks/auth.rs:564:9: replace TransactionSpendingCondition::new_multisig_p2wsh -> Option<TransactionSpendingCondition> with Some(Default::default())
stackslib/src/chainstate/stacks/auth.rs:587:9: replace TransactionSpendingCondition::new_initial_sighash -> TransactionSpendingCondition with Default::default()
stackslib/src/chainstate/stacks/auth.rs:674:9: replace TransactionSpendingCondition::address_mainnet -> StacksAddress with Default::default()
stackslib/src/chainstate/stacks/auth.rs:682:9: replace TransactionSpendingCondition::address_testnet -> StacksAddress with Default::default()
stackslib/src/chainstate/stacks/auth.rs:690:9: replace TransactionSpendingCondition::get_address -> StacksAddress with Default::default()
stackslib/src/chainstate/stacks/auth.rs:725:9: replace TransactionSpendingCondition::make_sighash_presign -> Txid with Default::default()
stackslib/src/chainstate/stacks/auth.rs:748:9: replace TransactionSpendingCondition::make_sighash_postsign -> Txid with Default::default()
stackslib/src/chainstate/stacks/auth.rs:779:9: replace TransactionSpendingCondition::next_signature -> Result<(MessageSignature, Txid), net_error> with Ok((Default::default(), Default::default()))
stackslib/src/chainstate/stacks/auth.rs:810:9: replace TransactionSpendingCondition::next_verification -> Result<(StacksPublicKey, Txid), net_error> with Ok((Default::default(), Default::default()))
stackslib/src/chainstate/stacks/auth.rs:838:9: replace TransactionSpendingCondition::verify -> Result<Txid, net_error> with Ok(Default::default())
stackslib/src/chainstate/stacks/auth.rs:866:9: replace <impl StacksMessageCodec for TransactionAuth>::consensus_deserialize -> Result<TransactionAuth, codec_error> with Ok(Default::default())
stackslib/src/chainstate/stacks/auth.rs:891:9: replace TransactionAuth::from_p2pkh -> Option<TransactionAuth> with Some(Default::default())
stackslib/src/chainstate/stacks/auth.rs:900:9: replace TransactionAuth::from_p2sh -> Option<TransactionAuth> with Some(Default::default())
stackslib/src/chainstate/stacks/auth.rs:912:9: replace TransactionAuth::from_p2wpkh -> Option<TransactionAuth> with Some(Default::default())
stackslib/src/chainstate/stacks/auth.rs:921:9: replace TransactionAuth::from_p2wsh -> Option<TransactionAuth> with Some(Default::default())
stackslib/src/chainstate/stacks/auth.rs:935:9: replace TransactionAuth::into_sponsored -> Option<TransactionAuth> with Some(Default::default())
stackslib/src/chainstate/stacks/auth.rs:975:9: replace TransactionAuth::into_initial_sighash_auth -> TransactionAuth with Default::default()
stackslib/src/chainstate/stacks/auth.rs:991:9: replace TransactionAuth::origin -> &TransactionSpendingCondition with &Default::default()
stackslib/src/chainstate/stacks/auth.rs:1009:9: replace TransactionAuth::sponsor -> Option<&TransactionSpendingCondition> with Some(&Default::default())
stackslib/src/chainstate/stacks/auth.rs:1047:9: replace TransactionAuth::verify_origin -> Result<Txid, net_error> with Ok(Default::default())
stackslib/src/chainstate/stacks/block.rs:57:9: replace <impl StacksMessageCodec for StacksBlockHeader>::consensus_deserialize -> Result<StacksBlockHeader, codec_error> with Ok(Default::default())
stackslib/src/chainstate/stacks/block.rs:83:9: replace StacksBlockHeader::pubkey_hash -> Hash160 with Default::default()
stackslib/src/chainstate/stacks/block.rs:87:9: replace StacksBlockHeader::genesis_block_header -> StacksBlockHeader with Default::default()
stackslib/src/chainstate/stacks/block.rs:106:9: replace StacksBlockHeader::block_hash -> BlockHeaderHash with Default::default()
stackslib/src/chainstate/stacks/block.rs:125:9: replace StacksBlockHeader::make_index_block_hash -> StacksBlockId with Default::default()
stackslib/src/chainstate/stacks/block.rs:129:9: replace StacksBlockHeader::index_block_hash -> StacksBlockId with Default::default()
stackslib/src/chainstate/stacks/block.rs:142:9: replace StacksBlockHeader::from_parent -> StacksBlockHeader with Default::default()
stackslib/src/chainstate/stacks/block.rs:167:9: replace StacksBlockHeader::from_parent_empty -> StacksBlockHeader with Default::default()
stackslib/src/chainstate/stacks/block.rs:302:9: replace <impl StacksMessageCodec for StacksBlock>::consensus_deserialize -> Result<StacksBlock, codec_error> with Ok(Default::default())
stackslib/src/chainstate/stacks/block.rs:384:9: replace StacksBlock::from_parent -> StacksBlock with Default::default()
stackslib/src/chainstate/stacks/block.rs:403:9: replace StacksBlock::genesis_block -> StacksBlock with Default::default()
stackslib/src/chainstate/stacks/block.rs:415:9: replace StacksBlock::block_hash -> BlockHeaderHash with Default::default()
stackslib/src/chainstate/stacks/block.rs:419:9: replace StacksBlock::index_block_hash -> StacksBlockId with Default::default()
stackslib/src/chainstate/stacks/block.rs:425:9: replace StacksBlock::get_coinbase_tx -> Option<StacksTransaction> with Some(Default::default())
stackslib/src/chainstate/stacks/block.rs:630:9: replace <impl StacksMessageCodec for StacksMicroblockHeader>::consensus_deserialize -> Result<StacksMicroblockHeader, codec_error> with Ok(Default::default())
stackslib/src/chainstate/stacks/block.rs:688:9: replace StacksMicroblockHeader::check_recover_pubkey -> Result<Hash160, net_error> with Ok(Default::default())
stackslib/src/chainstate/stacks/block.rs:729:9: replace StacksMicroblockHeader::block_hash -> BlockHeaderHash with Default::default()
stackslib/src/chainstate/stacks/block.rs:741:9: replace StacksMicroblockHeader::first_unsigned -> StacksMicroblockHeader with Default::default()
stackslib/src/chainstate/stacks/block.rs:753:9: replace StacksMicroblockHeader::first_empty_unsigned -> StacksMicroblockHeader with Default::default()
stackslib/src/chainstate/stacks/block.rs:762:9: replace StacksMicroblockHeader::from_parent_unsigned -> Option<StacksMicroblockHeader> with Some(Default::default())
stackslib/src/chainstate/stacks/block.rs:788:9: replace <impl StacksMessageCodec for StacksMicroblock>::consensus_deserialize -> Result<StacksMicroblock, codec_error> with Ok(Default::default())
stackslib/src/chainstate/stacks/block.rs:843:9: replace StacksMicroblock::first_unsigned -> StacksMicroblock with Default::default()
stackslib/src/chainstate/stacks/block.rs:860:9: replace StacksMicroblock::from_parent_unsigned -> Option<StacksMicroblock> with Some(Default::default())
stackslib/src/chainstate/stacks/block.rs:889:9: replace StacksMicroblock::block_hash -> BlockHeaderHash with Default::default()
stackslib/src/chainstate/stacks/boot/mod.rs:129:5: replace make_contract_id -> QualifiedContractIdentifier with Default::default()
stackslib/src/chainstate/stacks/boot/mod.rs:167:9: replace PoxStartCycleInfo::deserialize -> Option<PoxStartCycleInfo> with Some(Default::default())
stackslib/src/chainstate/stacks/boot/mod.rs:178:9: replace RewardSet::empty -> RewardSet with Default::default()
stackslib/src/chainstate/stacks/boot/mod.rs:217:9: replace StacksChainState::get_user_stacking_state -> TupleData with Default::default()
stackslib/src/chainstate/stacks/boot/mod.rs:255:9: replace StacksChainState::synthesize_unlock_event_data -> Value with Default::default()
stackslib/src/chainstate/stacks/boot/mod.rs:324:9: replace StacksChainState::handle_pox_cycle_start_pox_2 -> Result<Vec<StacksTransactionEvent>, Error> with Ok(vec![Default::default()])
stackslib/src/chainstate/stacks/boot/mod.rs:336:9: replace StacksChainState::handle_pox_cycle_start_pox_3 -> Result<Vec<StacksTransactionEvent>, Error> with Ok(vec![Default::default()])
stackslib/src/chainstate/stacks/boot/mod.rs:348:9: replace StacksChainState::handle_pox_cycle_start -> Result<Vec<StacksTransactionEvent>, Error> with Ok(vec![Default::default()])
stackslib/src/chainstate/stacks/boot/mod.rs:437:9: replace StacksChainState::eval_boot_code_read_only -> Result<Value, Error> with Ok(Default::default())
stackslib/src/chainstate/stacks/boot/mod.rs:560:9: replace StacksChainState::make_reward_set -> RewardSet with Default::default()
stackslib/src/chainstate/stacks/boot/mod.rs:708:9: replace StacksChainState::get_reward_addresses_pox_1 -> Result<Vec<RawRewardSetEntry>, Error> with Ok(vec![Default::default()])
stackslib/src/chainstate/stacks/boot/mod.rs:786:9: replace StacksChainState::get_reward_addresses_pox_2 -> Result<Vec<RawRewardSetEntry>, Error> with Ok(vec![Default::default()])
stackslib/src/chainstate/stacks/boot/mod.rs:875:9: replace StacksChainState::get_reward_addresses_pox_3 -> Result<Vec<RawRewardSetEntry>, Error> with Ok(vec![Default::default()])
stackslib/src/chainstate/stacks/boot/mod.rs:968:9: replace StacksChainState::get_reward_addresses -> Result<Vec<RawRewardSetEntry>, Error> with Ok(vec![Default::default()])
stackslib/src/chainstate/stacks/db/mod.rs:206:5: replace ExtendedStacksHeader_StacksBlockHeader_serialize -> Result<S::Ok, S::Error> with Ok(Default::default())
stackslib/src/chainstate/stacks/db/mod.rs:215:5: replace ExtendedStacksHeader_StacksBlockHeader_deserialize -> Result<StacksBlockHeader, D::Error> with Ok(Default::default())
stackslib/src/chainstate/stacks/db/mod.rs:229:9: replace <impl StacksMessageCodec for ExtendedStacksHeader>::consensus_deserialize -> Result<ExtendedStacksHeader, codec_error> with Ok(Default::default())
stackslib/src/chainstate/stacks/db/mod.rs:270:9: replace StacksHeaderInfo::index_block_hash -> StacksBlockId with Default::default()
stackslib/src/chainstate/stacks/db/mod.rs:274:9: replace StacksHeaderInfo::regtest_genesis -> StacksHeaderInfo with Default::default()
stackslib/src/chainstate/stacks/db/mod.rs:294:9: replace StacksHeaderInfo::genesis -> StacksHeaderInfo with Default::default()
stackslib/src/chainstate/stacks/db/mod.rs:314:9: replace <impl FromRow for DBConfig>::from_row -> Result<DBConfig, db_error> with Ok(Default::default())
stackslib/src/chainstate/stacks/db/mod.rs:331:9: replace <impl FromRow for StacksHeaderInfo>::from_row -> Result<StacksHeaderInfo, db_error> with Ok(Default::default())
stackslib/src/chainstate/stacks/db/mod.rs:381:9: replace <impl ClarityConnection for ClarityTx<'a, 'b>>::with_analysis_db_readonly -> R with Default::default()
stackslib/src/chainstate/stacks/db/mod.rs:374:9: replace <impl ClarityConnection for ClarityTx<'a, 'b>>::with_clarity_db_readonly_owned -> R with Default::default()
stackslib/src/chainstate/stacks/db/mod.rs:385:9: replace <impl ClarityConnection for ClarityTx<'a, 'b>>::get_epoch -> StacksEpochId with Default::default()
stackslib/src/chainstate/stacks/db/mod.rs:391:9: replace ClarityTx<'a, 'b>::cost_so_far -> ExecutionCost with Default::default()
stackslib/src/chainstate/stacks/db/mod.rs:395:9: replace ClarityTx<'a, 'b>::get_epoch -> StacksEpochId with Default::default()
stackslib/src/chainstate/stacks/db/mod.rs:401:9: replace ClarityTx<'a, 'b>::set_cost_tracker -> LimitedCostTracker with Default::default()
stackslib/src/chainstate/stacks/db/mod.rs:406:9: replace ClarityTx<'a, 'b>::block_limit -> Option<ExecutionCost> with Some(Default::default())
stackslib/src/chainstate/stacks/db/mod.rs:419:9: replace ClarityTx<'a, 'b>::with_temporary_cost_tracker -> (R, LimitedCostTracker) with (Default::default(), Default::default())
stackslib/src/chainstate/stacks/db/mod.rs:435:9: replace ClarityTx<'a, 'b>::commit_mined_block -> ExecutionCost with Default::default()
stackslib/src/chainstate/stacks/db/mod.rs:452:9: replace ClarityTx<'a, 'b>::precommit_to_block -> PreCommitClarityBlock<'a> with Default::default()
stackslib/src/chainstate/stacks/db/mod.rs:473:9: replace ClarityTx<'a, 'b>::connection -> &mut ClarityBlockConnection<'a, 'b> with Box::leak(Box::new(Default::default()))
stackslib/src/chainstate/stacks/db/mod.rs:511:9: replace ChainstateTx<'a>::get_blocks_path -> &String with &String::new()
stackslib/src/chainstate/stacks/db/mod.rs:511:9: replace ChainstateTx<'a>::get_blocks_path -> &String with &"xyzzy".into()
stackslib/src/chainstate/stacks/db/mod.rs:519:9: replace ChainstateTx<'a>::get_config -> &DBConfig with &Default::default()
stackslib/src/chainstate/stacks/db/mod.rs:552:9: replace <impl Deref for ChainstateTx<'a>>::deref -> &StacksDBTx<'a> with &Default::default()
stackslib/src/chainstate/stacks/db/mod.rs:558:9: replace <impl DerefMut for ChainstateTx<'a>>::deref_mut -> &mut StacksDBTx<'a> with Box::leak(Box::new(Default::default()))
stackslib/src/chainstate/stacks/db/mod.rs:885:9: replace StacksChainState::instantiate_db -> Result<MARF<StacksBlockId>, Error> with Ok(MARF::new())
stackslib/src/chainstate/stacks/db/mod.rs:885:9: replace StacksChainState::instantiate_db -> Result<MARF<StacksBlockId>, Error> with Ok(MARF::from_iter([Default::default()]))
stackslib/src/chainstate/stacks/db/mod.rs:885:9: replace StacksChainState::instantiate_db -> Result<MARF<StacksBlockId>, Error> with Ok(MARF::new(Default::default()))
stackslib/src/chainstate/stacks/db/mod.rs:885:9: replace StacksChainState::instantiate_db -> Result<MARF<StacksBlockId>, Error> with Ok(MARF::from(Default::default()))
stackslib/src/chainstate/stacks/db/mod.rs:917:9: replace StacksChainState::get_db_config_from_path -> Result<DBConfig, db_error> with Ok(Default::default())
stackslib/src/chainstate/stacks/db/mod.rs:929:9: replace StacksChainState::load_db_config -> Result<DBConfig, db_error> with Ok(Default::default())
stackslib/src/chainstate/stacks/db/mod.rs:1009:9: replace StacksChainState::open_db -> Result<MARF<StacksBlockId>, Error> with Ok(MARF::new())
stackslib/src/chainstate/stacks/db/mod.rs:1009:9: replace StacksChainState::open_db -> Result<MARF<StacksBlockId>, Error> with Ok(MARF::from_iter([Default::default()]))
stackslib/src/chainstate/stacks/db/mod.rs:1009:9: replace StacksChainState::open_db -> Result<MARF<StacksBlockId>, Error> with Ok(MARF::new(Default::default()))
stackslib/src/chainstate/stacks/db/mod.rs:1009:9: replace StacksChainState::open_db -> Result<MARF<StacksBlockId>, Error> with Ok(MARF::from(Default::default()))
stackslib/src/chainstate/stacks/db/mod.rs:1045:9: replace StacksChainState::open_index -> Result<MARF<StacksBlockId>, db_error> with Ok(MARF::new())
stackslib/src/chainstate/stacks/db/mod.rs:1045:9: replace StacksChainState::open_index -> Result<MARF<StacksBlockId>, db_error> with Ok(MARF::from_iter([Default::default()]))
stackslib/src/chainstate/stacks/db/mod.rs:1045:9: replace StacksChainState::open_index -> Result<MARF<StacksBlockId>, db_error> with Ok(MARF::new(Default::default()))
stackslib/src/chainstate/stacks/db/mod.rs:1045:9: replace StacksChainState::open_index -> Result<MARF<StacksBlockId>, db_error> with Ok(MARF::from(Default::default()))
stackslib/src/chainstate/stacks/db/mod.rs:1073:9: replace StacksChainState::parse_genesis_address -> PrincipalData with Default::default()
stackslib/src/chainstate/stacks/db/mod.rs:1106:9: replace StacksChainState::install_boot_code -> Result<Vec<StacksTransactionReceipt>, Error> with Ok(vec![Default::default()])
stackslib/src/chainstate/stacks/db/mod.rs:1579:9: replace StacksChainState::open -> Result<(StacksChainState, Vec<StacksTransactionReceipt>), Error> with Ok((Default::default(), vec![]))
stackslib/src/chainstate/stacks/db/mod.rs:1579:9: replace StacksChainState::open -> Result<(StacksChainState, Vec<StacksTransactionReceipt>), Error> with Ok((Default::default(), vec![Default::default()]))
stackslib/src/chainstate/stacks/db/mod.rs:1585:9: replace StacksChainState::reopen -> Result<(StacksChainState, Vec<StacksTransactionReceipt>), Error> with Ok((Default::default(), vec![]))
stackslib/src/chainstate/stacks/db/mod.rs:1585:9: replace StacksChainState::reopen -> Result<(StacksChainState, Vec<StacksTransactionReceipt>), Error> with Ok((Default::default(), vec![Default::default()]))
stackslib/src/chainstate/stacks/db/mod.rs:1595:9: replace StacksChainState::reopen_db -> Result<DBConn, Error> with Ok(Default::default())
stackslib/src/chainstate/stacks/db/mod.rs:1654:9: replace StacksChainState::open_and_exec -> Result<(StacksChainState, Vec<StacksTransactionReceipt>), Error> with Ok((Default::default(), vec![]))
stackslib/src/chainstate/stacks/db/mod.rs:1654:9: replace StacksChainState::open_and_exec -> Result<(StacksChainState, Vec<StacksTransactionReceipt>), Error> with Ok((Default::default(), vec![Default::default()]))
stackslib/src/chainstate/stacks/db/mod.rs:1734:9: replace StacksChainState::config -> DBConfig with Default::default()
stackslib/src/chainstate/stacks/db/mod.rs:1744:9: replace StacksChainState::index_tx_begin -> Result<StacksDBTx<'a>, Error> with Ok(Default::default())
stackslib/src/chainstate/stacks/db/mod.rs:1748:9: replace StacksChainState::index_conn -> Result<StacksDBConn<'a>, Error> with Ok(Default::default())
stackslib/src/chainstate/stacks/db/mod.rs:1754:9: replace StacksChainState::db_tx_begin -> Result<DBTx<'a>, Error> with Ok(Default::default())
stackslib/src/chainstate/stacks/db/mod.rs:1762:9: replace StacksChainState::chainstate_tx_begin -> Result<(ChainstateTx<'a>, &'a mut ClarityInstance), Error> with Ok((Default::default(), Box::leak(Box::new(Default::default()))))
stackslib/src/chainstate/stacks/db/mod.rs:1782:9: replace StacksChainState::clarity_eval_read_only -> Value with Default::default()
stackslib/src/chainstate/stacks/db/mod.rs:1801:9: replace StacksChainState::eval_read_only -> Result<Value, clarity_error> with Ok(Default::default())
stackslib/src/chainstate/stacks/db/mod.rs:1812:9: replace StacksChainState::db -> &DBConn with &Default::default()
stackslib/src/chainstate/stacks/db/mod.rs:1825:9: replace StacksChainState::chainstate_block_begin -> ClarityTx<'a, 'b> with Default::default()
stackslib/src/chainstate/stacks/db/mod.rs:1848:9: replace StacksChainState::block_begin -> ClarityTx<'a, 'a> with Default::default()
stackslib/src/chainstate/stacks/db/mod.rs:1872:9: replace StacksChainState::genesis_block_begin -> ClarityTx<'a, 'a> with Default::default()
stackslib/src/chainstate/stacks/db/mod.rs:1920:9: replace StacksChainState::with_clarity_marf -> R with Default::default()
stackslib/src/chainstate/stacks/db/mod.rs:1935:9: replace StacksChainState::with_read_only_clarity_tx -> Option<R> with Some(Default::default())
stackslib/src/chainstate/stacks/db/mod.rs:1969:9: replace StacksChainState::with_read_only_unconfirmed_clarity_tx -> Result<Option<R>, Error> with Ok(Some(Default::default()))
stackslib/src/chainstate/stacks/db/mod.rs:2005:9: replace StacksChainState::maybe_read_only_clarity_tx -> Result<Option<R>, Error> with Ok(Some(Default::default()))
stackslib/src/chainstate/stacks/db/mod.rs:2023:9: replace StacksChainState::get_parent_index_block -> StacksBlockId with Default::default()
stackslib/src/chainstate/stacks/db/mod.rs:2046:9: replace StacksChainState::chainstate_begin_unconfirmed -> ClarityTx<'a, 'b> with Default::default()
stackslib/src/chainstate/stacks/db/mod.rs:2058:9: replace StacksChainState::begin_unconfirmed -> Option<ClarityTx<'a, 'a>> with Some(Default::default())
stackslib/src/chainstate/stacks/db/mod.rs:2091:9: replace StacksChainState::inner_clarity_tx_begin -> ClarityTx<'a, 'b> with Default::default()
stackslib/src/chainstate/stacks/db/mod.rs:2242:9: replace StacksChainState::get_index_hash -> StacksBlockId with Default::default()
stackslib/src/chainstate/stacks/db/mod.rs:2291:9: replace StacksChainState::get_burnchain_txids_for_block -> Result<Vec<Txid>, Error> with Ok(vec![Default::default()])
stackslib/src/chainstate/stacks/db/mod.rs:2314:9: replace StacksChainState::get_burnchain_txids_in_ancestors -> Result<HashSet<Txid>, Error> with Ok(HashSet::from_iter([Default::default()]))
stackslib/src/chainstate/stacks/db/mod.rs:2389:9: replace StacksChainState::advance_tip -> Result<StacksHeaderInfo, Error> with Ok(Default::default())
stackslib/src/chainstate/stacks/events.rs:23:9: replace <impl From for TransactionOrigin>::from -> TransactionOrigin with Default::default()
stackslib/src/chainstate/stacks/events.rs:29:9: replace TransactionOrigin::txid -> Txid with Default::default()
stackslib/src/chainstate/stacks/index/mod.rs:231:9: replace <impl From for MARFValue>::from -> MARFValue with Default::default()
stackslib/src/chainstate/stacks/index/mod.rs:245:9: replace <impl From for MARFValue>::from -> MARFValue with Default::default()
stackslib/src/chainstate/stacks/index/mod.rs:276:9: replace MARFValue::from_value_hash_bytes -> MARFValue with Default::default()
stackslib/src/chainstate/stacks/index/mod.rs:285:9: replace MARFValue::from_value_hash -> MARFValue with Default::default()
stackslib/src/chainstate/stacks/index/mod.rs:290:9: replace MARFValue::from_value -> MARFValue with Default::default()
stackslib/src/chainstate/stacks/index/mod.rs:337:9: replace <impl From for Error>::from -> Self with Default::default()
stackslib/src/chainstate/stacks/index/mod.rs:343:9: replace <impl From for Error>::from -> Self with Default::default()
stackslib/src/chainstate/stacks/index/mod.rs:353:9: replace <impl From for Error>::from -> Error with Default::default()
stackslib/src/chainstate/stacks/index/mod.rs:404:9: replace <impl Error for Error>::cause -> Option<&dyn error::Error> with Some(&Default::default())
stackslib/src/chainstate/stacks/miner.rs:82:9: replace MinerStatus::make_ready -> MinerStatus with Default::default()
stackslib/src/chainstate/stacks/miner.rs:171:9: replace BlockBuilderSettings::limited -> BlockBuilderSettings with Default::default()
stackslib/src/chainstate/stacks/miner.rs:179:9: replace BlockBuilderSettings::max_value -> BlockBuilderSettings with Default::default()
stackslib/src/chainstate/stacks/miner.rs:228:9: replace <impl From for MicroblockMinerRuntime>::from -> MicroblockMinerRuntime with Default::default()
stackslib/src/chainstate/stacks/miner.rs:312:5: replace hex_serialize -> Result<S::Ok, S::Error> with Ok(Default::default())
stackslib/src/chainstate/stacks/miner.rs:317:5: replace hex_deserialize -> Result<Txid, D::Error> with Ok(Default::default())
stackslib/src/chainstate/stacks/miner.rs:409:9: replace TransactionResult::success -> TransactionResult with Default::default()
stackslib/src/chainstate/stacks/miner.rs:420:9: replace TransactionResult::error -> TransactionResult with Default::default()
stackslib/src/chainstate/stacks/miner.rs:432:9: replace TransactionResult::skipped -> TransactionResult with Default::default()
stackslib/src/chainstate/stacks/miner.rs:446:9: replace TransactionResult::skipped_due_to_error -> TransactionResult with Default::default()
stackslib/src/chainstate/stacks/miner.rs:456:9: replace TransactionResult::problematic -> TransactionResult with Default::default()
stackslib/src/chainstate/stacks/miner.rs:464:9: replace TransactionResult::convert_to_event -> TransactionEvent with Default::default()
stackslib/src/chainstate/stacks/miner.rs:505:9: replace TransactionResult::unwrap -> (u64, StacksTransactionReceipt) with (0, Default::default())
stackslib/src/chainstate/stacks/miner.rs:505:9: replace TransactionResult::unwrap -> (u64, StacksTransactionReceipt) with (1, Default::default())
stackslib/src/chainstate/stacks/miner.rs:526:9: replace TransactionResult::unwrap_err -> Error with Default::default()
stackslib/src/chainstate/stacks/miner.rs:541:9: replace TransactionResult::is_problematic -> (bool, Error) with (true, Default::default())
stackslib/src/chainstate/stacks/miner.rs:541:9: replace TransactionResult::is_problematic -> (bool, Error) with (false, Default::default())
stackslib/src/chainstate/stacks/miner.rs:699:9: replace StacksMicroblockBuilder<'a>::resume_unconfirmed -> Result<StacksMicroblockBuilder<'a>, Error> with Ok(Default::default())
stackslib/src/chainstate/stacks/miner.rs:778:9: replace StacksMicroblockBuilder<'a>::make_next_microblock_from_txs -> Result<StacksMicroblock, Error> with Ok(Default::default())
stackslib/src/chainstate/stacks/miner.rs:821:9: replace StacksMicroblockBuilder<'a>::make_next_microblock -> Result<StacksMicroblock, Error> with Ok(Default::default())
stackslib/src/chainstate/stacks/miner.rs:875:9: replace StacksMicroblockBuilder<'a>::mine_next_transaction -> Result<TransactionResult, Error> with Ok(Default::default())
stackslib/src/chainstate/stacks/miner.rs:996:9: replace StacksMicroblockBuilder<'a>::mine_next_microblock_from_txs -> Result<StacksMicroblock, Error> with Ok(Default::default())
stackslib/src/chainstate/stacks/miner.rs:1110:9: replace StacksMicroblockBuilder<'a>::mine_next_microblock -> Result<StacksMicroblock, Error> with Ok(Default::default())
stackslib/src/chainstate/stacks/miner.rs:1340:9: replace StacksMicroblockBuilder<'a>::get_cost_so_far -> Option<ExecutionCost> with Some(Default::default())
stackslib/src/chainstate/stacks/miner.rs:1369:9: replace StacksBlockBuilder::from_parent_pubkey_hash -> StacksBlockBuilder with Default::default()
stackslib/src/chainstate/stacks/miner.rs:1416:9: replace StacksBlockBuilder::from_parent -> StacksBlockBuilder with Default::default()
stackslib/src/chainstate/stacks/miner.rs:1440:9: replace StacksBlockBuilder::first_pubkey_hash -> StacksBlockBuilder with Default::default()
stackslib/src/chainstate/stacks/miner.rs:1472:9: replace StacksBlockBuilder::first -> StacksBlockBuilder with Default::default()
stackslib/src/chainstate/stacks/miner.rs:1535:9: replace StacksBlockBuilder::try_mine_tx -> Result<TransactionResult, Error> with Ok(Default::default())
stackslib/src/chainstate/stacks/miner.rs:1562:9: replace StacksBlockBuilder::try_mine_tx_with_len -> TransactionResult with Default::default()
stackslib/src/chainstate/stacks/miner.rs:1824:9: replace StacksBlockBuilder::finalize_block -> StacksBlock with Default::default()
stackslib/src/chainstate/stacks/miner.rs:1877:9: replace StacksBlockBuilder::mine_anchored_block -> StacksBlock with Default::default()
stackslib/src/chainstate/stacks/miner.rs:1890:9: replace StacksBlockBuilder::mine_next_microblock -> Result<StacksMicroblock, Error> with Ok(Default::default())
stackslib/src/chainstate/stacks/miner.rs:1945:9: replace StacksBlockBuilder::load_parent_microblocks -> Result<Vec<StacksMicroblock>, Error> with Ok(vec![Default::default()])
stackslib/src/chainstate/stacks/miner.rs:2002:9: replace StacksBlockBuilder::pre_epoch_begin -> Result<MinerEpochInfo<'a>, Error> with Ok(Default::default())
stackslib/src/chainstate/stacks/miner.rs:2106:9: replace StacksBlockBuilder::epoch_begin -> Result<(ClarityTx<'b, 'b>, ExecutionCost), Error> with Ok((Default::default(), Default::default()))
stackslib/src/chainstate/stacks/miner.rs:2136:9: replace StacksBlockBuilder::epoch_finish -> ExecutionCost with Default::default()
stackslib/src/chainstate/stacks/miner.rs:2245:9: replace StacksBlockBuilder::make_block_builder -> Result<StacksBlockBuilder, Error> with Ok(Default::default())
stackslib/src/chainstate/stacks/miner.rs:2298:9: replace StacksBlockBuilder::make_regtest_block_builder -> Result<StacksBlockBuilder, Error> with Ok(Default::default())
stackslib/src/chainstate/stacks/miner.rs:2345:9: replace StacksBlockBuilder::build_anchored_block -> Result<(StacksBlock, ExecutionCost, u64), Error> with Ok((Default::default(), Default::default(), 0))
stackslib/src/chainstate/stacks/miner.rs:2345:9: replace StacksBlockBuilder::build_anchored_block -> Result<(StacksBlock, ExecutionCost, u64), Error> with Ok((Default::default(), Default::default(), 1))
stackslib/src/chainstate/stacks/transaction.rs:48:9: replace <impl StacksMessageCodec for TransactionContractCall>::consensus_deserialize -> Result<TransactionContractCall, codec_error> with Ok(Default::default())
stackslib/src/chainstate/stacks/transaction.rs:76:9: replace TransactionContractCall::to_clarity_contract_id -> QualifiedContractIdentifier with Default::default()
stackslib/src/chainstate/stacks/transaction.rs:107:9: replace <impl StacksMessageCodec for TransactionSmartContract>::consensus_deserialize -> Result<TransactionSmartContract, codec_error> with Ok(Default::default())
stackslib/src/chainstate/stacks/transaction.rs:127:5: replace ClarityVersion_consensus_deserialize -> Result<ClarityVersion, codec_error> with Ok(Default::default())
stackslib/src/chainstate/stacks/transaction.rs:187:9: replace <impl StacksMessageCodec for TransactionPayload>::consensus_deserialize -> Result<TransactionPayload, codec_error> with Ok(Default::default())
stackslib/src/chainstate/stacks/transaction.rs:264:9: replace TransactionPayload::new_contract_call -> Option<TransactionPayload> with Some(Default::default())
stackslib/src/chainstate/stacks/transaction.rs:293:9: replace TransactionPayload::new_smart_contract -> Option<TransactionPayload> with Some(Default::default())
stackslib/src/chainstate/stacks/transaction.rs:318:9: replace <impl StacksMessageCodec for AssetInfo>::consensus_deserialize -> Result<AssetInfo, codec_error> with Ok(Default::default())
stackslib/src/chainstate/stacks/transaction.rs:349:9: replace <impl StacksMessageCodec for PostConditionPrincipal>::consensus_deserialize -> Result<PostConditionPrincipal, codec_error> with Ok(Default::default())
stackslib/src/chainstate/stacks/transaction.rs:410:9: replace <impl StacksMessageCodec for TransactionPostCondition>::consensus_deserialize -> Result<TransactionPostCondition, codec_error> with Ok(Default::default())
stackslib/src/chainstate/stacks/transaction.rs:475:9: replace StacksTransaction::consensus_deserialize_with_len -> Result<(StacksTransaction, u64), codec_error> with Ok((Default::default(), 0))
stackslib/src/chainstate/stacks/transaction.rs:475:9: replace StacksTransaction::consensus_deserialize_with_len -> Result<(StacksTransaction, u64), codec_error> with Ok((Default::default(), 1))
stackslib/src/chainstate/stacks/transaction.rs:566:9: replace StacksTransaction::try_as_coinbase -> Option<(&CoinbasePayload, Option<&PrincipalData>)> with Some((&Default::default(), None))
stackslib/src/chainstate/stacks/transaction.rs:566:9: replace StacksTransaction::try_as_coinbase -> Option<(&CoinbasePayload, Option<&PrincipalData>)> with Some((&Default::default(), Some(&Default::default())))
stackslib/src/chainstate/stacks/transaction.rs:594:9: replace <impl From for TransactionPayload>::from -> Self with Default::default()
stackslib/src/chainstate/stacks/transaction.rs:588:9: replace <impl StacksMessageCodec for StacksTransaction>::consensus_deserialize -> Result<StacksTransaction, codec_error> with Ok(Default::default())
stackslib/src/chainstate/stacks/transaction.rs:600:9: replace <impl From for TransactionPayload>::from -> Self with Default::default()
stackslib/src/chainstate/stacks/transaction.rs:683:9: replace StacksTransaction::borrow_auth -> &mut TransactionAuth with Box::leak(Box::new(Default::default()))
stackslib/src/chainstate/stacks/transaction.rs:675:9: replace StacksTransaction::txid -> Txid with Default::default()
stackslib/src/chainstate/stacks/transaction.rs:688:9: replace StacksTransaction::auth -> &TransactionAuth with &Default::default()
stackslib/src/chainstate/stacks/transaction.rs:697:9: replace StacksTransaction::sign_begin -> Txid with Default::default()
stackslib/src/chainstate/stacks/transaction.rs:705:9: replace StacksTransaction::verify_begin -> Txid with Default::default()
stackslib/src/chainstate/stacks/transaction.rs:718:9: replace StacksTransaction::sign_and_append -> Result<Txid, net_error> with Ok(Default::default())
stackslib/src/chainstate/stacks/transaction.rs:748:9: replace StacksTransaction::pop_auth_field -> Option<TransactionAuthField> with Some(Default::default())
stackslib/src/chainstate/stacks/transaction.rs:777:9: replace StacksTransaction::sign_next_origin -> Result<Txid, net_error> with Ok(Default::default())
stackslib/src/chainstate/stacks/transaction.rs:810:9: replace StacksTransaction::sign_next_sponsor -> Result<Txid, net_error> with Ok(Default::default())
stackslib/src/chainstate/stacks/transaction.rs:850:9: replace StacksTransaction::verify_origin -> Result<Txid, net_error> with Ok(Default::default())
stackslib/src/chainstate/stacks/transaction.rs:855:9: replace StacksTransaction::origin_address -> StacksAddress with Default::default()
stackslib/src/chainstate/stacks/transaction.rs:875:9: replace StacksTransaction::sponsor_address -> Option<StacksAddress> with Some(Default::default())
stackslib/src/chainstate/stacks/transaction.rs:891:9: replace StacksTransaction::get_origin -> TransactionSpendingCondition with Default::default()
stackslib/src/chainstate/stacks/transaction.rs:896:9: replace StacksTransaction::get_payer -> TransactionSpendingCondition with Default::default()
stackslib/src/chainstate/stacks/transaction.rs:926:9: replace StacksTransactionSigner::new_sponsor -> Result<StacksTransactionSigner, Error> with Ok(Default::default())
stackslib/src/chainstate/stacks/transaction.rs:1021:9: replace StacksTransactionSigner::pop_origin_auth_field -> Option<TransactionAuthField> with Some(Default::default())
stackslib/src/chainstate/stacks/transaction.rs:1032:9: replace StacksTransactionSigner::pop_sponsor_auth_field -> Option<TransactionAuthField> with Some(Default::default())
stackslib/src/chainstate/stacks/transaction.rs:1055:9: replace StacksTransactionSigner::get_tx_incomplete -> StacksTransaction with Default::default()
stackslib/src/chainstate/stacks/transaction.rs:1059:9: replace StacksTransactionSigner::get_tx -> Option<StacksTransaction> with Some(Default::default())
stackslib/src/burnchains/bitcoin/address.rs:65:9: replace <impl From for BitcoinAddress>::from -> BitcoinAddress with Default::default()
stackslib/src/burnchains/bitcoin/address.rs:71:9: replace <impl From for BitcoinAddress>::from -> BitcoinAddress with Default::default()
stackslib/src/burnchains/bitcoin/address.rs:114:5: replace legacy_version_byte_to_address_type -> Option<(LegacyBitcoinAddressType, BitcoinNetworkType)> with Some((Default::default(), Default::default()))
stackslib/src/burnchains/bitcoin/address.rs:215:9: replace LegacyBitcoinAddress::from_b58 -> Result<LegacyBitcoinAddress, btc_error> with Ok(Default::default())
stackslib/src/burnchains/bitcoin/address.rs:282:9: replace SegwitBitcoinAddress::bech32_variant -> bech32::Variant with Default::default()
stackslib/src/burnchains/bitcoin/address.rs:304:9: replace SegwitBitcoinAddress::from_bech32 -> Option<SegwitBitcoinAddress> with Some(Default::default())
stackslib/src/burnchains/bitcoin/address.rs:430:9: replace BitcoinAddress::from_bytes_legacy -> Result<BitcoinAddress, btc_error> with Ok(Default::default())
stackslib/src/burnchains/bitcoin/address.rs:450:9: replace BitcoinAddress::from_bytes_segwit_p2wpkh -> Result<BitcoinAddress, btc_error> with Ok(Default::default())
stackslib/src/burnchains/bitcoin/address.rs:471:9: replace BitcoinAddress::from_scriptpubkey -> Option<BitcoinAddress> with Some(Default::default())
stackslib/src/burnchains/bitcoin/address.rs:589:9: replace BitcoinAddress::try_from_segwit -> Option<BitcoinAddress> with Some(Default::default())
stackslib/src/burnchains/bitcoin/address.rs:623:9: replace <impl Address for LegacyBitcoinAddress>::from_string -> Option<LegacyBitcoinAddress> with Some(Default::default())
stackslib/src/burnchains/bitcoin/address.rs:640:9: replace <impl Address for SegwitBitcoinAddress>::from_string -> Option<SegwitBitcoinAddress> with Some(Default::default())
stackslib/src/burnchains/bitcoin/address.rs:684:9: replace <impl Address for BitcoinAddress>::from_string -> Option<BitcoinAddress> with Some(Default::default())
stackslib/src/burnchains/bitcoin/bits.rs:45:5: replace parse_script -> Vec<Instruction<'a>> with vec![Default::default()]
stackslib/src/burnchains/bitcoin/bits.rs:54:9: replace BitcoinTxInputStructured::from_bitcoin_p2pkh_script_sig -> Option<BitcoinTxInputStructured> with Some(Default::default())
stackslib/src/burnchains/bitcoin/bits.rs:96:9: replace BitcoinTxInputStructured::from_bitcoin_pubkey_pushbytes -> Option<BitcoinTxInputStructured> with Some(Default::default())
stackslib/src/burnchains/bitcoin/bits.rs:156:9: replace BitcoinTxInputStructured::from_bitcoin_witness_pubkey_vecs -> Option<BitcoinTxInputStructured> with Some(Default::default())
stackslib/src/burnchains/bitcoin/bits.rs:201:9: replace BitcoinTxInputStructured::from_bitcoin_multisig_redeem_script -> Option<BitcoinTxInputStructured> with Some(Default::default())
stackslib/src/burnchains/bitcoin/bits.rs:285:9: replace BitcoinTxInputStructured::from_bitcoin_p2sh_multisig_script_sig -> Option<BitcoinTxInputStructured> with Some(Default::default())
stackslib/src/burnchains/bitcoin/bits.rs:337:9: replace BitcoinTxInputStructured::from_bitcoin_p2wpkh_p2sh_script_sig -> Option<BitcoinTxInputStructured> with Some(Default::default())
stackslib/src/burnchains/bitcoin/bits.rs:387:9: replace BitcoinTxInputStructured::from_bitcoin_p2wsh_p2sh_multisig_script_sig -> Option<BitcoinTxInputStructured> with Some(Default::default())
stackslib/src/burnchains/bitcoin/bits.rs:450:9: replace BitcoinTxInputStructured::from_bitcoin_script_sig -> Option<BitcoinTxInputStructured> with Some(Default::default())
stackslib/src/burnchains/bitcoin/bits.rs:467:9: replace BitcoinTxInputStructured::from_bitcoin_witness_script_sig -> Option<BitcoinTxInputStructured> with Some(Default::default())
stackslib/src/burnchains/bitcoin/bits.rs:499:9: replace BitcoinTxInputRaw::from_bitcoin_witness_script_sig -> BitcoinTxInputRaw with Default::default()
stackslib/src/burnchains/bitcoin/bits.rs:515:9: replace BitcoinTxInput::from_bitcoin_txin_raw -> BitcoinTxInput with Default::default()
stackslib/src/burnchains/bitcoin/bits.rs:545:9: replace BitcoinTxInput::tx_ref -> &(Txid, u32) with &(Default::default(), 0)
stackslib/src/burnchains/bitcoin/bits.rs:525:9: replace BitcoinTxInput::from_bitcoin_txin_structured -> Option<BitcoinTxInput> with Some(Default::default())
stackslib/src/burnchains/bitcoin/bits.rs:556:5: replace to_txid -> (Txid, u32) with (Default::default(), 0)
stackslib/src/burnchains/bitcoin/bits.rs:545:9: replace BitcoinTxInput::tx_ref -> &(Txid, u32) with &(Default::default(), 1)
stackslib/src/burnchains/bitcoin/bits.rs:556:5: replace to_txid -> (Txid, u32) with (Default::default(), 1)
stackslib/src/burnchains/bitcoin/bits.rs:570:9: replace BitcoinTxOutput::from_bitcoin_script_pubkey_legacy -> Option<BitcoinTxOutput> with Some(Default::default())
stackslib/src/burnchains/bitcoin/bits.rs:604:9: replace BitcoinTxOutput::from_bitcoin_script_pubkey -> Option<BitcoinTxOutput> with Some(Default::default())
stackslib/src/burnchains/bitcoin/bits.rs:618:9: replace BitcoinTxOutput::from_bitcoin_txout_legacy -> Option<BitcoinTxOutput> with Some(Default::default())
stackslib/src/burnchains/bitcoin/bits.rs:631:9: replace BitcoinTxOutput::from_bitcoin_txout -> Option<BitcoinTxOutput> with Some(Default::default())
stackslib/src/burnchains/bitcoin/blocks.rs:58:9: replace <impl BurnHeaderIPC for BitcoinHeaderIPC>::header -> LoneBlockHeader with Default::default()
stackslib/src/burnchains/bitcoin/blocks.rs:81:9: replace <impl BurnBlockIPC for BitcoinBlockIPC>::header -> BitcoinHeaderIPC with Default::default()
stackslib/src/burnchains/bitcoin/blocks.rs:89:9: replace <impl BurnBlockIPC for BitcoinBlockIPC>::block -> PeerMessage with Default::default()
stackslib/src/burnchains/bitcoin/blocks.rs:114:9: replace BitcoinBlockDownloader::run -> Result<BitcoinBlockIPC, btc_error> with Ok(Default::default())
stackslib/src/burnchains/bitcoin/blocks.rs:138:9: replace <impl BurnchainBlockDownloader for BitcoinBlockDownloader>::download -> Result<BitcoinBlockIPC, burnchain_error> with Ok(Default::default())
stackslib/src/burnchains/bitcoin/blocks.rs:352:9: replace BitcoinBlockParser::parse_inputs_structured -> Option<Vec<BitcoinTxInput>> with Some(vec![Default::default()])
stackslib/src/burnchains/bitcoin/blocks.rs:370:9: replace BitcoinBlockParser::parse_inputs_raw -> Vec<BitcoinTxInput> with vec![Default::default()]
stackslib/src/burnchains/bitcoin/blocks.rs:384:9: replace BitcoinBlockParser::parse_outputs -> Option<Vec<BitcoinTxOutput>> with Some(vec![Default::default()])
stackslib/src/burnchains/bitcoin/blocks.rs:418:9: replace BitcoinBlockParser::parse_tx -> Option<BitcoinTransaction> with Some(Default::default())
stackslib/src/burnchains/bitcoin/blocks.rs:467:9: replace BitcoinBlockParser::parse_block -> BitcoinBlock with Default::default()
stackslib/src/burnchains/bitcoin/blocks.rs:502:9: replace BitcoinBlockParser::process_block -> Option<BitcoinBlock> with Some(Default::default())
stackslib/src/burnchains/bitcoin/blocks.rs:525:9: replace <impl BurnchainBlockParser for BitcoinBlockParser>::parse -> Result<BurnchainBlock, burnchain_error> with Ok(Default::default())
stackslib/src/burnchains/bitcoin/indexer.rs:82:9: replace <impl TryFrom for BitcoinNetworkType>::try_from -> Result<BitcoinNetworkType, Self::Error> with Ok(Default::default())
stackslib/src/burnchains/bitcoin/indexer.rs:95:5: replace get_bitcoin_stacks_epochs -> Vec<StacksEpoch> with vec![Default::default()]
stackslib/src/burnchains/bitcoin/indexer.rs:139:9: replace BitcoinIndexerConfig::default -> BitcoinIndexerConfig with Default::default()
stackslib/src/burnchains/bitcoin/indexer.rs:155:9: replace BitcoinIndexerConfig::default_regtest -> BitcoinIndexerConfig with Default::default()
stackslib/src/burnchains/bitcoin/indexer.rs:252:9: replace BitcoinIndexer::dup -> BitcoinIndexer with Default::default()
stackslib/src/burnchains/bitcoin/indexer.rs:313:9: replace BitcoinIndexer::with_socket -> Result<R, btc_error> with Ok(Default::default())
stackslib/src/burnchains/bitcoin/indexer.rs:482:9: replace BitcoinIndexer::new_reorg_spv_client -> Result<SpvClient, btc_error> with Ok(Default::default())
stackslib/src/burnchains/bitcoin/indexer.rs:500:9: replace BitcoinIndexer::setup_reorg_headers -> Result<SpvClient, btc_error> with Ok(Default::default())
stackslib/src/burnchains/bitcoin/indexer.rs:987:9: replace <impl BurnchainIndexer for BitcoinIndexer>::get_first_block_header_hash -> Result<BurnchainHeaderHash, burnchain_error> with Ok(Default::default())
stackslib/src/burnchains/bitcoin/indexer.rs:1033:9: replace <impl BurnchainIndexer for BitcoinIndexer>::get_stacks_epochs -> Vec<StacksEpoch> with vec![Default::default()]
stackslib/src/burnchains/bitcoin/indexer.rs:1048:9: replace <impl BurnchainIndexer for BitcoinIndexer>::read_headers -> Result<Vec<BitcoinHeaderIPC>, burnchain_error> with Ok(vec![Default::default()])
stackslib/src/burnchains/bitcoin/indexer.rs:1132:9: replace <impl BurnchainIndexer for BitcoinIndexer>::downloader -> BitcoinBlockDownloader with Default::default()
stackslib/src/burnchains/bitcoin/indexer.rs:1136:9: replace <impl BurnchainIndexer for BitcoinIndexer>::parser -> BitcoinBlockParser with Default::default()
stackslib/src/burnchains/bitcoin/indexer.rs:1140:9: replace <impl BurnchainIndexer for BitcoinIndexer>::reader -> BitcoinIndexer with Default::default()
stackslib/src/burnchains/bitcoin/indexer.rs:1150:9: replace <impl BurnchainHeaderReader for BitcoinIndexer>::read_burnchain_headers -> Result<Vec<BurnchainBlockHeader>, DBError> with Ok(vec![Default::default()])
stackslib/src/burnchains/bitcoin/network.rs:63:9: replace BitcoinIndexer::recv_message -> Result<PeerMessage, btc_error> with Ok(Default::default())
stackslib/src/burnchains/bitcoin/network.rs:98:9: replace BitcoinIndexer::get_local_sockaddr -> Result<SocketAddr, btc_error> with Ok(Default::default())
stackslib/src/burnchains/bitcoin/network.rs:103:9: replace BitcoinIndexer::get_remote_sockaddr -> Result<SocketAddr, btc_error> with Ok(Default::default())
stackslib/src/burnchains/bitcoin/spv.rs:135:9: replace <impl FromRow for BlockHeader>::from_row -> Result<BlockHeader, db_error> with Ok(Default::default())
stackslib/src/burnchains/bitcoin/spv.rs:219:9: replace SpvClient::conn -> &DBConn with &Default::default()
stackslib/src/burnchains/bitcoin/spv.rs:228:9: replace SpvClient::tx_begin -> Result<DBTx<'a>, btc_error> with Ok(Default::default())
stackslib/src/burnchains/bitcoin/spv.rs:321:9: replace SpvClient::db_open -> Result<DBConn, btc_error> with Ok(Default::default())
stackslib/src/burnchains/bitcoin/spv.rs:671:9: replace SpvClient::read_block_header -> Result<Option<LoneBlockHeader>, btc_error> with Ok(Some(Default::default()))
stackslib/src/burnchains/bitcoin/spv.rs:706:9: replace SpvClient::read_block_headers -> Result<Vec<LoneBlockHeader>, btc_error> with Ok(vec![Default::default()])
stackslib/src/clarity_vm/database/marf.rs:43:9: replace MarfedKV::setup_db -> InterpreterResult<MARF<StacksBlockId>> with InterpreterResult::new()
stackslib/src/clarity_vm/database/marf.rs:43:9: replace MarfedKV::setup_db -> InterpreterResult<MARF<StacksBlockId>> with InterpreterResult::from_iter([MARF::new()])
stackslib/src/clarity_vm/database/marf.rs:43:9: replace MarfedKV::setup_db -> InterpreterResult<MARF<StacksBlockId>> with InterpreterResult::new(MARF::new())
stackslib/src/clarity_vm/database/marf.rs:43:9: replace MarfedKV::setup_db -> InterpreterResult<MARF<StacksBlockId>> with InterpreterResult::from(MARF::new())
stackslib/src/clarity_vm/database/marf.rs:43:9: replace MarfedKV::setup_db -> InterpreterResult<MARF<StacksBlockId>> with InterpreterResult::from_iter([MARF::from_iter([Default::default()])])
stackslib/src/clarity_vm/database/marf.rs:43:9: replace MarfedKV::setup_db -> InterpreterResult<MARF<StacksBlockId>> with InterpreterResult::new(MARF::from_iter([Default::default()]))
stackslib/src/clarity_vm/database/marf.rs:43:9: replace MarfedKV::setup_db -> InterpreterResult<MARF<StacksBlockId>> with InterpreterResult::from(MARF::from_iter([Default::default()]))
stackslib/src/clarity_vm/database/marf.rs:43:9: replace MarfedKV::setup_db -> InterpreterResult<MARF<StacksBlockId>> with InterpreterResult::from_iter([MARF::new(Default::default())])
stackslib/src/clarity_vm/database/marf.rs:43:9: replace MarfedKV::setup_db -> InterpreterResult<MARF<StacksBlockId>> with InterpreterResult::new(MARF::new(Default::default()))
stackslib/src/clarity_vm/database/marf.rs:43:9: replace MarfedKV::setup_db -> InterpreterResult<MARF<StacksBlockId>> with InterpreterResult::from(MARF::new(Default::default()))
stackslib/src/clarity_vm/database/marf.rs:43:9: replace MarfedKV::setup_db -> InterpreterResult<MARF<StacksBlockId>> with InterpreterResult::from_iter([MARF::from(Default::default())])
stackslib/src/clarity_vm/database/marf.rs:43:9: replace MarfedKV::setup_db -> InterpreterResult<MARF<StacksBlockId>> with InterpreterResult::new(MARF::from(Default::default()))
stackslib/src/clarity_vm/database/marf.rs:43:9: replace MarfedKV::setup_db -> InterpreterResult<MARF<StacksBlockId>> with InterpreterResult::from(MARF::from(Default::default()))
stackslib/src/clarity_vm/database/marf.rs:86:9: replace MarfedKV::open -> InterpreterResult<MarfedKV> with InterpreterResult::new()
stackslib/src/clarity_vm/database/marf.rs:86:9: replace MarfedKV::open -> InterpreterResult<MarfedKV> with InterpreterResult::from_iter([Default::default()])
stackslib/src/clarity_vm/database/marf.rs:86:9: replace MarfedKV::open -> InterpreterResult<MarfedKV> with InterpreterResult::new(Default::default())
stackslib/src/clarity_vm/database/marf.rs:86:9: replace MarfedKV::open -> InterpreterResult<MarfedKV> with InterpreterResult::from(Default::default())
stackslib/src/clarity_vm/database/marf.rs:100:9: replace MarfedKV::open_unconfirmed -> InterpreterResult<MarfedKV> with InterpreterResult::new()
stackslib/src/clarity_vm/database/marf.rs:100:9: replace MarfedKV::open_unconfirmed -> InterpreterResult<MarfedKV> with InterpreterResult::from_iter([Default::default()])
stackslib/src/clarity_vm/database/marf.rs:100:9: replace MarfedKV::open_unconfirmed -> InterpreterResult<MarfedKV> with InterpreterResult::new(Default::default())
stackslib/src/clarity_vm/database/marf.rs:100:9: replace MarfedKV::open_unconfirmed -> InterpreterResult<MarfedKV> with InterpreterResult::from(Default::default())
stackslib/src/clarity_vm/database/marf.rs:111:9: replace MarfedKV::temporary -> MarfedKV with Default::default()
stackslib/src/clarity_vm/database/marf.rs:144:9: replace MarfedKV::begin_read_only -> ReadOnlyMarfStore<'a> with Default::default()
stackslib/src/clarity_vm/database/marf.rs:166:9: replace MarfedKV::begin_read_only_checked -> InterpreterResult<ReadOnlyMarfStore<'a>> with InterpreterResult::new()
stackslib/src/clarity_vm/database/marf.rs:166:9: replace MarfedKV::begin_read_only_checked -> InterpreterResult<ReadOnlyMarfStore<'a>> with InterpreterResult::from_iter([Default::default()])
stackslib/src/clarity_vm/database/marf.rs:166:9: replace MarfedKV::begin_read_only_checked -> InterpreterResult<ReadOnlyMarfStore<'a>> with InterpreterResult::new(Default::default())
stackslib/src/clarity_vm/database/marf.rs:166:9: replace MarfedKV::begin_read_only_checked -> InterpreterResult<ReadOnlyMarfStore<'a>> with InterpreterResult::from(Default::default())
stackslib/src/clarity_vm/database/marf.rs:198:9: replace MarfedKV::begin -> WritableMarfStore<'a> with Default::default()
stackslib/src/clarity_vm/database/marf.rs:219:9: replace MarfedKV::begin_unconfirmed -> WritableMarfStore<'a> with Default::default()
stackslib/src/clarity_vm/database/marf.rs:240:9: replace MarfedKV::get_chain_tip -> &StacksBlockId with &Default::default()
stackslib/src/clarity_vm/database/marf.rs:244:9: replace MarfedKV::get_marf -> &mut MARF<StacksBlockId> with Box::leak(Box::new(MARF::new()))
stackslib/src/clarity_vm/database/marf.rs:244:9: replace MarfedKV::get_marf -> &mut MARF<StacksBlockId> with Box::leak(Box::new(MARF::from_iter([Default::default()])))
stackslib/src/clarity_vm/database/marf.rs:244:9: replace MarfedKV::get_marf -> &mut MARF<StacksBlockId> with Box::leak(Box::new(MARF::new(Default::default())))
stackslib/src/clarity_vm/database/marf.rs:244:9: replace MarfedKV::get_marf -> &mut MARF<StacksBlockId> with Box::leak(Box::new(MARF::from(Default::default())))
stackslib/src/clarity_vm/database/marf.rs:253:9: replace MarfedKV::index_conn -> IndexDBConn<'a, C, StacksBlockId> with Default::default()
stackslib/src/clarity_vm/database/marf.rs:276:9: replace ReadOnlyMarfStore<'a>::as_clarity_db -> ClarityDatabase<'b> with Default::default()
stackslib/src/clarity_vm/database/marf.rs:280:9: replace ReadOnlyMarfStore<'a>::as_analysis_db -> AnalysisDatabase<'b> with Default::default()
stackslib/src/clarity_vm/database/marf.rs:293:9: replace <impl ClarityBackingStore for ReadOnlyMarfStore<'a>>::get_side_store -> &Connection with &Default::default()
stackslib/src/clarity_vm/database/marf.rs:297:9: replace <impl ClarityBackingStore for ReadOnlyMarfStore<'a>>::get_cc_special_cases_handler -> Option<SpecialCaseHandler> with Some(Default::default())
stackslib/src/clarity_vm/database/marf.rs:302:9: replace <impl ClarityBackingStore for ReadOnlyMarfStore<'a>>::set_block_hash -> InterpreterResult<StacksBlockId> with InterpreterResult::new()
stackslib/src/clarity_vm/database/marf.rs:302:9: replace <impl ClarityBackingStore for ReadOnlyMarfStore<'a>>::set_block_hash -> InterpreterResult<StacksBlockId> with InterpreterResult::from_iter([Default::default()])
stackslib/src/clarity_vm/database/marf.rs:302:9: replace <impl ClarityBackingStore for ReadOnlyMarfStore<'a>>::set_block_hash -> InterpreterResult<StacksBlockId> with InterpreterResult::new(Default::default())
stackslib/src/clarity_vm/database/marf.rs:302:9: replace <impl ClarityBackingStore for ReadOnlyMarfStore<'a>>::set_block_hash -> InterpreterResult<StacksBlockId> with InterpreterResult::from(Default::default())
stackslib/src/clarity_vm/database/marf.rs:363:9: replace <impl ClarityBackingStore for ReadOnlyMarfStore<'a>>::get_block_at_height -> Option<StacksBlockId> with Some(Default::default())
stackslib/src/clarity_vm/database/marf.rs:373:9: replace <impl ClarityBackingStore for ReadOnlyMarfStore<'a>>::get_open_chain_tip -> StacksBlockId with Default::default()
stackslib/src/clarity_vm/database/marf.rs:445:9: replace WritableMarfStore<'a>::as_clarity_db -> ClarityDatabase<'b> with Default::default()
stackslib/src/clarity_vm/database/marf.rs:449:9: replace WritableMarfStore<'a>::as_analysis_db -> AnalysisDatabase<'b> with Default::default()
stackslib/src/clarity_vm/database/marf.rs:517:9: replace <impl ClarityBackingStore for WritableMarfStore<'a>>::set_block_hash -> InterpreterResult<StacksBlockId> with InterpreterResult::new()
stackslib/src/clarity_vm/database/marf.rs:517:9: replace <impl ClarityBackingStore for WritableMarfStore<'a>>::set_block_hash -> InterpreterResult<StacksBlockId> with InterpreterResult::from_iter([Default::default()])
stackslib/src/clarity_vm/database/marf.rs:517:9: replace <impl ClarityBackingStore for WritableMarfStore<'a>>::set_block_hash -> InterpreterResult<StacksBlockId> with InterpreterResult::new(Default::default())
stackslib/src/clarity_vm/database/marf.rs:517:9: replace <impl ClarityBackingStore for WritableMarfStore<'a>>::set_block_hash -> InterpreterResult<StacksBlockId> with InterpreterResult::from(Default::default())
stackslib/src/clarity_vm/database/marf.rs:543:9: replace <impl ClarityBackingStore for WritableMarfStore<'a>>::get_cc_special_cases_handler -> Option<SpecialCaseHandler> with Some(Default::default())
stackslib/src/clarity_vm/database/marf.rs:592:9: replace <impl ClarityBackingStore for WritableMarfStore<'a>>::get_side_store -> &Connection with &Default::default()
stackslib/src/clarity_vm/database/marf.rs:596:9: replace <impl ClarityBackingStore for WritableMarfStore<'a>>::get_block_at_height -> Option<StacksBlockId> with Some(Default::default())
stackslib/src/clarity_vm/database/marf.rs:605:9: replace <impl ClarityBackingStore for WritableMarfStore<'a>>::get_open_chain_tip -> StacksBlockId with Default::default()
stackslib/src/chainstate/burn/db/processing.rs:125:9: replace SortitionHandleTx<'a>::process_checked_block_ops -> Result<(BlockSnapshot, BurnchainStateTransition), BurnchainError> with Ok((Default::default(), Default::default()))
stackslib/src/chainstate/burn/db/processing.rs:263:9: replace SortitionHandleTx<'a>::process_block_ops -> Result<(BlockSnapshot, BurnchainStateTransition), BurnchainError> with Ok((Default::default(), Default::default()))
stackslib/src/chainstate/burn/db/processing.rs:341:9: replace SortitionHandleTx<'a>::process_block_txs -> Result<(BlockSnapshot, BurnchainStateTransition), BurnchainError> with Ok((Default::default(), Default::default()))
stackslib/src/chainstate/burn/db/sortdb.rs:89:43: replace << with >>
stackslib/src/chainstate/burn/db/sortdb.rs:98:9: replace <impl FromRow for SortitionId>::from_row -> Result<SortitionId, db_error> with Ok(Default::default())
stackslib/src/chainstate/burn/db/sortdb.rs:104:9: replace <impl FromRow for ConsensusHash>::from_row -> Result<ConsensusHash, db_error> with Ok(Default::default())
stackslib/src/chainstate/burn/db/sortdb.rs:110:9: replace <impl FromRow for BurnchainHeaderHash>::from_row -> Result<BurnchainHeaderHash, db_error> with Ok(Default::default())
stackslib/src/chainstate/burn/db/sortdb.rs:116:9: replace <impl FromRow for MissedBlockCommit>::from_row -> Result<MissedBlockCommit, db_error> with Ok(Default::default())
stackslib/src/chainstate/burn/db/sortdb.rs:132:9: replace <impl FromRow for BlockSnapshot>::from_row -> Result<BlockSnapshot, db_error> with Ok(Default::default())
stackslib/src/chainstate/burn/db/sortdb.rs:209:9: replace <impl FromRow for LeaderKeyRegisterOp>::from_row -> Result<LeaderKeyRegisterOp, db_error> with Ok(Default::default())
stackslib/src/chainstate/burn/db/sortdb.rs:238:9: replace <impl FromRow for LeaderBlockCommitOp>::from_row -> Result<LeaderBlockCommitOp, db_error> with Ok(Default::default())
stackslib/src/chainstate/burn/db/sortdb.rs:303:9: replace <impl FromRow for UserBurnSupportOp>::from_row -> Result<UserBurnSupportOp, db_error> with Ok(Default::default())
stackslib/src/chainstate/burn/db/sortdb.rs:341:9: replace <impl FromRow for StackStxOp>::from_row -> Result<StackStxOp, db_error> with Ok(Default::default())
stackslib/src/chainstate/burn/db/sortdb.rs:368:9: replace <impl FromRow for DelegateStxOp>::from_row -> Result<DelegateStxOp, db_error> with Ok(Default::default())
stackslib/src/chainstate/burn/db/sortdb.rs:400:9: replace <impl FromRow for TransferStxOp>::from_row -> Result<TransferStxOp, db_error> with Ok(Default::default())
stackslib/src/chainstate/burn/db/sortdb.rs:428:9: replace <impl FromColumn for ASTRules>::from_column -> Result<ASTRules, db_error> with Ok(Default::default())
stackslib/src/chainstate/burn/db/sortdb.rs:436:9: replace <impl FromRow for (ASTRules, u64)>::from_row -> Result<(ASTRules, u64), db_error> with Ok((Default::default(), 0))
stackslib/src/chainstate/burn/db/sortdb.rs:436:9: replace <impl FromRow for (ASTRules, u64)>::from_row -> Result<(ASTRules, u64), db_error> with Ok((Default::default(), 1))
stackslib/src/chainstate/burn/db/sortdb.rs:457:9: replace <impl FromRow for AcceptedStacksBlockHeader>::from_row -> Result<AcceptedStacksBlockHeader, db_error> with Ok(Default::default())
stackslib/src/chainstate/burn/db/sortdb.rs:473:9: replace <impl FromRow for StacksEpoch>::from_row -> Result<StacksEpoch, db_error> with Ok(Default::default())
stackslib/src/chainstate/burn/db/sortdb.rs:791:5: replace get_block_commit_by_txid -> Result<Option<LeaderBlockCommitOp>, db_error> with Ok(Some(Default::default()))
stackslib/src/chainstate/burn/db/sortdb.rs:801:5: replace get_ancestor_sort_id -> Result<Option<SortitionId>, db_error> with Ok(Some(Default::default()))
stackslib/src/chainstate/burn/db/sortdb.rs:814:5: replace get_ancestor_sort_id_tx -> Result<Option<SortitionId>, db_error> with Ok(Some(Default::default()))
stackslib/src/chainstate/burn/db/sortdb.rs:881:9: replace db_keys::pox_reward_set_payouts_decode -> (Vec<PoxAddress>, u128) with (vec![Default::default()], 0)
stackslib/src/chainstate/burn/db/sortdb.rs:881:9: replace db_keys::pox_reward_set_payouts_decode -> (Vec<PoxAddress>, u128) with (vec![Default::default()], 1)
stackslib/src/chainstate/burn/db/sortdb.rs:1040:9: replace SortitionHandleTx<'a>::begin -> Result<SortitionHandleTx<'a>, db_error> with Ok(Default::default())
stackslib/src/chainstate/burn/db/sortdb.rs:1064:9: replace SortitionHandleTx<'a>::get_block_snapshot -> Result<Option<BlockSnapshot>, db_error> with Ok(Some(Default::default()))
stackslib/src/chainstate/burn/db/sortdb.rs:1083:9: replace SortitionHandleTx<'a>::get_leader_key_at -> Result<Option<LeaderKeyRegisterOp>, db_error> with Ok(Some(Default::default()))
stackslib/src/chainstate/burn/db/sortdb.rs:1115:9: replace SortitionHandleTx<'a>::get_consumed_leader_keys -> Result<Vec<LeaderKeyRegisterOp>, db_error> with Ok(vec![Default::default()])
stackslib/src/chainstate/burn/db/sortdb.rs:1142:9: replace SortitionHandleTx<'a>::get_block_commit -> Result<Option<LeaderBlockCommitOp>, db_error> with Ok(Some(Default::default()))
stackslib/src/chainstate/burn/db/sortdb.rs:1149:9: replace SortitionHandleTx<'a>::get_consensus_at -> Result<Option<ConsensusHash>, db_error> with Ok(Some(Default::default()))
stackslib/src/chainstate/burn/db/sortdb.rs:1176:9: replace SortitionHandleTx<'a>::get_last_snapshot_with_sortition -> Result<BlockSnapshot, db_error> with Ok(Default::default())
stackslib/src/chainstate/burn/db/sortdb.rs:1255:9: replace SortitionHandleTx<'a>::get_block_commit_parent -> Result<Option<LeaderBlockCommitOp>, db_error> with Ok(Some(Default::default()))
stackslib/src/chainstate/burn/db/sortdb.rs:1348:9: replace <impl SortitionHandle for SortitionHandleTx<'_>>::get_block_snapshot_by_height -> Result<Option<BlockSnapshot>, db_error> with Ok(Some(Default::default()))
stackslib/src/chainstate/burn/db/sortdb.rs:1354:9: replace <impl SortitionHandle for SortitionHandleTx<'_>>::sqlite -> &Connection with &Default::default()
stackslib/src/chainstate/burn/db/sortdb.rs:1363:9: replace <impl SortitionHandle for SortitionHandleConn<'_>>::get_block_snapshot_by_height -> Result<Option<BlockSnapshot>, db_error> with Ok(Some(Default::default()))
stackslib/src/chainstate/burn/db/sortdb.rs:1367:9: replace <impl SortitionHandle for SortitionHandleConn<'_>>::sqlite -> &Connection with &Default::default()
stackslib/src/chainstate/burn/db/sortdb.rs:1412:9: replace SortitionHandleTx<'a>::pick_recipients -> Result<Option<RewardSetInfo>, BurnchainError> with Ok(Some(Default::default()))
stackslib/src/chainstate/burn/db/sortdb.rs:1508:9: replace SortitionHandleTx<'a>::get_reward_set_payouts_at -> Result<(Vec<PoxAddress>, u128), db_error> with Ok((vec![Default::default()], 0))
stackslib/src/chainstate/burn/db/sortdb.rs:1508:9: replace SortitionHandleTx<'a>::get_reward_set_payouts_at -> Result<(Vec<PoxAddress>, u128), db_error> with Ok((vec![Default::default()], 1))
stackslib/src/chainstate/burn/db/sortdb.rs:1531:9: replace SortitionHandleTx<'a>::get_reward_set_entry_at -> Result<PoxAddress, db_error> with Ok(Default::default())
stackslib/src/chainstate/burn/db/sortdb.rs:1541:9: replace SortitionHandleTx<'a>::get_reward_set_entry -> Result<PoxAddress, db_error> with Ok(Default::default())
stackslib/src/chainstate/burn/db/sortdb.rs:1549:9: replace SortitionHandleTx<'a>::get_last_anchor_block_hash -> Result<Option<BlockHeaderHash>, db_error> with Ok(Some(Default::default()))
stackslib/src/chainstate/burn/db/sortdb.rs:1557:9: replace SortitionHandleTx<'a>::get_last_anchor_block_txid -> Result<Option<Txid>, db_error> with Ok(Some(Default::default()))
stackslib/src/chainstate/burn/db/sortdb.rs:1565:9: replace SortitionHandleTx<'a>::get_sortition_affirmation_map -> Result<AffirmationMap, db_error> with Ok(Default::default())
stackslib/src/chainstate/burn/db/sortdb.rs:1578:9: replace SortitionHandleTx<'a>::get_last_selected_anchor_block_hash -> Result<Option<BlockHeaderHash>, db_error> with Ok(Some(Default::default()))
stackslib/src/chainstate/burn/db/sortdb.rs:1586:9: replace SortitionHandleTx<'a>::get_last_selected_anchor_block_txid -> Result<Option<Txid>, db_error> with Ok(Some(Default::default()))
stackslib/src/chainstate/burn/db/sortdb.rs:1645:9: replace SortitionHandleConn<'a>::open_reader_consensus -> Result<SortitionHandleConn<'a>, db_error> with Ok(Default::default())
stackslib/src/chainstate/burn/db/sortdb.rs:1675:9: replace SortitionHandleConn<'a>::get_last_anchor_block_hash -> Result<Option<BlockHeaderHash>, db_error> with Ok(Some(Default::default()))
stackslib/src/chainstate/burn/db/sortdb.rs:1682:9: replace SortitionHandleConn<'a>::get_last_anchor_block_txid -> Result<Option<Txid>, db_error> with Ok(Some(Default::default()))
stackslib/src/chainstate/burn/db/sortdb.rs:1689:9: replace SortitionHandleConn<'a>::get_sortition_affirmation_map -> Result<AffirmationMap, db_error> with Ok(Default::default())
stackslib/src/chainstate/burn/db/sortdb.rs:1700:9: replace SortitionHandleConn<'a>::get_last_selected_anchor_block_hash -> Result<Option<BlockHeaderHash>, db_error> with Ok(Some(Default::default()))
stackslib/src/chainstate/burn/db/sortdb.rs:1708:9: replace SortitionHandleConn<'a>::get_last_selected_anchor_block_txid -> Result<Option<Txid>, db_error> with Ok(Some(Default::default()))
stackslib/src/chainstate/burn/db/sortdb.rs:1719:9: replace SortitionHandleConn<'a>::get_reward_cycle_unlocks -> Result<Option<PoxStartCycleInfo>, db_error> with Ok(Some(Default::default()))
stackslib/src/chainstate/burn/db/sortdb.rs:1729:9: replace SortitionHandleConn<'a>::get_pox_id -> Result<PoxId, db_error> with Ok(Default::default())
stackslib/src/chainstate/burn/db/sortdb.rs:1741:9: replace SortitionHandleConn<'a>::open_reader -> Result<SortitionHandleConn<'a>, db_error> with Ok(Default::default())
stackslib/src/chainstate/burn/db/sortdb.rs:1759:9: replace SortitionHandleConn<'a>::get_sortition_id_for_bhh -> Result<Option<SortitionId>, db_error> with Ok(Some(Default::default()))
stackslib/src/chainstate/burn/db/sortdb.rs:1774:9: replace SortitionHandleConn<'a>::get_block_snapshot -> Result<Option<BlockSnapshot>, db_error> with Ok(Some(Default::default()))
stackslib/src/chainstate/burn/db/sortdb.rs:1782:9: replace SortitionHandleConn<'a>::get_tip_snapshot -> Result<Option<BlockSnapshot>, db_error> with Ok(Some(Default::default()))
stackslib/src/chainstate/burn/db/sortdb.rs:1786:9: replace SortitionHandleConn<'a>::get_first_block_snapshot -> Result<BlockSnapshot, db_error> with Ok(Default::default())
stackslib/src/chainstate/burn/db/sortdb.rs:1793:9: replace SortitionHandleConn<'a>::get_consensus_at -> Result<Option<ConsensusHash>, db_error> with Ok(Some(Default::default()))
stackslib/src/chainstate/burn/db/sortdb.rs:1805:9: replace SortitionHandleConn<'a>::get_block_snapshot_by_height -> Result<Option<BlockSnapshot>, db_error> with Ok(Some(Default::default()))
stackslib/src/chainstate/burn/db/sortdb.rs:1814:9: replace SortitionHandleConn<'a>::get_winning_user_burns_by_block -> Result<Vec<UserBurnSupportOp>, db_error> with Ok(vec![Default::default()])
stackslib/src/chainstate/burn/db/sortdb.rs:1878:9: replace SortitionHandleConn<'a>::get_block_snapshot_of_parent_stacks_block -> Result<Option<(LeaderBlockCommitOp, BlockSnapshot)>, db_error> with Ok(Some((Default::default(), Default::default())))
stackslib/src/chainstate/burn/db/sortdb.rs:1935:9: replace SortitionHandleConn<'a>::get_last_snapshot_with_sortition -> Result<BlockSnapshot, db_error> with Ok(Default::default())
stackslib/src/chainstate/burn/db/sortdb.rs:1977:9: replace SortitionHandleConn<'a>::get_leader_key_at -> Result<Option<LeaderKeyRegisterOp>, db_error> with Ok(Some(Default::default()))
stackslib/src/chainstate/burn/db/sortdb.rs:1990:9: replace SortitionHandleConn<'a>::get_block_commit_parent -> Result<Option<LeaderBlockCommitOp>, db_error> with Ok(Some(Default::default()))
stackslib/src/chainstate/burn/db/sortdb.rs:2001:9: replace SortitionHandleConn<'a>::get_block_commit_by_txid -> Result<Option<LeaderBlockCommitOp>, db_error> with Ok(Some(Default::default()))
stackslib/src/chainstate/burn/db/sortdb.rs:2011:9: replace SortitionHandleConn<'a>::get_sortition_winners_in_fork -> Result<Vec<(SortitionId, Txid, u64)>, BurnchainError> with Ok(vec![(Default::default(), Default::default(), 0)])
stackslib/src/chainstate/burn/db/sortdb.rs:2011:9: replace SortitionHandleConn<'a>::get_sortition_winners_in_fork -> Result<Vec<(SortitionId, Txid, u64)>, BurnchainError> with Ok(vec![(Default::default(), Default::default(), 1)])
stackslib/src/chainstate/burn/db/sortdb.rs:2101:9: replace SortitionHandleConn<'a>::get_chosen_pox_anchor -> Result<Option<(ConsensusHash, BlockHeaderHash, Txid)>, CoordinatorError> with Ok(Some((Default::default(), Default::default(), Default::default())))
stackslib/src/chainstate/burn/db/sortdb.rs:2122:9: replace SortitionHandleConn<'a>::get_chosen_pox_anchor_v210 -> Result<Option<(ConsensusHash, BlockHeaderHash, Txid)>, CoordinatorError> with Ok(Some((Default::default(), Default::default(), Default::default())))
stackslib/src/chainstate/burn/db/sortdb.rs:2212:9: replace SortitionHandleConn<'a>::get_chosen_pox_anchor_v205 -> Result<Option<(ConsensusHash, BlockHeaderHash, Txid)>, CoordinatorError> with Ok(Some((Default::default(), Default::default(), Default::default())))
stackslib/src/chainstate/burn/db/sortdb.rs:2227:9: replace SortitionHandleConn<'a>::get_chosen_pox_anchor_check_position_v205 -> Result<Result<(ConsensusHash, BlockHeaderHash, Txid, u32), u32>, CoordinatorError> with Ok(Ok((Default::default(), Default::default(), Default::default(), 0)))
stackslib/src/chainstate/burn/db/sortdb.rs:2227:9: replace SortitionHandleConn<'a>::get_chosen_pox_anchor_check_position_v205 -> Result<Result<(ConsensusHash, BlockHeaderHash, Txid, u32), u32>, CoordinatorError> with Ok(Ok((Default::default(), Default::default(), Default::default(), 1)))
stackslib/src/chainstate/burn/db/sortdb.rs:2347:9: replace SortitionDB::tx_begin -> Result<SortitionDBTx<'a>, db_error> with Ok(Default::default())
stackslib/src/chainstate/burn/db/sortdb.rs:2363:9: replace SortitionDB::index_conn -> SortitionDBConn<'a> with Default::default()
stackslib/src/chainstate/burn/db/sortdb.rs:2373:9: replace SortitionDB::index_handle -> SortitionHandleConn<'a> with Default::default()
stackslib/src/chainstate/burn/db/sortdb.rs:2387:9: replace SortitionDB::tx_handle_begin -> Result<SortitionHandleTx<'a>, db_error> with Ok(Default::default())
stackslib/src/chainstate/burn/db/sortdb.rs:2402:9: replace SortitionDB::conn -> &'a Connection with &Default::default()
stackslib/src/chainstate/burn/db/sortdb.rs:2406:9: replace SortitionDB::open_index -> Result<MARF<SortitionId>, db_error> with Ok(MARF::new())
stackslib/src/chainstate/burn/db/sortdb.rs:2406:9: replace SortitionDB::open_index -> Result<MARF<SortitionId>, db_error> with Ok(MARF::from_iter([Default::default()]))
stackslib/src/chainstate/burn/db/sortdb.rs:2406:9: replace SortitionDB::open_index -> Result<MARF<SortitionId>, db_error> with Ok(MARF::new(Default::default()))
stackslib/src/chainstate/burn/db/sortdb.rs:2406:9: replace SortitionDB::open_index -> Result<MARF<SortitionId>, db_error> with Ok(MARF::from(Default::default()))
stackslib/src/chainstate/burn/db/sortdb.rs:2421:9: replace SortitionDB::open -> Result<SortitionDB, db_error> with Ok(Default::default())
stackslib/src/chainstate/burn/db/sortdb.rs:2454:9: replace SortitionDB::connect -> Result<SortitionDB, db_error> with Ok(Default::default())
stackslib/src/chainstate/burn/db/sortdb.rs:2767:9: replace SortitionDB::get_block_commit -> Result<Option<LeaderBlockCommitOp>, db_error> with Ok(Some(Default::default()))
stackslib/src/chainstate/burn/db/sortdb.rs:2781:9: replace SortitionDB::get_block_commit_parent_sortition_id -> Result<Option<SortitionId>, db_error> with Ok(Some(Default::default()))
stackslib/src/chainstate/burn/db/sortdb.rs:2788:9: replace SortitionDB::get_all_snapshots -> Result<Vec<BlockSnapshot>, db_error> with Ok(vec![Default::default()])
stackslib/src/chainstate/burn/db/sortdb.rs:2797:9: replace SortitionDB::get_all_snapshots_for_burn_block -> Result<Vec<BlockSnapshot>, db_error> with Ok(vec![Default::default()])
stackslib/src/chainstate/burn/db/sortdb.rs:3141:9: replace SortitionDB::get_ast_rules -> Result<ASTRules, db_error> with Ok(Default::default())
stackslib/src/chainstate/burn/db/sortdb.rs:3167:9: replace SortitionDBTx<'a>::find_sortition_tip_affirmation_map -> Result<AffirmationMap, db_error> with Ok(Default::default())
stackslib/src/chainstate/burn/db/sortdb.rs:3185:9: replace SortitionDBConn<'a>::as_handle -> SortitionHandleConn<'b> with Default::default()
stackslib/src/chainstate/burn/db/sortdb.rs:3208:9: replace SortitionDBConn<'a>::get_stacks_header_hashes -> Result<Vec<(ConsensusHash, Option<BlockHeaderHash>)>, db_error> with Ok(vec![(Default::default(), None)])
stackslib/src/chainstate/burn/db/sortdb.rs:3208:9: replace SortitionDBConn<'a>::get_stacks_header_hashes -> Result<Vec<(ConsensusHash, Option<BlockHeaderHash>)>, db_error> with Ok(vec![(Default::default(), Some(Default::default()))])
stackslib/src/chainstate/burn/db/sortdb.rs:3293:9: replace SortitionDBConn<'a>::find_parent_snapshot_for_stacks_block -> Result<Option<BlockSnapshot>, db_error> with Ok(Some(Default::default()))
stackslib/src/chainstate/burn/db/sortdb.rs:3340:9: replace SortitionDBConn<'a>::get_reward_set_entry_at -> Result<PoxAddress, db_error> with Ok(Default::default())
stackslib/src/chainstate/burn/db/sortdb.rs:3353:9: replace SortitionDBConn<'a>::get_reward_set_payouts_at -> Result<(Vec<PoxAddress>, u128), db_error> with Ok((vec![Default::default()], 0))
stackslib/src/chainstate/burn/db/sortdb.rs:3353:9: replace SortitionDBConn<'a>::get_reward_set_payouts_at -> Result<(Vec<PoxAddress>, u128), db_error> with Ok((vec![Default::default()], 1))
stackslib/src/chainstate/burn/db/sortdb.rs:3371:9: replace SortitionDB::get_sortition_id -> Result<Option<SortitionId>, BurnchainError> with Ok(Some(Default::default()))
stackslib/src/chainstate/burn/db/sortdb.rs:3381:9: replace SortitionDB::is_sortition_processed -> Result<Option<SortitionId>, BurnchainError> with Ok(Some(Default::default()))
stackslib/src/chainstate/burn/db/sortdb.rs:3402:9: replace SortitionDB::is_stacks_block_pox_anchor -> Result<Option<BlockHeaderHash>, BurnchainError> with Ok(Some(Default::default()))
stackslib/src/chainstate/burn/db/sortdb.rs:3411:9: replace SortitionDB::parse_last_anchor_block_hash -> Option<BlockHeaderHash> with Some(Default::default())
stackslib/src/chainstate/burn/db/sortdb.rs:3422:9: replace SortitionDB::parse_last_anchor_block_txid -> Option<Txid> with Some(Default::default())
stackslib/src/chainstate/burn/db/sortdb.rs:3547:9: replace SortitionDB::find_snapshots_with_dirty_canonical_block_pointers -> Result<Vec<SortitionId>, Error> with Ok(vec![Default::default()])
stackslib/src/chainstate/burn/db/sortdb.rs:3575:9: replace SortitionDB::get_pox_id -> Result<PoxId, BurnchainError> with Ok(Default::default())
stackslib/src/chainstate/burn/db/sortdb.rs:3558:9: replace SortitionDB::get_prepare_end_for -> Result<Option<BlockSnapshot>, BurnchainError> with Ok(Some(Default::default()))
stackslib/src/chainstate/burn/db/sortdb.rs:3583:9: replace SortitionDB::get_sortition_result -> Result<Option<(BlockSnapshot, BurnchainStateTransitionOps)>, BurnchainError> with Ok(Some((Default::default(), Default::default())))
stackslib/src/chainstate/burn/db/sortdb.rs:3609:9: replace SortitionDB::make_next_pox_id -> PoxId with Default::default()
stackslib/src/chainstate/burn/db/sortdb.rs:3634:9: replace SortitionDB::make_next_sortition_id -> SortitionId with Default::default()
stackslib/src/chainstate/burn/db/sortdb.rs:3660:9: replace SortitionDB::evaluate_sortition -> Result<(BlockSnapshot, BurnchainStateTransition), BurnchainError> with Ok((Default::default(), Default::default()))
stackslib/src/chainstate/burn/db/sortdb.rs:3764:9: replace SortitionDB::get_next_block_recipients -> Result<Option<RewardSetInfo>, BurnchainError> with Ok(Some(Default::default()))
stackslib/src/chainstate/burn/db/sortdb.rs:3818:9: replace SortitionDB::get_burnchain_view -> Result<BurnchainView, db_error> with Ok(Default::default())
stackslib/src/chainstate/burn/db/sortdb.rs:3923:9: replace SortitionDB::get_canonical_burn_chain_tip -> Result<BlockSnapshot, db_error> with Ok(Default::default())
stackslib/src/chainstate/burn/db/sortdb.rs:3931:9: replace SortitionDB::get_highest_known_burn_chain_tip -> Result<BlockSnapshot, db_error> with Ok(Default::default())
stackslib/src/chainstate/burn/db/sortdb.rs:3939:9: replace SortitionDB::get_canonical_chain_tip_bhh -> Result<BurnchainHeaderHash, db_error> with Ok(Default::default())
stackslib/src/chainstate/burn/db/sortdb.rs:3951:9: replace SortitionDB::get_canonical_sortition_tip -> Result<SortitionId, db_error> with Ok(Default::default())
stackslib/src/chainstate/burn/db/sortdb.rs:3963:9: replace SortitionDB::find_sortition_tip_affirmation_map -> Result<AffirmationMap, db_error> with Ok(Default::default())
stackslib/src/chainstate/burn/db/sortdb.rs:3982:9: replace SortitionDB::get_stack_stx_ops -> Result<Vec<StackStxOp>, db_error> with Ok(vec![Default::default()])
stackslib/src/chainstate/burn/db/sortdb.rs:3996:9: replace SortitionDB::get_delegate_stx_ops -> Result<Vec<DelegateStxOp>, db_error> with Ok(vec![Default::default()])
stackslib/src/chainstate/burn/db/sortdb.rs:4010:9: replace SortitionDB::get_transfer_stx_ops -> Result<Vec<TransferStxOp>, db_error> with Ok(vec![Default::default()])
stackslib/src/chainstate/burn/db/sortdb.rs:4022:9: replace SortitionDB::get_parent_burnchain_header_hash -> Result<Option<BurnchainHeaderHash>, db_error> with Ok(Some(Default::default()))
stackslib/src/chainstate/burn/db/sortdb.rs:4063:9: replace SortitionDB::get_ancestor_burnchain_header_hashes -> Result<Vec<BurnchainHeaderHash>, db_error> with Ok(vec![Default::default()])
stackslib/src/chainstate/burn/db/sortdb.rs:4080:9: replace SortitionDB::index_handle_at_tip -> SortitionHandleConn<'a> with Default::default()
stackslib/src/chainstate/burn/db/sortdb.rs:4086:9: replace SortitionDB::tx_begin_at_tip -> SortitionHandleTx<'a> with Default::default()
stackslib/src/chainstate/burn/db/sortdb.rs:4094:9: replace SortitionDB::get_canonical_stacks_chain_tip_hash -> Result<(ConsensusHash, BlockHeaderHash), db_error> with Ok((Default::default(), Default::default()))
stackslib/src/chainstate/burn/db/sortdb.rs:4122:9: replace SortitionDB::get_snapshot_by_arrival_index -> Result<Option<BlockSnapshot>, db_error> with Ok(Some(Default::default()))
stackslib/src/chainstate/burn/db/sortdb.rs:4134:9: replace SortitionDB::get_sortition_id_by_consensus -> Result<Option<SortitionId>, db_error> with Ok(Some(Default::default()))
stackslib/src/chainstate/burn/db/sortdb.rs:4150:9: replace SortitionDB::get_block_snapshot_consensus -> Result<Option<BlockSnapshot>, db_error> with Ok(Some(Default::default()))
stackslib/src/chainstate/burn/db/sortdb.rs:4166:9: replace SortitionDB::get_block_snapshot -> Result<Option<BlockSnapshot>, db_error> with Ok(Some(Default::default()))
stackslib/src/chainstate/burn/db/sortdb.rs:4184:9: replace SortitionDB::get_first_block_snapshot -> Result<BlockSnapshot, db_error> with Ok(Default::default())
stackslib/src/chainstate/burn/db/sortdb.rs:4274:9: replace SortitionDB::get_user_burns_by_block -> Result<Vec<UserBurnSupportOp>, db_error> with Ok(vec![Default::default()])
stackslib/src/chainstate/burn/db/sortdb.rs:4286:9: replace SortitionDB::get_block_commits_by_block -> Result<Vec<LeaderBlockCommitOp>, db_error> with Ok(vec![Default::default()])
stackslib/src/chainstate/burn/db/sortdb.rs:4298:9: replace SortitionDB::get_missed_commits_by_intended -> Result<Vec<MissedBlockCommit>, db_error> with Ok(vec![Default::default()])
stackslib/src/chainstate/burn/db/sortdb.rs:4310:9: replace SortitionDB::get_leader_keys_by_block -> Result<Vec<LeaderKeyRegisterOp>, db_error> with Ok(vec![Default::default()])
stackslib/src/chainstate/burn/db/sortdb.rs:4340:9: replace SortitionDB::get_ancestor_snapshot -> Result<Option<BlockSnapshot>, db_error> with Ok(Some(Default::default()))
stackslib/src/chainstate/burn/db/sortdb.rs:4363:9: replace SortitionDB::get_ancestor_snapshot_tx -> Result<Option<BlockSnapshot>, db_error> with Ok(Some(Default::default()))
stackslib/src/chainstate/burn/db/sortdb.rs:4387:9: replace SortitionDB::get_block_commit_parent -> Result<Option<LeaderBlockCommitOp>, db_error> with Ok(Some(Default::default()))
stackslib/src/chainstate/burn/db/sortdb.rs:4404:9: replace SortitionDB::get_block_commit_of_sortition -> Result<Option<LeaderBlockCommitOp>, db_error> with Ok(Some(Default::default()))
stackslib/src/chainstate/burn/db/sortdb.rs:4426:9: replace SortitionDB::get_leader_key_at -> Result<Option<LeaderKeyRegisterOp>, db_error> with Ok(Some(Default::default()))
stackslib/src/chainstate/burn/db/sortdb.rs:4455:9: replace SortitionDB::get_block_commit_for_stacks_block -> Result<Option<LeaderBlockCommitOp>, db_error> with Ok(Some(Default::default()))
stackslib/src/chainstate/burn/db/sortdb.rs:4484:9: replace SortitionDB::get_block_snapshot_for_winning_stacks_block -> Result<Option<BlockSnapshot>, db_error> with Ok(Some(Default::default()))
stackslib/src/chainstate/burn/db/sortdb.rs:4568:9: replace SortitionDB::get_stacks_epoch -> Result<Option<StacksEpoch>, db_error> with Ok(Some(Default::default()))
stackslib/src/chainstate/burn/db/sortdb.rs:4583:9: replace SortitionDB::get_sortition_ids_at_height -> Result<Vec<SortitionId>, db_error> with Ok(vec![Default::default()])
stackslib/src/chainstate/burn/db/sortdb.rs:4592:9: replace SortitionDB::get_stacks_epochs -> Result<Vec<StacksEpoch>, db_error> with Ok(vec![Default::default()])
stackslib/src/chainstate/burn/db/sortdb.rs:4600:9: replace SortitionDB::get_stacks_epoch_by_epoch_id -> Result<Option<StacksEpoch>, db_error> with Ok(Some(Default::default()))
stackslib/src/chainstate/burn/db/sortdb.rs:4641:9: replace SortitionDB::get_last_snapshot_with_sortition_tx -> Result<BlockSnapshot, db_error> with Ok(Default::default())
stackslib/src/chainstate/burn/db/sortdb.rs:4797:9: replace SortitionHandleTx<'a>::get_pox_id -> Result<PoxId, db_error> with Ok(Default::default())
stackslib/src/chainstate/burn/db/sortdb.rs:5219:9: replace SortitionHandleTx<'a>::index_add_fork_info -> Result<(TrieHash, (Vec<PoxAddress>, u128)), db_error> with Ok((Default::default(), (vec![Default::default()], 0)))
stackslib/src/chainstate/burn/db/sortdb.rs:5219:9: replace SortitionHandleTx<'a>::index_add_fork_info -> Result<(TrieHash, (Vec<PoxAddress>, u128)), db_error> with Ok((Default::default(), (vec![Default::default()], 1)))
stackslib/src/chainstate/burn/db/sortdb.rs:5604:9: replace SortitionHandleTx<'a>::inner_find_new_block_arrivals -> Result<(ConsensusHash, BlockHeaderHash, u64, u64, Vec<(BlockHeaderHash, u64)>,), db_error, > with Ok((Default::default(), Default::default(), 0, 0, vec![]))
stackslib/src/chainstate/burn/db/sortdb.rs:5604:9: replace SortitionHandleTx<'a>::inner_find_new_block_arrivals -> Result<(ConsensusHash, BlockHeaderHash, u64, u64, Vec<(BlockHeaderHash, u64)>,), db_error, > with Ok((Default::default(), Default::default(), 0, 0, vec![(Default::default(), 0)]))
stackslib/src/chainstate/burn/db/sortdb.rs:5604:9: replace SortitionHandleTx<'a>::inner_find_new_block_arrivals -> Result<(ConsensusHash, BlockHeaderHash, u64, u64, Vec<(BlockHeaderHash, u64)>,), db_error, > with Ok((Default::default(), Default::default(), 0, 0, vec![(Default::default(), 1)]))
stackslib/src/chainstate/burn/db/sortdb.rs:5604:9: replace SortitionHandleTx<'a>::inner_find_new_block_arrivals -> Result<(ConsensusHash, BlockHeaderHash, u64, u64, Vec<(BlockHeaderHash, u64)>,), db_error, > with Ok((Default::default(), Default::default(), 0, 1, vec![]))
stackslib/src/chainstate/burn/db/sortdb.rs:5604:9: replace SortitionHandleTx<'a>::inner_find_new_block_arrivals -> Result<(ConsensusHash, BlockHeaderHash, u64, u64, Vec<(BlockHeaderHash, u64)>,), db_error, > with Ok((Default::default(), Default::default(), 0, 1, vec![(Default::default(), 0)]))
stackslib/src/chainstate/burn/db/sortdb.rs:5604:9: replace SortitionHandleTx<'a>::inner_find_new_block_arrivals -> Result<(ConsensusHash, BlockHeaderHash, u64, u64, Vec<(BlockHeaderHash, u64)>,), db_error, > with Ok((Default::default(), Default::default(), 0, 1, vec![(Default::default(), 1)]))
stackslib/src/chainstate/burn/db/sortdb.rs:5604:9: replace SortitionHandleTx<'a>::inner_find_new_block_arrivals -> Result<(ConsensusHash, BlockHeaderHash, u64, u64, Vec<(BlockHeaderHash, u64)>,), db_error, > with Ok((Default::default(), Default::default(), 1, 0, vec![]))
stackslib/src/chainstate/burn/db/sortdb.rs:5604:9: replace SortitionHandleTx<'a>::inner_find_new_block_arrivals -> Result<(ConsensusHash, BlockHeaderHash, u64, u64, Vec<(BlockHeaderHash, u64)>,), db_error, > with Ok((Default::default(), Default::default(), 1, 0, vec![(Default::default(), 0)]))
stackslib/src/chainstate/burn/db/sortdb.rs:5604:9: replace SortitionHandleTx<'a>::inner_find_new_block_arrivals -> Result<(ConsensusHash, BlockHeaderHash, u64, u64, Vec<(BlockHeaderHash, u64)>,), db_error, > with Ok((Default::default(), Default::default(), 1, 0, vec![(Default::default(), 1)]))
stackslib/src/chainstate/burn/db/sortdb.rs:5604:9: replace SortitionHandleTx<'a>::inner_find_new_block_arrivals -> Result<(ConsensusHash, BlockHeaderHash, u64, u64, Vec<(BlockHeaderHash, u64)>,), db_error, > with Ok((Default::default(), Default::default(), 1, 1, vec![]))
stackslib/src/chainstate/burn/db/sortdb.rs:5604:9: replace SortitionHandleTx<'a>::inner_find_new_block_arrivals -> Result<(ConsensusHash, BlockHeaderHash, u64, u64, Vec<(BlockHeaderHash, u64)>,), db_error, > with Ok((Default::default(), Default::default(), 1, 1, vec![(Default::default(), 0)]))
stackslib/src/chainstate/burn/db/sortdb.rs:5604:9: replace SortitionHandleTx<'a>::inner_find_new_block_arrivals -> Result<(ConsensusHash, BlockHeaderHash, u64, u64, Vec<(BlockHeaderHash, u64)>,), db_error, > with Ok((Default::default(), Default::default(), 1, 1, vec![(Default::default(), 1)]))
stackslib/src/chainstate/burn/db/sortdb.rs:5729:9: replace SortitionHandleTx<'a>::find_new_block_arrivals -> Result<(ConsensusHash, BlockHeaderHash, u64), db_error> with Ok((Default::default(), Default::default(), 0))
stackslib/src/chainstate/burn/db/sortdb.rs:5729:9: replace SortitionHandleTx<'a>::find_new_block_arrivals -> Result<(ConsensusHash, BlockHeaderHash, u64), db_error> with Ok((Default::default(), Default::default(), 1))
stackslib/src/chainstate/burn/operations/delegate_stx.rs:26:9: replace DelegateStxOp::from_tx -> Result<DelegateStxOp, op_error> with Ok(Default::default())
stackslib/src/chainstate/burn/operations/delegate_stx.rs:55:9: replace DelegateStxOp::parse_data -> Option<ParsedData> with Some(Default::default())
stackslib/src/chainstate/burn/operations/delegate_stx.rs:106:9: replace DelegateStxOp::get_sender_txid -> Result<&Txid, op_error> with Ok(&Default::default())
stackslib/src/chainstate/burn/operations/delegate_stx.rs:128:9: replace DelegateStxOp::parse_from_tx -> Result<DelegateStxOp, op_error> with Ok(Default::default())
stackslib/src/chainstate/burn/operations/delegate_stx.rs:258:9: replace <impl StacksMessageCodec for DelegateStxOp>::consensus_deserialize -> Result<DelegateStxOp, codec_error> with Ok(Default::default())
stackslib/src/chainstate/burn/operations/leader_block_commit.rs:175:9: replace LeaderBlockCommitOp::parse_data -> Option<ParsedData> with Some(Default::default())
stackslib/src/chainstate/burn/operations/leader_block_commit.rs:215:9: replace LeaderBlockCommitOp::from_tx -> Result<LeaderBlockCommitOp, op_error> with Ok(Default::default())
stackslib/src/chainstate/burn/operations/leader_block_commit.rs:237:9: replace LeaderBlockCommitOp::parse_from_tx -> Result<LeaderBlockCommitOp, op_error> with Ok(Default::default())
stackslib/src/chainstate/burn/operations/leader_block_commit.rs:427:9: replace LeaderBlockCommitOp::spent_txid -> &Txid with &Default::default()
stackslib/src/chainstate/burn/operations/leader_block_commit.rs:484:9: replace MissedBlockCommit::spent_txid -> &Txid with &Default::default()
stackslib/src/chainstate/burn/operations/leader_block_commit.rs:465:9: replace <impl StacksMessageCodec for LeaderBlockCommitOp>::consensus_deserialize -> Result<LeaderBlockCommitOp, codec_error> with Ok(Default::default())
stackslib/src/chainstate/burn/operations/leader_block_commit.rs:499:9: replace RewardSetInfo::from_missed_commit -> Result<Option<RewardSetInfo>, op_error> with Ok(Some(Default::default()))
stackslib/src/chainstate/burn/operations/leader_block_commit.rs:518:9: replace RewardSetInfo::into_commit_outs -> Vec<PoxAddress> with vec![Default::default()]
stackslib/src/chainstate/burn/operations/leader_block_commit.rs:768:9: replace LeaderBlockCommitOp::check_intended_sortition -> Result<SortitionId, op_error> with Ok(Default::default())
stackslib/src/chainstate/burn/operations/leader_key_register.rs:85:9: replace LeaderKeyRegisterOp::parse_data -> Option<ParsedData> with Some(Default::default())
stackslib/src/chainstate/burn/operations/leader_key_register.rs:119:9: replace LeaderKeyRegisterOp::parse_from_tx -> Result<LeaderKeyRegisterOp, op_error> with Ok(Default::default())
stackslib/src/chainstate/burn/operations/leader_key_register.rs:191:9: replace <impl StacksMessageCodec for LeaderKeyRegisterOp>::consensus_deserialize -> Result<LeaderKeyRegisterOp, codec_error> with Ok(Default::default())
stackslib/src/chainstate/burn/operations/leader_key_register.rs:200:9: replace LeaderKeyRegisterOp::from_tx -> Result<LeaderKeyRegisterOp, op_error> with Ok(Default::default())
stackslib/src/chainstate/burn/operations/stack_stx.rs:69:9: replace PreStxOp::from_tx -> Result<PreStxOp, op_error> with Ok(Default::default())
stackslib/src/chainstate/burn/operations/stack_stx.rs:88:9: replace PreStxOp::parse_from_tx -> Result<PreStxOp, op_error> with Ok(Default::default())
stackslib/src/chainstate/burn/operations/stack_stx.rs:183:9: replace StackStxOp::parse_data -> Option<ParsedData> with Some(Default::default())
stackslib/src/chainstate/burn/operations/stack_stx.rs:203:9: replace StackStxOp::get_sender_txid -> Result<&Txid, op_error> with Ok(&Default::default())
stackslib/src/chainstate/burn/operations/stack_stx.rs:226:9: replace StackStxOp::from_tx -> Result<StackStxOp, op_error> with Ok(Default::default())
stackslib/src/chainstate/burn/operations/stack_stx.rs:247:9: replace StackStxOp::parse_from_tx -> Result<StackStxOp, op_error> with Ok(Default::default())
stackslib/src/chainstate/burn/operations/stack_stx.rs:319:9: replace <impl StacksMessageCodec for PreStxOp>::consensus_deserialize -> Result<PreStxOp, codec_error> with Ok(Default::default())
stackslib/src/chainstate/burn/operations/stack_stx.rs:340:9: replace <impl StacksMessageCodec for StackStxOp>::consensus_deserialize -> Result<StackStxOp, codec_error> with Ok(Default::default())
stackslib/src/chainstate/burn/operations/transfer_stx.rs:80:9: replace TransferStxOp::parse_data -> Option<ParsedData> with Some(Default::default())
stackslib/src/chainstate/burn/operations/transfer_stx.rs:110:9: replace TransferStxOp::get_sender_txid -> Result<&Txid, op_error> with Ok(&Default::default())
stackslib/src/chainstate/burn/operations/transfer_stx.rs:133:9: replace TransferStxOp::from_tx -> Result<TransferStxOp, op_error> with Ok(Default::default())
stackslib/src/chainstate/burn/operations/transfer_stx.rs:149:9: replace TransferStxOp::parse_from_tx -> Result<TransferStxOp, op_error> with Ok(Default::default())
stackslib/src/chainstate/burn/operations/transfer_stx.rs:224:9: replace <impl StacksMessageCodec for TransferStxOp>::consensus_deserialize -> Result<TransferStxOp, codec_error> with Ok(Default::default())
stackslib/src/chainstate/burn/operations/user_burn_support.rs:60:9: replace UserBurnSupportOp::parse_data -> Option<ParsedData> with Some(Default::default())
stackslib/src/chainstate/burn/operations/user_burn_support.rs:101:9: replace UserBurnSupportOp::parse_from_tx -> Result<UserBurnSupportOp, op_error> with Ok(Default::default())
stackslib/src/chainstate/burn/operations/user_burn_support.rs:218:9: replace <impl StacksMessageCodec for UserBurnSupportOp>::consensus_deserialize -> Result<UserBurnSupportOp, codec_error> with Ok(Default::default())
stackslib/src/chainstate/burn/operations/user_burn_support.rs:227:9: replace UserBurnSupportOp::from_tx -> Result<UserBurnSupportOp, op_error> with Ok(Default::default())
stackslib/src/chainstate/stacks/boot/docs.rs:9:5: replace make_contract_support_docs -> HashMap<&'static str, ContractSupportDocs> with HashMap::from_iter([("", Default::default())])
stackslib/src/chainstate/stacks/boot/docs.rs:9:5: replace make_contract_support_docs -> HashMap<&'static str, ContractSupportDocs> with HashMap::from_iter([("xyzzy", Default::default())])
stackslib/src/chainstate/stacks/db/accounts.rs:62:9: replace <impl FromRow for MinerPaymentSchedule>::from_row -> Result<MinerPaymentSchedule, db_error> with Ok(Default::default())
stackslib/src/chainstate/stacks/db/accounts.rs:118:9: replace <impl FromRow for MinerReward>::from_row -> Result<MinerReward, db_error> with Ok(Default::default())
stackslib/src/chainstate/stacks/db/accounts.rs:171:9: replace MinerReward::try_add_parent -> Option<MinerReward> with Some(Default::default())
stackslib/src/chainstate/stacks/db/accounts.rs:189:9: replace MinerReward::genesis -> MinerReward with Default::default()
stackslib/src/chainstate/stacks/db/accounts.rs:216:9: replace MinerPaymentSchedule::genesis -> MinerPaymentSchedule with Default::default()
stackslib/src/chainstate/stacks/db/accounts.rs:261:9: replace StacksChainState::get_account -> StacksAccount with Default::default()
stackslib/src/chainstate/stacks/db/accounts.rs:297:9: replace StacksChainState::get_account_nft -> Result<PrincipalData, Error> with Ok(Default::default())
stackslib/src/chainstate/stacks/db/accounts.rs:646:9: replace StacksChainState::inner_get_matured_miner_payments -> Result<Vec<MinerReward>, Error> with Ok(vec![Default::default()])
stackslib/src/chainstate/stacks/db/accounts.rs:659:9: replace StacksChainState::get_matured_miner_payment -> Result<Option<MinerReward>, Error> with Ok(Some(Default::default()))
stackslib/src/chainstate/stacks/db/accounts.rs:696:9: replace StacksChainState::get_poison_microblock_report -> Result<Option<(StacksAddress, u16)>, Error> with Ok(Some((Default::default(), 0)))
stackslib/src/chainstate/stacks/db/accounts.rs:696:9: replace StacksChainState::get_poison_microblock_report -> Result<Option<(StacksAddress, u16)>, Error> with Ok(Some((Default::default(), 1)))
stackslib/src/chainstate/stacks/db/accounts.rs:710:9: replace StacksChainState::get_scheduled_block_rewards_at_block -> Result<Vec<MinerPaymentSchedule>, Error> with Ok(vec![Default::default()])
stackslib/src/chainstate/stacks/db/accounts.rs:725:9: replace StacksChainState::get_scheduled_block_rewards_in_fork_at_height -> Result<Vec<MinerPaymentSchedule>, Error> with Ok(vec![Default::default()])
stackslib/src/chainstate/stacks/db/accounts.rs:753:9: replace StacksChainState::get_scheduled_block_rewards -> Result<Vec<MinerPaymentSchedule>, Error> with Ok(vec![Default::default()])
stackslib/src/chainstate/stacks/db/accounts.rs:767:9: replace StacksChainState::get_miner_info -> Result<Option<MinerPaymentSchedule>, Error> with Ok(Some(Default::default()))
stackslib/src/chainstate/stacks/db/accounts.rs:816:9: replace StacksChainState::calculate_miner_reward -> (MinerReward, MinerReward) with (Default::default(), Default::default())
stackslib/src/chainstate/stacks/db/accounts.rs:979:9: replace StacksChainState::find_mature_miner_rewards -> Result<Option<(MinerReward, Vec<MinerReward>, MinerReward, MinerRewardInfo)>, Error> with Ok(Some((Default::default(), vec![], Default::default(), Default::default())))
stackslib/src/chainstate/stacks/db/accounts.rs:979:9: replace StacksChainState::find_mature_miner_rewards -> Result<Option<(MinerReward, Vec<MinerReward>, MinerReward, MinerRewardInfo)>, Error> with Ok(Some((Default::default(), vec![Default::default()], Default::default(), Default::default())))
stackslib/src/chainstate/stacks/db/blocks.rs:313:9: replace <impl From for MemPoolRejection>::from -> MemPoolRejection with Default::default()
stackslib/src/chainstate/stacks/db/blocks.rs:332:9: replace <impl FromRow for StagingMicroblock>::from_row -> Result<StagingMicroblock, db_error> with Ok(Default::default())
stackslib/src/chainstate/stacks/db/blocks.rs:361:9: replace <impl FromRow for StagingBlock>::from_row -> Result<StagingBlock, db_error> with Ok(Default::default())
stackslib/src/chainstate/stacks/db/blocks.rs:405:9: replace <impl FromRow for StagingUserBurnSupport>::from_row -> Result<StagingUserBurnSupport, db_error> with Ok(Default::default())
stackslib/src/chainstate/stacks/db/blocks.rs:555:9: replace StacksChainState::consensus_load -> Result<T, Error> with Ok(Default::default())
stackslib/src/chainstate/stacks/db/blocks.rs:748:9: replace StacksChainState::list_blocks -> Result<Vec<(ConsensusHash, BlockHeaderHash)>, Error> with Ok(vec![(Default::default(), Default::default())])
stackslib/src/chainstate/stacks/db/blocks.rs:760:9: replace StacksChainState::get_all_staging_block_headers -> Result<Vec<StagingBlock>, Error> with Ok(vec![Default::default()])
stackslib/src/chainstate/stacks/db/blocks.rs:837:9: replace StacksChainState::load_block -> Result<Option<StacksBlock>, Error> with Ok(Some(Default::default()))
stackslib/src/chainstate/stacks/db/blocks.rs:849:9: replace StacksChainState::inner_load_block_header -> Result<Option<StacksBlockHeader>, Error> with Ok(Some(Default::default()))
stackslib/src/chainstate/stacks/db/blocks.rs:868:9: replace StacksChainState::load_block_header -> Result<Option<StacksBlockHeader>, Error> with Ok(Some(Default::default()))
stackslib/src/chainstate/stacks/db/blocks.rs:880:9: replace StacksChainState::load_block_header_indexed -> Result<Option<StacksBlockHeader>, Error> with Ok(Some(Default::default()))
stackslib/src/chainstate/stacks/db/blocks.rs:886:9: replace StacksChainState::empty_stream -> Result<Option<Vec<StacksMicroblock>>, Error> with Ok(Some(vec![Default::default()]))
stackslib/src/chainstate/stacks/db/blocks.rs:985:9: replace StacksChainState::load_staging_block -> Result<Option<StagingBlock>, Error> with Ok(Some(Default::default()))
stackslib/src/chainstate/stacks/db/blocks.rs:1014:9: replace StacksChainState::load_staging_block_info -> Result<Option<StagingBlock>, Error> with Ok(Some(Default::default()))
stackslib/src/chainstate/stacks/db/blocks.rs:1024:9: replace StacksChainState::get_staging_block_parent_microblock_hash -> Result<Option<BlockHeaderHash>, Error> with Ok(Some(Default::default()))
stackslib/src/chainstate/stacks/db/blocks.rs:1064:9: replace StacksChainState::load_staging_block_user_supports -> Result<Vec<StagingUserBurnSupport>, Error> with Ok(vec![Default::default()])
stackslib/src/chainstate/stacks/db/blocks.rs:1077:9: replace StacksChainState::load_staging_block_pubkey_hash -> Result<Option<Hash160>, Error> with Ok(Some(Default::default()))
stackslib/src/chainstate/stacks/db/blocks.rs:1098:9: replace StacksChainState::load_block_pubkey_hash -> Result<Option<Hash160>, Error> with Ok(Some(Default::default()))
stackslib/src/chainstate/stacks/db/blocks.rs:1132:9: replace StacksChainState::load_staging_microblock_info -> Result<Option<StagingMicroblock>, Error> with Ok(Some(Default::default()))
stackslib/src/chainstate/stacks/db/blocks.rs:1145:9: replace StacksChainState::load_staging_microblock_info_indexed -> Result<Option<StagingMicroblock>, Error> with Ok(Some(Default::default()))
stackslib/src/chainstate/stacks/db/blocks.rs:1157:9: replace StacksChainState::load_staging_microblock -> Result<Option<StagingMicroblock>, Error> with Ok(Some(Default::default()))
stackslib/src/chainstate/stacks/db/blocks.rs:1168:9: replace StacksChainState::load_staging_microblock_indexed -> Result<Option<StagingMicroblock>, Error> with Ok(Some(Default::default()))
stackslib/src/chainstate/stacks/db/blocks.rs:1197:9: replace StacksChainState::inner_load_microblock_stream_fork -> Result<Option<Vec<StacksMicroblock>>, Error> with Ok(Some(vec![Default::default()]))
stackslib/src/chainstate/stacks/db/blocks.rs:1289:9: replace StacksChainState::load_microblock_stream_fork -> Result<Option<Vec<StacksMicroblock>>, Error> with Ok(Some(vec![Default::default()]))
stackslib/src/chainstate/stacks/db/blocks.rs:1305:9: replace StacksChainState::load_processed_microblock_stream_fork -> Result<Option<Vec<StacksMicroblock>>, Error> with Ok(Some(vec![Default::default()]))
stackslib/src/chainstate/stacks/db/blocks.rs:1320:9: replace StacksChainState::load_descendant_staging_microblock_stream -> Result<Option<Vec<StacksMicroblock>>, Error> with Ok(Some(vec![Default::default()]))
stackslib/src/chainstate/stacks/db/blocks.rs:1340:9: replace StacksChainState::load_descendant_staging_microblock_stream_with_poison -> Result<Option<(Vec<StacksMicroblock>, Option<TransactionPayload>)>, Error> with Ok(Some((vec![], Some(Default::default()))))
stackslib/src/chainstate/stacks/db/blocks.rs:1340:9: replace StacksChainState::load_descendant_staging_microblock_stream_with_poison -> Result<Option<(Vec<StacksMicroblock>, Option<TransactionPayload>)>, Error> with Ok(Some((vec![Default::default()], None)))
stackslib/src/chainstate/stacks/db/blocks.rs:1340:9: replace StacksChainState::load_descendant_staging_microblock_stream_with_poison -> Result<Option<(Vec<StacksMicroblock>, Option<TransactionPayload>)>, Error> with Ok(Some((vec![Default::default()], Some(Default::default()))))
stackslib/src/chainstate/stacks/db/blocks.rs:1463:9: replace StacksChainState::load_next_descendant_microblock -> Result<Option<StacksMicroblock>, Error> with Ok(Some(Default::default()))
stackslib/src/chainstate/stacks/db/blocks.rs:1477:9: replace StacksChainState::get_parent -> Result<StacksBlockId, Error> with Ok(Default::default())
stackslib/src/chainstate/stacks/db/blocks.rs:1489:9: replace StacksChainState::get_parent_consensus_hash -> Result<Option<ConsensusHash>, Error> with Ok(Some(Default::default()))
stackslib/src/chainstate/stacks/db/blocks.rs:1808:9: replace StacksChainState::get_staging_block_consensus_hashes -> Result<Vec<ConsensusHash>, Error> with Ok(vec![Default::default()])
stackslib/src/chainstate/stacks/db/blocks.rs:1941:9: replace StacksChainState::get_blocks_inventory -> Result<BlocksInvData, Error> with Ok(Default::default())
stackslib/src/chainstate/stacks/db/blocks.rs:2092:9: replace StacksChainState::get_blocks_inventory_for_reward_cycle -> Result<BlocksInvData, Error> with Ok(Default::default())
stackslib/src/chainstate/stacks/db/blocks.rs:2192:9: replace StacksChainState::get_known_consensus_hashes_for_block -> Result<Vec<ConsensusHash>, Error> with Ok(vec![Default::default()])
stackslib/src/chainstate/stacks/db/blocks.rs:2218:9: replace StacksChainState::find_canonical_affirmation_map -> Result<AffirmationMap, Error> with Ok(Default::default())
stackslib/src/chainstate/stacks/db/blocks.rs:2241:9: replace StacksChainState::inner_find_stacks_tip_affirmation_map -> Result<AffirmationMap, Error> with Ok(Default::default())
stackslib/src/chainstate/stacks/db/blocks.rs:2280:9: replace StacksChainState::find_stacks_tip_affirmation_map -> Result<AffirmationMap, Error> with Ok(Default::default())
stackslib/src/chainstate/stacks/db/blocks.rs:2794:9: replace StacksChainState::get_confirmed_microblock_index_hash -> Result<Option<StacksBlockId>, Error> with Ok(Some(Default::default()))
stackslib/src/chainstate/stacks/db/blocks.rs:2869:9: replace StacksChainState::inner_get_block_header_hashes -> Result<Option<(ConsensusHash, BlockHeaderHash)>, Error> with Ok(Some((Default::default(), Default::default())))
stackslib/src/chainstate/stacks/db/blocks.rs:2892:9: replace StacksChainState::get_block_header_hashes -> Result<Option<(ConsensusHash, BlockHeaderHash)>, Error> with Ok(Some((Default::default(), Default::default())))
stackslib/src/chainstate/stacks/db/blocks.rs:2905:9: replace StacksChainState::get_parent_block_header_hashes -> Result<Option<(ConsensusHash, BlockHeaderHash)>, Error> with Ok(Some((Default::default(), Default::default())))
stackslib/src/chainstate/stacks/db/blocks.rs:2953:9: replace StacksChainState::read_extended_header -> Result<ExtendedStacksHeader, Error> with Ok(Default::default())
stackslib/src/chainstate/stacks/db/blocks.rs:2997:9: replace StacksChainState::get_highest_unprocessed_block -> Result<Option<StagingBlock>, Error> with Ok(Some(Default::default()))
stackslib/src/chainstate/stacks/db/blocks.rs:3007:9: replace StacksChainState::extract_signed_microblocks -> Vec<StacksMicroblock> with vec![Default::default()]
stackslib/src/chainstate/stacks/db/blocks.rs:3042:9: replace StacksChainState::validate_parent_microblock_stream -> Option<(usize, Option<TransactionPayload>)> with Some((0, Some(Default::default())))
stackslib/src/chainstate/stacks/db/blocks.rs:3042:9: replace StacksChainState::validate_parent_microblock_stream -> Option<(usize, Option<TransactionPayload>)> with Some((1, Some(Default::default())))
stackslib/src/chainstate/stacks/db/blocks.rs:3727:9: replace StacksChainState::make_scheduled_miner_reward -> Result<MinerPaymentSchedule, Error> with Ok(Default::default())
stackslib/src/chainstate/stacks/db/blocks.rs:3779:9: replace StacksChainState::find_parent_microblock_stream -> Result<Option<Vec<StacksMicroblock>>, Error> with Ok(Some(vec![Default::default()]))
stackslib/src/chainstate/stacks/db/blocks.rs:3916:9: replace StacksChainState::find_next_staging_block -> Result<Option<(Vec<StacksMicroblock>, StagingBlock)>, Error> with Ok(Some((vec![], Default::default())))
stackslib/src/chainstate/stacks/db/blocks.rs:3916:9: replace StacksChainState::find_next_staging_block -> Result<Option<(Vec<StacksMicroblock>, StagingBlock)>, Error> with Ok(Some((vec![Default::default()], Default::default())))
stackslib/src/chainstate/stacks/db/blocks.rs:4092:9: replace StacksChainState::process_microblocks_transactions -> Result<(u128, u128, Vec<StacksTransactionReceipt>), (Error, BlockHeaderHash)> with Ok((0, 0, vec![Default::default()]))
stackslib/src/chainstate/stacks/db/blocks.rs:4092:9: replace StacksChainState::process_microblocks_transactions -> Result<(u128, u128, Vec<StacksTransactionReceipt>), (Error, BlockHeaderHash)> with Ok((0, 1, vec![Default::default()]))
stackslib/src/chainstate/stacks/db/blocks.rs:4092:9: replace StacksChainState::process_microblocks_transactions -> Result<(u128, u128, Vec<StacksTransactionReceipt>), (Error, BlockHeaderHash)> with Ok((1, 0, vec![Default::default()]))
stackslib/src/chainstate/stacks/db/blocks.rs:4092:9: replace StacksChainState::process_microblocks_transactions -> Result<(u128, u128, Vec<StacksTransactionReceipt>), (Error, BlockHeaderHash)> with Ok((1, 1, vec![Default::default()]))
stackslib/src/chainstate/stacks/db/blocks.rs:4122:9: replace StacksChainState::process_epoch_transition -> Result<(bool, Vec<StacksTransactionReceipt>), Error> with Ok((true, vec![Default::default()]))
stackslib/src/chainstate/stacks/db/blocks.rs:4122:9: replace StacksChainState::process_epoch_transition -> Result<(bool, Vec<StacksTransactionReceipt>), Error> with Ok((false, vec![Default::default()]))
stackslib/src/chainstate/stacks/db/blocks.rs:4265:9: replace StacksChainState::process_stacking_ops -> Vec<StacksTransactionReceipt> with vec![Default::default()]
stackslib/src/chainstate/stacks/db/blocks.rs:4355:9: replace StacksChainState::process_transfer_ops -> Vec<StacksTransactionReceipt> with vec![Default::default()]
stackslib/src/chainstate/stacks/db/blocks.rs:4417:9: replace StacksChainState::process_delegate_ops -> Vec<StacksTransactionReceipt> with vec![Default::default()]
stackslib/src/chainstate/stacks/db/blocks.rs:4527:9: replace StacksChainState::process_block_transactions -> Result<(u128, u128, Vec<StacksTransactionReceipt>), Error> with Ok((0, 0, vec![Default::default()]))
stackslib/src/chainstate/stacks/db/blocks.rs:4527:9: replace StacksChainState::process_block_transactions -> Result<(u128, u128, Vec<StacksTransactionReceipt>), Error> with Ok((0, 1, vec![Default::default()]))
stackslib/src/chainstate/stacks/db/blocks.rs:4527:9: replace StacksChainState::process_block_transactions -> Result<(u128, u128, Vec<StacksTransactionReceipt>), Error> with Ok((1, 0, vec![Default::default()]))
stackslib/src/chainstate/stacks/db/blocks.rs:4527:9: replace StacksChainState::process_block_transactions -> Result<(u128, u128, Vec<StacksTransactionReceipt>), Error> with Ok((1, 1, vec![Default::default()]))
stackslib/src/chainstate/stacks/db/blocks.rs:4618:9: replace StacksChainState::process_stx_unlocks -> Result<(u128, Vec<StacksTransactionEvent>), Error> with Ok((0, vec![Default::default()]))
stackslib/src/chainstate/stacks/db/blocks.rs:4618:9: replace StacksChainState::process_stx_unlocks -> Result<(u128, Vec<StacksTransactionEvent>), Error> with Ok((1, vec![Default::default()]))
stackslib/src/chainstate/stacks/db/blocks.rs:4674:9: replace StacksChainState::get_parent_matured_miner -> Result<MinerPaymentSchedule, Error> with Ok(Default::default())
stackslib/src/chainstate/stacks/db/blocks.rs:4709:9: replace StacksChainState::get_stacking_and_transfer_burn_ops_v205 -> Result<(Vec<StackStxOp>, Vec<TransferStxOp>), Error> with Ok((vec![], vec![Default::default()]))
stackslib/src/chainstate/stacks/db/blocks.rs:4709:9: replace StacksChainState::get_stacking_and_transfer_burn_ops_v205 -> Result<(Vec<StackStxOp>, Vec<TransferStxOp>), Error> with Ok((vec![Default::default()], vec![]))
stackslib/src/chainstate/stacks/db/blocks.rs:4709:9: replace StacksChainState::get_stacking_and_transfer_burn_ops_v205 -> Result<(Vec<StackStxOp>, Vec<TransferStxOp>), Error> with Ok((vec![Default::default()], vec![Default::default()]))
stackslib/src/chainstate/stacks/db/blocks.rs:4723:9: replace StacksChainState::get_stacking_and_transfer_and_delegate_burn_ops_v210 -> Result<(Vec<StackStxOp>, Vec<TransferStxOp>, Vec<DelegateStxOp>), Error> with Ok((vec![], vec![], vec![Default::default()]))
stackslib/src/chainstate/stacks/db/blocks.rs:4723:9: replace StacksChainState::get_stacking_and_transfer_and_delegate_burn_ops_v210 -> Result<(Vec<StackStxOp>, Vec<TransferStxOp>, Vec<DelegateStxOp>), Error> with Ok((vec![], vec![Default::default()], vec![]))
stackslib/src/chainstate/stacks/db/blocks.rs:4723:9: replace StacksChainState::get_stacking_and_transfer_and_delegate_burn_ops_v210 -> Result<(Vec<StackStxOp>, Vec<TransferStxOp>, Vec<DelegateStxOp>), Error> with Ok((vec![], vec![Default::default()], vec![Default::default()]))
stackslib/src/chainstate/stacks/db/blocks.rs:4723:9: replace StacksChainState::get_stacking_and_transfer_and_delegate_burn_ops_v210 -> Result<(Vec<StackStxOp>, Vec<TransferStxOp>, Vec<DelegateStxOp>), Error> with Ok((vec![Default::default()], vec![], vec![]))
stackslib/src/chainstate/stacks/db/blocks.rs:4723:9: replace StacksChainState::get_stacking_and_transfer_and_delegate_burn_ops_v210 -> Result<(Vec<StackStxOp>, Vec<TransferStxOp>, Vec<DelegateStxOp>), Error> with Ok((vec![Default::default()], vec![], vec![Default::default()]))
stackslib/src/chainstate/stacks/db/blocks.rs:4723:9: replace StacksChainState::get_stacking_and_transfer_and_delegate_burn_ops_v210 -> Result<(Vec<StackStxOp>, Vec<TransferStxOp>, Vec<DelegateStxOp>), Error> with Ok((vec![Default::default()], vec![Default::default()], vec![]))
stackslib/src/chainstate/stacks/db/blocks.rs:4723:9: replace StacksChainState::get_stacking_and_transfer_and_delegate_burn_ops_v210 -> Result<(Vec<StackStxOp>, Vec<TransferStxOp>, Vec<DelegateStxOp>), Error> with Ok((vec![Default::default()], vec![Default::default()], vec![Default::default()]))
stackslib/src/chainstate/stacks/db/blocks.rs:4823:9: replace StacksChainState::get_stacking_and_transfer_and_delegate_burn_ops -> Result<(Vec<StackStxOp>, Vec<TransferStxOp>, Vec<DelegateStxOp>), Error> with Ok((vec![], vec![], vec![Default::default()]))
stackslib/src/chainstate/stacks/db/blocks.rs:4823:9: replace StacksChainState::get_stacking_and_transfer_and_delegate_burn_ops -> Result<(Vec<StackStxOp>, Vec<TransferStxOp>, Vec<DelegateStxOp>), Error> with Ok((vec![], vec![Default::default()], vec![]))
stackslib/src/chainstate/stacks/db/blocks.rs:4823:9: replace StacksChainState::get_stacking_and_transfer_and_delegate_burn_ops -> Result<(Vec<StackStxOp>, Vec<TransferStxOp>, Vec<DelegateStxOp>), Error> with Ok((vec![], vec![Default::default()], vec![Default::default()]))
stackslib/src/chainstate/stacks/db/blocks.rs:4823:9: replace StacksChainState::get_stacking_and_transfer_and_delegate_burn_ops -> Result<(Vec<StackStxOp>, Vec<TransferStxOp>, Vec<DelegateStxOp>), Error> with Ok((vec![Default::default()], vec![], vec![]))
stackslib/src/chainstate/stacks/db/blocks.rs:4823:9: replace StacksChainState::get_stacking_and_transfer_and_delegate_burn_ops -> Result<(Vec<StackStxOp>, Vec<TransferStxOp>, Vec<DelegateStxOp>), Error> with Ok((vec![Default::default()], vec![], vec![Default::default()]))
stackslib/src/chainstate/stacks/db/blocks.rs:4823:9: replace StacksChainState::get_stacking_and_transfer_and_delegate_burn_ops -> Result<(Vec<StackStxOp>, Vec<TransferStxOp>, Vec<DelegateStxOp>), Error> with Ok((vec![Default::default()], vec![Default::default()], vec![]))
stackslib/src/chainstate/stacks/db/blocks.rs:4823:9: replace StacksChainState::get_stacking_and_transfer_and_delegate_burn_ops -> Result<(Vec<StackStxOp>, Vec<TransferStxOp>, Vec<DelegateStxOp>), Error> with Ok((vec![Default::default()], vec![Default::default()], vec![Default::default()]))
stackslib/src/chainstate/stacks/db/blocks.rs:4867:9: replace StacksChainState::check_and_handle_reward_start -> Result<Vec<StacksTransactionEvent>, Error> with Ok(vec![Default::default()])
stackslib/src/chainstate/stacks/db/blocks.rs:4968:9: replace StacksChainState::setup_block -> Result<SetupBlockResult<'a, 'b>, Error> with Ok(Default::default())
stackslib/src/chainstate/stacks/db/blocks.rs:5215:9: replace StacksChainState::finish_block -> Result<Vec<StacksTransactionEvent>, Error> with Ok(vec![Default::default()])
stackslib/src/chainstate/stacks/db/blocks.rs:5296:9: replace StacksChainState::append_block -> Result<(StacksEpochReceipt, PreCommitClarityBlock<'a>), Error> with Ok((Default::default(), Default::default()))
stackslib/src/chainstate/stacks/db/blocks.rs:5739:9: replace StacksChainState::get_parent_header_info -> Result<Option<StacksHeaderInfo>, Error> with Ok(Some(Default::default()))
stackslib/src/chainstate/stacks/db/blocks.rs:5778:9: replace StacksChainState::extract_stacks_block -> Result<StacksBlock, Error> with Ok(Default::default())
stackslib/src/chainstate/stacks/db/blocks.rs:5807:9: replace StacksChainState::extract_connecting_microblocks -> Result<Vec<StacksMicroblock>, Error> with Ok(vec![Default::default()])
stackslib/src/chainstate/stacks/db/blocks.rs:5849:9: replace StacksChainState::process_next_staging_block -> Result<(Option<StacksEpochReceipt>, Option<TransactionPayload>), Error> with Ok((None, Some(Default::default())))
stackslib/src/chainstate/stacks/db/blocks.rs:5849:9: replace StacksChainState::process_next_staging_block -> Result<(Option<StacksEpochReceipt>, Option<TransactionPayload>), Error> with Ok((Some(Default::default()), None))
stackslib/src/chainstate/stacks/db/blocks.rs:5849:9: replace StacksChainState::process_next_staging_block -> Result<(Option<StacksEpochReceipt>, Option<TransactionPayload>), Error> with Ok((Some(Default::default()), Some(Default::default())))
stackslib/src/chainstate/stacks/db/blocks.rs:6214:9: replace StacksChainState::process_blocks -> Result<Vec<(Option<StacksEpochReceipt>, Option<TransactionPayload>)>, Error> with Ok(vec![(None, Some(Default::default()))])
stackslib/src/chainstate/stacks/db/blocks.rs:6214:9: replace StacksChainState::process_blocks -> Result<Vec<(Option<StacksEpochReceipt>, Option<TransactionPayload>)>, Error> with Ok(vec![(Some(Default::default()), None)])
stackslib/src/chainstate/stacks/db/blocks.rs:6214:9: replace StacksChainState::process_blocks -> Result<Vec<(Option<StacksEpochReceipt>, Option<TransactionPayload>)>, Error> with Ok(vec![(Some(Default::default()), Some(Default::default()))])
stackslib/src/chainstate/stacks/db/blocks.rs:6303:9: replace StacksChainState::get_stacks_chain_tip -> Result<Option<StagingBlock>, Error> with Ok(Some(Default::default()))
stackslib/src/chainstate/stacks/db/blocks.rs:6312:9: replace StacksChainState::get_stacks_chain_tips -> Result<Vec<StagingBlock>, Error> with Ok(vec![Default::default()])
stackslib/src/chainstate/stacks/db/blocks.rs:6326:9: replace StacksChainState::get_stacks_chain_tips_at_height -> Result<Vec<StagingBlock>, Error> with Ok(vec![Default::default()])
stackslib/src/chainstate/stacks/db/blocks.rs:6337:9: replace StacksChainState::get_stacks_block_parent -> Result<Option<StagingBlock>, Error> with Ok(Some(Default::default()))
stackslib/src/chainstate/stacks/db/contracts.rs:46:9: replace StacksChainState::get_contract -> Result<Option<Contract>, Error> with Ok(Some(Default::default()))
stackslib/src/chainstate/stacks/db/contracts.rs:60:9: replace StacksChainState::get_data_var -> Result<Option<Value>, Error> with Ok(Some(Default::default()))
stackslib/src/chainstate/stacks/db/headers.rs:38:9: replace <impl FromRow for StacksBlockHeader>::from_row -> Result<StacksBlockHeader, db_error> with Ok(Default::default())
stackslib/src/chainstate/stacks/db/headers.rs:83:9: replace <impl FromRow for StacksMicroblockHeader>::from_row -> Result<StacksMicroblockHeader, db_error> with Ok(Default::default())
stackslib/src/chainstate/stacks/db/headers.rs:199:9: replace StacksChainState::get_stacks_block_anchored_cost -> Result<Option<ExecutionCost>, Error> with Ok(Some(Default::default()))
stackslib/src/chainstate/stacks/db/headers.rs:226:9: replace StacksChainState::get_anchored_block_header_info -> Result<Option<StacksHeaderInfo>, Error> with Ok(Some(Default::default()))
stackslib/src/chainstate/stacks/db/headers.rs:240:9: replace StacksChainState::get_stacks_block_header_info_by_index_block_hash -> Result<Option<StacksHeaderInfo>, Error> with Ok(Some(Default::default()))
stackslib/src/chainstate/stacks/db/headers.rs:253:9: replace StacksChainState::get_tip_ancestor -> Result<Option<StacksHeaderInfo>, Error> with Ok(Some(Default::default()))
stackslib/src/chainstate/stacks/db/headers.rs:263:9: replace StacksChainState::get_index_tip_ancestor -> Result<Option<StacksHeaderInfo>, Error> with Ok(Some(Default::default()))
stackslib/src/chainstate/stacks/db/headers.rs:280:9: replace StacksChainState::get_ancestors_headers -> Result<Vec<StacksHeaderInfo>, Error> with Ok(vec![Default::default()])
stackslib/src/chainstate/stacks/db/headers.rs:305:9: replace StacksChainState::get_genesis_header_info -> Result<StacksHeaderInfo, Error> with Ok(Default::default())
stackslib/src/chainstate/stacks/db/headers.rs:316:9: replace StacksChainState::get_parent_block_id -> Result<Option<StacksBlockId>, Error> with Ok(Some(Default::default()))
stackslib/src/chainstate/stacks/db/headers.rs:345:9: replace StacksChainState::get_ancestor_index_hashes -> Result<Vec<StacksBlockId>, Error> with Ok(vec![Default::default()])
stackslib/src/chainstate/stacks/db/headers.rs:368:9: replace StacksChainState::get_all_headers_at_height_and_weight -> Result<Vec<StacksHeaderInfo>, Error> with Ok(vec![Default::default()])
stackslib/src/chainstate/stacks/db/transactions.rs:60:9: replace StacksTransactionReceipt::from_stx_transfer -> StacksTransactionReceipt with Default::default()
stackslib/src/chainstate/stacks/db/transactions.rs:81:9: replace StacksTransactionReceipt::from_contract_call -> StacksTransactionReceipt with Default::default()
stackslib/src/chainstate/stacks/db/transactions.rs:102:9: replace StacksTransactionReceipt::from_condition_aborted_contract_call -> StacksTransactionReceipt with Default::default()
stackslib/src/chainstate/stacks/db/transactions.rs:123:9: replace StacksTransactionReceipt::from_smart_contract -> StacksTransactionReceipt with Default::default()
stackslib/src/chainstate/stacks/db/transactions.rs:144:9: replace StacksTransactionReceipt::from_condition_aborted_smart_contract -> StacksTransactionReceipt with Default::default()
stackslib/src/chainstate/stacks/db/transactions.rs:178:9: replace StacksTransactionReceipt::from_analysis_failure -> StacksTransactionReceipt with Default::default()
stackslib/src/chainstate/stacks/db/transactions.rs:159:9: replace StacksTransactionReceipt::from_coinbase -> StacksTransactionReceipt with Default::default()
stackslib/src/chainstate/stacks/db/transactions.rs:220:9: replace StacksTransactionReceipt::from_poison_microblock -> StacksTransactionReceipt with Default::default()
stackslib/src/chainstate/stacks/db/transactions.rs:240:9: replace StacksTransactionReceipt::from_runtime_failure_smart_contract -> StacksTransactionReceipt with Default::default()
stackslib/src/chainstate/stacks/db/transactions.rs:259:9: replace StacksTransactionReceipt::from_runtime_failure_contract_call -> StacksTransactionReceipt with Default::default()
stackslib/src/chainstate/stacks/db/transactions.rs:310:9: replace <impl From for Error>::from -> Error with Default::default()
stackslib/src/chainstate/stacks/db/transactions.rs:332:5: replace handle_clarity_runtime_error -> ClarityRuntimeTxError with Default::default()
stackslib/src/chainstate/stacks/db/transactions.rs:367:9: replace StacksChainState::get_payer_account -> StacksAccount with Default::default()
stackslib/src/chainstate/stacks/db/transactions.rs:316:9: replace <impl From for MemPoolRejection>::from -> MemPoolRejection with Default::default()
stackslib/src/chainstate/stacks/db/transactions.rs:390:9: replace StacksChainState::check_transaction_nonces -> Result<(StacksAccount, StacksAccount), (TransactionNonceMismatch, (StacksAccount, StacksAccount)), > with Ok((Default::default(), Default::default()))
stackslib/src/chainstate/stacks/db/transactions.rs:711:9: replace StacksChainState::check_microblock_header_signer -> Result<Hash160, Error> with Ok(Default::default())
stackslib/src/chainstate/stacks/db/transactions.rs:748:9: replace StacksChainState::handle_poison_microblock -> Result<Value, Error> with Ok(Default::default())
stackslib/src/chainstate/stacks/db/transactions.rs:911:9: replace StacksChainState::process_transaction_payload -> Result<StacksTransactionReceipt, Error> with Ok(Default::default())
stackslib/src/chainstate/stacks/db/transactions.rs:1336:9: replace StacksChainState::get_tx_clarity_version -> Result<ClarityVersion, Error> with Ok(Default::default())
stackslib/src/chainstate/stacks/db/transactions.rs:1356:9: replace StacksChainState::process_transaction -> Result<(u64, StacksTransactionReceipt), Error> with Ok((0, Default::default()))
stackslib/src/chainstate/stacks/db/transactions.rs:1356:9: replace StacksChainState::process_transaction -> Result<(u64, StacksTransactionReceipt), Error> with Ok((1, Default::default()))
stackslib/src/chainstate/stacks/db/unconfirmed.rs:137:9: replace UnconfirmedState::make_readonly_owned -> Result<UnconfirmedState, Error> with Ok(Default::default())
stackslib/src/chainstate/stacks/db/unconfirmed.rs:176:9: replace UnconfirmedState::new_readonly -> Result<UnconfirmedState, Error> with Ok(Default::default())
stackslib/src/chainstate/stacks/db/unconfirmed.rs:376:9: replace UnconfirmedState::load_child_microblocks -> Result<Option<Vec<StacksMicroblock>>, Error> with Ok(Some(vec![Default::default()]))
stackslib/src/chainstate/stacks/db/unconfirmed.rs:446:9: replace UnconfirmedState::get_unconfirmed_transaction -> Option<(StacksTransaction, BlockHeaderHash, u16)> with Some((Default::default(), Default::default(), 0))
stackslib/src/chainstate/stacks/db/unconfirmed.rs:446:9: replace UnconfirmedState::get_unconfirmed_transaction -> Option<(StacksTransaction, BlockHeaderHash, u16)> with Some((Default::default(), Default::default(), 1))
stackslib/src/chainstate/stacks/db/unconfirmed.rs:460:9: replace UnconfirmedState::get_unconfirmed_state_if_exists -> Result<Option<StacksBlockId>, String> with Ok(Some(Default::default()))
stackslib/src/chainstate/stacks/db/unconfirmed.rs:519:9: replace StacksChainState::make_unconfirmed_state -> Result<(UnconfirmedState, ProcessedUnconfirmedState), Error> with Ok((Default::default(), Default::default()))
stackslib/src/chainstate/stacks/index/bits.rs:284:5: replace read_nodetype -> Result<(TrieNodeType, TrieHash), Error> with Ok((Default::default(), Default::default()))
stackslib/src/chainstate/stacks/index/bits.rs:295:5: replace read_nodetype_nohash -> Result<TrieNodeType, Error> with Ok(Default::default())
stackslib/src/chainstate/stacks/index/bits.rs:306:5: replace read_nodetype_at_head -> Result<(TrieNodeType, TrieHash), Error> with Ok((Default::default(), Default::default()))
stackslib/src/chainstate/stacks/index/bits.rs:319:5: replace read_nodetype_at_head_nohash -> Result<TrieNodeType, Error> with Ok(Default::default())
stackslib/src/chainstate/stacks/index/bits.rs:337:5: replace inner_read_nodetype_at_head -> Result<(TrieNodeType, Option<TrieHash>), Error> with Ok((Default::default(), None))
stackslib/src/chainstate/stacks/index/bits.rs:337:5: replace inner_read_nodetype_at_head -> Result<(TrieNodeType, Option<TrieHash>), Error> with Ok((Default::default(), Some(Default::default())))
stackslib/src/chainstate/stacks/index/cache.rs:89:9: replace TrieCacheState<T>::load_node_and_hash -> Option<(TrieNodeType, TrieHash)> with Some((Default::default(), Default::default()))
stackslib/src/chainstate/stacks/index/cache.rs:100:9: replace TrieCacheState<T>::load_node -> Option<TrieNodeType> with Some(Default::default())
stackslib/src/chainstate/stacks/index/cache.rs:138:9: replace TrieCacheState<T>::load_block_hash -> Option<T> with Some(Default::default())
stackslib/src/chainstate/stacks/index/cache.rs:150:9: replace TrieCacheState<T>::ref_block_hash -> Option<&T> with Some(&Default::default())
stackslib/src/chainstate/stacks/index/cache.rs:173:9: replace TrieCache<T>::default -> TrieCache<T> with TrieCache::new()
stackslib/src/chainstate/stacks/index/cache.rs:173:9: replace TrieCache<T>::default -> TrieCache<T> with TrieCache::from_iter([Default::default()])
stackslib/src/chainstate/stacks/index/cache.rs:173:9: replace TrieCache<T>::default -> TrieCache<T> with TrieCache::from(Default::default())
stackslib/src/chainstate/stacks/index/cache.rs:200:9: replace TrieCache<T>::state_ref -> &TrieCacheState<T> with &TrieCacheState::new()
stackslib/src/chainstate/stacks/index/cache.rs:200:9: replace TrieCache<T>::state_ref -> &TrieCacheState<T> with &TrieCacheState::from_iter([Default::default()])
stackslib/src/chainstate/stacks/index/cache.rs:200:9: replace TrieCache<T>::state_ref -> &TrieCacheState<T> with &TrieCacheState::new(Default::default())
stackslib/src/chainstate/stacks/index/cache.rs:200:9: replace TrieCache<T>::state_ref -> &TrieCacheState<T> with &TrieCacheState::from(Default::default())
stackslib/src/chainstate/stacks/index/cache.rs:209:9: replace TrieCache<T>::state_mut -> &mut TrieCacheState<T> with Box::leak(Box::new(TrieCacheState::from_iter([Default::default()])))
stackslib/src/chainstate/stacks/index/cache.rs:209:9: replace TrieCache<T>::state_mut -> &mut TrieCacheState<T> with Box::leak(Box::new(TrieCacheState::new(Default::default())))
stackslib/src/chainstate/stacks/index/cache.rs:209:9: replace TrieCache<T>::state_mut -> &mut TrieCacheState<T> with Box::leak(Box::new(TrieCacheState::from(Default::default())))
stackslib/src/chainstate/stacks/index/cache.rs:218:9: replace TrieCache<T>::load_node -> Option<TrieNodeType> with Some(Default::default())
stackslib/src/chainstate/stacks/index/cache.rs:232:9: replace TrieCache<T>::load_node_and_hash -> Option<(TrieNodeType, TrieHash)> with Some((Default::default(), Default::default()))
stackslib/src/chainstate/stacks/index/cache.rs:312:9: replace TrieCache<T>::load_block_hash -> Option<T> with Some(Default::default())
stackslib/src/chainstate/stacks/index/cache.rs:322:9: replace TrieCache<T>::ref_block_hash -> Option<&T> with Some(&Default::default())
stackslib/src/chainstate/stacks/index/file.rs:86:9: replace TrieFile::new_disk -> Result<TrieFile, Error> with Ok(Default::default())
stackslib/src/chainstate/stacks/index/file.rs:100:9: replace TrieFile::new_ram -> TrieFile with Default::default()
stackslib/src/chainstate/stacks/index/file.rs:139:9: replace TrieFile::from_db_path -> Result<TrieFile, Error> with Ok(Default::default())
stackslib/src/chainstate/stacks/index/file.rs:396:9: replace TrieFile::read_node_type -> Result<(TrieNodeType, TrieHash), Error> with Ok((Default::default(), Default::default()))
stackslib/src/chainstate/stacks/index/file.rs:408:9: replace TrieFile::read_node_type_nohash -> Result<TrieNodeType, Error> with Ok(Default::default())
stackslib/src/chainstate/stacks/index/marf.rs:78:9: replace MARFOpenOpts::default -> MARFOpenOpts with Default::default()
stackslib/src/chainstate/stacks/index/marf.rs:127:9: replace MarfConnection::get -> Result<Option<MARFValue>, Error> with Ok(Some(Default::default()))
stackslib/src/chainstate/stacks/index/marf.rs:135:9: replace MarfConnection::get_with_proof -> Result<Option<(MARFValue, TrieMerkleProof<T>)>, Error> with Ok(Some((Default::default(), TrieMerkleProof::new())))
stackslib/src/chainstate/stacks/index/marf.rs:135:9: replace MarfConnection::get_with_proof -> Result<Option<(MARFValue, TrieMerkleProof<T>)>, Error> with Ok(Some((Default::default(), TrieMerkleProof::from_iter([Default::default()]))))
stackslib/src/chainstate/stacks/index/marf.rs:135:9: replace MarfConnection::get_with_proof -> Result<Option<(MARFValue, TrieMerkleProof<T>)>, Error> with Ok(Some((Default::default(), TrieMerkleProof::new(Default::default()))))
stackslib/src/chainstate/stacks/index/marf.rs:135:9: replace MarfConnection::get_with_proof -> Result<Option<(MARFValue, TrieMerkleProof<T>)>, Error> with Ok(Some((Default::default(), TrieMerkleProof::from(Default::default()))))
stackslib/src/chainstate/stacks/index/marf.rs:146:9: replace MarfConnection::get_block_at_height -> Result<Option<T>, Error> with Ok(Some(Default::default()))
stackslib/src/chainstate/stacks/index/marf.rs:204:9: replace <impl MarfConnection for MarfTransaction<'a, T>>::with_conn -> R with Default::default()
stackslib/src/chainstate/stacks/index/marf.rs:207:9: replace <impl MarfConnection for MarfTransaction<'a, T>>::sqlite_conn -> &Connection with &Default::default()
stackslib/src/chainstate/stacks/index/marf.rs:216:9: replace <impl MarfConnection for MARF<T>>::with_conn -> R with Default::default()
stackslib/src/chainstate/stacks/index/marf.rs:220:9: replace <impl MarfConnection for MARF<T>>::sqlite_conn -> &Connection with &Default::default()
stackslib/src/chainstate/stacks/index/marf.rs:277:9: replace MarfTransaction<'a, T>::get_open_chain_tip -> Option<&T> with Some(&Default::default())
stackslib/src/chainstate/stacks/index/marf.rs:302:9: replace MarfTransaction<'a, T>::sqlite_tx -> &Transaction<'a> with &Default::default()
stackslib/src/chainstate/stacks/index/marf.rs:306:9: replace MarfTransaction<'a, T>::sqlite_tx_mut -> &mut Transaction<'a> with Box::leak(Box::new(Default::default()))
stackslib/src/chainstate/stacks/index/marf.rs:313:9: replace MarfTransaction<'a, T>::reopen_readonly -> Result<MARF<T>, Error> with Ok(MARF::new())
stackslib/src/chainstate/stacks/index/marf.rs:313:9: replace MarfTransaction<'a, T>::reopen_readonly -> Result<MARF<T>, Error> with Ok(MARF::from_iter([Default::default()]))
stackslib/src/chainstate/stacks/index/marf.rs:313:9: replace MarfTransaction<'a, T>::reopen_readonly -> Result<MARF<T>, Error> with Ok(MARF::new(Default::default()))
stackslib/src/chainstate/stacks/index/marf.rs:313:9: replace MarfTransaction<'a, T>::reopen_readonly -> Result<MARF<T>, Error> with Ok(MARF::from(Default::default()))
stackslib/src/chainstate/stacks/index/marf.rs:501:9: replace MarfTransaction<'a, T>::begin_unconfirmed -> Result<T, Error> with Ok(Default::default())
stackslib/src/chainstate/stacks/index/marf.rs:617:9: replace MARF<T>::walk_backptr -> Result<(TrieNodeType, TrieHash, TriePtr, u32), Error> with Ok((Default::default(), Default::default(), Default::default(), 0))
stackslib/src/chainstate/stacks/index/marf.rs:617:9: replace MARF<T>::walk_backptr -> Result<(TrieNodeType, TrieHash, TriePtr, u32), Error> with Ok((Default::default(), Default::default(), Default::default(), 1))
stackslib/src/chainstate/stacks/index/marf.rs:677:9: replace MARF<T>::node_child_copy -> Result<(TrieNodeType, TrieHash, TriePtr, T), Error> with Ok((Default::default(), Default::default(), Default::default(), Default::default()))
stackslib/src/chainstate/stacks/index/marf.rs:784:9: replace MARF<T>::walk_cow -> Result<TrieCursor<T>, Error> with Ok(TrieCursor::new())
stackslib/src/chainstate/stacks/index/marf.rs:784:9: replace MARF<T>::walk_cow -> Result<TrieCursor<T>, Error> with Ok(TrieCursor::from_iter([Default::default()]))
stackslib/src/chainstate/stacks/index/marf.rs:784:9: replace MARF<T>::walk_cow -> Result<TrieCursor<T>, Error> with Ok(TrieCursor::new(Default::default()))
stackslib/src/chainstate/stacks/index/marf.rs:784:9: replace MARF<T>::walk_cow -> Result<TrieCursor<T>, Error> with Ok(TrieCursor::from(Default::default()))
stackslib/src/chainstate/stacks/index/marf.rs:889:9: replace MARF<T>::walk -> Result<(TrieCursor<T>, TrieNodeType), Error> with Ok((TrieCursor::new(), Default::default()))
stackslib/src/chainstate/stacks/index/marf.rs:889:9: replace MARF<T>::walk -> Result<(TrieCursor<T>, TrieNodeType), Error> with Ok((TrieCursor::from_iter([Default::default()]), Default::default()))
stackslib/src/chainstate/stacks/index/marf.rs:889:9: replace MARF<T>::walk -> Result<(TrieCursor<T>, TrieNodeType), Error> with Ok((TrieCursor::new(Default::default()), Default::default()))
stackslib/src/chainstate/stacks/index/marf.rs:889:9: replace MARF<T>::walk -> Result<(TrieCursor<T>, TrieNodeType), Error> with Ok((TrieCursor::from(Default::default()), Default::default()))
stackslib/src/chainstate/stacks/index/marf.rs:997:9: replace MARF<T>::get_path -> Result<Option<TrieLeaf>, Error> with Ok(Some(Default::default()))
stackslib/src/chainstate/stacks/index/marf.rs:1102:9: replace MARF<T>::from_storage -> MARF<T> with MARF::new()
stackslib/src/chainstate/stacks/index/marf.rs:1102:9: replace MARF<T>::from_storage -> MARF<T> with MARF::new(Default::default())
stackslib/src/chainstate/stacks/index/marf.rs:1102:9: replace MARF<T>::from_storage -> MARF<T> with MARF::from_iter([Default::default()])
stackslib/src/chainstate/stacks/index/marf.rs:1102:9: replace MARF<T>::from_storage -> MARF<T> with MARF::from(Default::default())
stackslib/src/chainstate/stacks/index/marf.rs:1112:9: replace MARF<T>::from_path -> Result<MARF<T>, Error> with Ok(MARF::new())
stackslib/src/chainstate/stacks/index/marf.rs:1112:9: replace MARF<T>::from_path -> Result<MARF<T>, Error> with Ok(MARF::new(Default::default()))
stackslib/src/chainstate/stacks/index/marf.rs:1112:9: replace MARF<T>::from_path -> Result<MARF<T>, Error> with Ok(MARF::from_iter([Default::default()]))
stackslib/src/chainstate/stacks/index/marf.rs:1120:9: replace MARF<T>::from_path_unconfirmed -> Result<MARF<T>, Error> with Ok(MARF::new())
stackslib/src/chainstate/stacks/index/marf.rs:1112:9: replace MARF<T>::from_path -> Result<MARF<T>, Error> with Ok(MARF::from(Default::default()))
stackslib/src/chainstate/stacks/index/marf.rs:1120:9: replace MARF<T>::from_path_unconfirmed -> Result<MARF<T>, Error> with Ok(MARF::from_iter([Default::default()]))
stackslib/src/chainstate/stacks/index/marf.rs:1120:9: replace MARF<T>::from_path_unconfirmed -> Result<MARF<T>, Error> with Ok(MARF::new(Default::default()))
stackslib/src/chainstate/stacks/index/marf.rs:1120:9: replace MARF<T>::from_path_unconfirmed -> Result<MARF<T>, Error> with Ok(MARF::from(Default::default()))
stackslib/src/chainstate/stacks/index/marf.rs:1129:9: replace MARF<T>::get_by_key -> Result<Option<MARFValue>, Error> with Ok(Some(Default::default()))
stackslib/src/chainstate/stacks/index/marf.rs:1190:9: replace MARF<T>::get_block_at_height -> Result<Option<T>, Error> with Ok(Some(Default::default()))
stackslib/src/chainstate/stacks/index/marf.rs:1227:9: replace MARF<T>::make_unconfirmed_chain_tip -> T with Default::default()
stackslib/src/chainstate/stacks/index/marf.rs:1295:9: replace MARF<T>::begin_tx -> Result<MarfTransaction<'a, T>, Error> with Ok(MarfTransaction::new())
stackslib/src/chainstate/stacks/index/marf.rs:1295:9: replace MARF<T>::begin_tx -> Result<MarfTransaction<'a, T>, Error> with Ok(MarfTransaction::from_iter([Default::default()]))
stackslib/src/chainstate/stacks/index/marf.rs:1295:9: replace MARF<T>::begin_tx -> Result<MarfTransaction<'a, T>, Error> with Ok(MarfTransaction::new(Default::default()))
stackslib/src/chainstate/stacks/index/marf.rs:1295:9: replace MARF<T>::begin_tx -> Result<MarfTransaction<'a, T>, Error> with Ok(MarfTransaction::from(Default::default()))
stackslib/src/chainstate/stacks/index/marf.rs:1312:9: replace MARF<T>::get_with_proof -> Result<Option<(MARFValue, TrieMerkleProof<T>)>, Error> with Ok(Some((Default::default(), TrieMerkleProof::new())))
stackslib/src/chainstate/stacks/index/marf.rs:1312:9: replace MARF<T>::get_with_proof -> Result<Option<(MARFValue, TrieMerkleProof<T>)>, Error> with Ok(Some((Default::default(), TrieMerkleProof::from_iter([Default::default()]))))
stackslib/src/chainstate/stacks/index/marf.rs:1312:9: replace MARF<T>::get_with_proof -> Result<Option<(MARFValue, TrieMerkleProof<T>)>, Error> with Ok(Some((Default::default(), TrieMerkleProof::new(Default::default()))))
stackslib/src/chainstate/stacks/index/marf.rs:1312:9: replace MARF<T>::get_with_proof -> Result<Option<(MARFValue, TrieMerkleProof<T>)>, Error> with Ok(Some((Default::default(), TrieMerkleProof::from(Default::default()))))
stackslib/src/chainstate/stacks/index/marf.rs:1322:9: replace MARF<T>::get_bhh_at_height -> Result<Option<T>, Error> with Ok(Some(Default::default()))
stackslib/src/chainstate/stacks/index/marf.rs:1486:9: replace MARF<T>::get_open_chain_tip -> Option<&T> with Some(&Default::default())
stackslib/src/chainstate/stacks/index/marf.rs:1507:9: replace MARF<T>::storage_tx -> Result<Transaction<'a>, db_error> with Ok(Default::default())
stackslib/src/chainstate/stacks/index/marf.rs:1512:9: replace MARF<T>::reopen_storage_readonly -> Result<TrieFileStorage<T>, Error> with Ok(TrieFileStorage::new())
stackslib/src/chainstate/stacks/index/marf.rs:1512:9: replace MARF<T>::reopen_storage_readonly -> Result<TrieFileStorage<T>, Error> with Ok(TrieFileStorage::from_iter([Default::default()]))
stackslib/src/chainstate/stacks/index/marf.rs:1512:9: replace MARF<T>::reopen_storage_readonly -> Result<TrieFileStorage<T>, Error> with Ok(TrieFileStorage::new(Default::default()))
stackslib/src/chainstate/stacks/index/marf.rs:1512:9: replace MARF<T>::reopen_storage_readonly -> Result<TrieFileStorage<T>, Error> with Ok(TrieFileStorage::from(Default::default()))
stackslib/src/chainstate/stacks/index/marf.rs:1521:9: replace MARF<T>::reopen_readonly -> Result<MARF<T>, Error> with Ok(MARF::new())
stackslib/src/chainstate/stacks/index/marf.rs:1521:9: replace MARF<T>::reopen_readonly -> Result<MARF<T>, Error> with Ok(MARF::from_iter([Default::default()]))
stackslib/src/chainstate/stacks/index/marf.rs:1521:9: replace MARF<T>::reopen_readonly -> Result<MARF<T>, Error> with Ok(MARF::from(Default::default()))
stackslib/src/chainstate/stacks/index/marf.rs:1521:9: replace MARF<T>::reopen_readonly -> Result<MARF<T>, Error> with Ok(MARF::new(Default::default()))
stackslib/src/chainstate/stacks/index/marf.rs:1543:9: replace MARF<T>::into_sqlite_conn -> Connection with Default::default()
stackslib/src/chainstate/stacks/index/node.rs:59:9: replace <impl Error for CursorError>::cause -> Option<&dyn error::Error> with Some(&Default::default())
stackslib/src/chainstate/stacks/index/node.rs:120:9: replace TriePath::from_key -> TriePath with Default::default()
stackslib/src/chainstate/stacks/index/node.rs:400:9: replace TrieCursor<T>::node -> Option<TrieNodeType> with Some(Default::default())
stackslib/src/chainstate/stacks/index/node.rs:616:9: replace TrieLeaf::from_value -> TrieLeaf with Default::default()
stackslib/src/chainstate/stacks/index/node.rs:641:9: replace <impl StacksMessageCodec for TrieLeaf>::consensus_deserialize -> Result<TrieLeaf, codec_error> with Ok(Default::default())
stackslib/src/chainstate/stacks/index/node.rs:703:9: replace TrieNode16::from_node4 -> TrieNode16 with Default::default()
stackslib/src/chainstate/stacks/index/node.rs:752:9: replace TrieNode48::from_node16 -> TrieNode48 with Default::default()
stackslib/src/chainstate/stacks/index/node.rs:799:9: replace TrieNode256::from_node4 -> TrieNode256 with Default::default()
stackslib/src/chainstate/stacks/index/node.rs:812:9: replace TrieNode256::from_node48 -> TrieNode256 with Default::default()
stackslib/src/chainstate/stacks/index/node.rs:830:9: replace <impl TrieNode for TrieNode4>::empty -> TrieNode4 with Default::default()
stackslib/src/chainstate/stacks/index/node.rs:846:9: replace <impl TrieNode for TrieNode4>::from_bytes -> Result<TrieNode4, Error> with Ok(Default::default())
stackslib/src/chainstate/stacks/index/node.rs:885:9: replace <impl TrieNode for TrieNode4>::path -> &Vec<u8> with &vec![]
stackslib/src/chainstate/stacks/index/node.rs:885:9: replace <impl TrieNode for TrieNode4>::path -> &Vec<u8> with &vec![0]
stackslib/src/chainstate/stacks/index/node.rs:885:9: replace <impl TrieNode for TrieNode4>::path -> &Vec<u8> with &vec![1]
stackslib/src/chainstate/stacks/index/node.rs:889:9: replace <impl TrieNode for TrieNode4>::as_trie_node_type -> TrieNodeType with Default::default()
stackslib/src/chainstate/stacks/index/node.rs:899:9: replace <impl TrieNode for TrieNode16>::empty -> TrieNode16 with Default::default()
stackslib/src/chainstate/stacks/index/node.rs:915:9: replace <impl TrieNode for TrieNode16>::from_bytes -> Result<TrieNode16, Error> with Ok(Default::default())
stackslib/src/chainstate/stacks/index/node.rs:955:9: replace <impl TrieNode for TrieNode16>::path -> &Vec<u8> with &vec![]
stackslib/src/chainstate/stacks/index/node.rs:955:9: replace <impl TrieNode for TrieNode16>::path -> &Vec<u8> with &vec![0]
stackslib/src/chainstate/stacks/index/node.rs:955:9: replace <impl TrieNode for TrieNode16>::path -> &Vec<u8> with &vec![1]
stackslib/src/chainstate/stacks/index/node.rs:959:9: replace <impl TrieNode for TrieNode16>::as_trie_node_type -> TrieNodeType with Default::default()
stackslib/src/chainstate/stacks/index/node.rs:969:9: replace <impl TrieNode for TrieNode48>::empty -> TrieNode48 with Default::default()
stackslib/src/chainstate/stacks/index/node.rs:1000:9: replace <impl TrieNode for TrieNode48>::from_bytes -> Result<TrieNode48, Error> with Ok(Default::default())
stackslib/src/chainstate/stacks/index/node.rs:1092:9: replace <impl TrieNode for TrieNode48>::path -> &Vec<u8> with &vec![]
stackslib/src/chainstate/stacks/index/node.rs:1092:9: replace <impl TrieNode for TrieNode48>::path -> &Vec<u8> with &vec![0]
stackslib/src/chainstate/stacks/index/node.rs:1092:9: replace <impl TrieNode for TrieNode48>::path -> &Vec<u8> with &vec![1]
stackslib/src/chainstate/stacks/index/node.rs:1096:9: replace <impl TrieNode for TrieNode48>::as_trie_node_type -> TrieNodeType with Default::default()
stackslib/src/chainstate/stacks/index/node.rs:1106:9: replace <impl TrieNode for TrieNode256>::empty -> TrieNode256 with Default::default()
stackslib/src/chainstate/stacks/index/node.rs:1120:9: replace <impl TrieNode for TrieNode256>::from_bytes -> Result<TrieNode256, Error> with Ok(Default::default())
stackslib/src/chainstate/stacks/index/node.rs:1155:9: replace <impl TrieNode for TrieNode256>::path -> &Vec<u8> with &vec![]
stackslib/src/chainstate/stacks/index/node.rs:1155:9: replace <impl TrieNode for TrieNode256>::path -> &Vec<u8> with &vec![0]
stackslib/src/chainstate/stacks/index/node.rs:1155:9: replace <impl TrieNode for TrieNode256>::path -> &Vec<u8> with &vec![1]
stackslib/src/chainstate/stacks/index/node.rs:1159:9: replace <impl TrieNode for TrieNode256>::as_trie_node_type -> TrieNodeType with Default::default()
stackslib/src/chainstate/stacks/index/node.rs:1169:9: replace <impl TrieNode for TrieLeaf>::empty -> TrieLeaf with Default::default()
stackslib/src/chainstate/stacks/index/node.rs:1188:9: replace <impl TrieNode for TrieLeaf>::from_bytes -> Result<TrieLeaf, Error> with Ok(Default::default())
stackslib/src/chainstate/stacks/index/node.rs:1234:9: replace <impl TrieNode for TrieLeaf>::path -> &Vec<u8> with &vec![]
stackslib/src/chainstate/stacks/index/node.rs:1234:9: replace <impl TrieNode for TrieLeaf>::path -> &Vec<u8> with &vec![0]
stackslib/src/chainstate/stacks/index/node.rs:1234:9: replace <impl TrieNode for TrieLeaf>::path -> &Vec<u8> with &vec![1]
stackslib/src/chainstate/stacks/index/node.rs:1238:9: replace <impl TrieNode for TrieLeaf>::as_trie_node_type -> TrieNodeType with Default::default()
stackslib/src/chainstate/stacks/index/node.rs:1356:9: replace TrieNodeType::path_bytes -> &Vec<u8> with &vec![]
stackslib/src/chainstate/stacks/index/node.rs:1356:9: replace TrieNodeType::path_bytes -> &Vec<u8> with &vec![0]
stackslib/src/chainstate/stacks/index/node.rs:1356:9: replace TrieNodeType::path_bytes -> &Vec<u8> with &vec![1]
stackslib/src/chainstate/stacks/index/profile.rs:469:9: replace TrieBenchmark::write_children_hashes_start -> SystemTime with Default::default()
stackslib/src/chainstate/stacks/index/profile.rs:475:9: replace TrieBenchmark::write_children_hashes_empty_start -> SystemTime with Default::default()
stackslib/src/chainstate/stacks/index/profile.rs:481:9: replace TrieBenchmark::write_children_hashes_same_block_start -> SystemTime with Default::default()
stackslib/src/chainstate/stacks/index/profile.rs:487:9: replace TrieBenchmark::write_children_hashes_ancestor_block_start -> SystemTime with Default::default()
stackslib/src/chainstate/stacks/index/proofs.rs:69:9: replace ProofTriePtr<T>::try_from_trie_ptr -> Result<ProofTriePtr<T>, Error> with Ok(ProofTriePtr::new())
stackslib/src/chainstate/stacks/index/proofs.rs:69:9: replace ProofTriePtr<T>::try_from_trie_ptr -> Result<ProofTriePtr<T>, Error> with Ok(ProofTriePtr::from_iter([Default::default()]))
stackslib/src/chainstate/stacks/index/proofs.rs:69:9: replace ProofTriePtr<T>::try_from_trie_ptr -> Result<ProofTriePtr<T>, Error> with Ok(ProofTriePtr::new(Default::default()))
stackslib/src/chainstate/stacks/index/proofs.rs:69:9: replace ProofTriePtr<T>::try_from_trie_ptr -> Result<ProofTriePtr<T>, Error> with Ok(ProofTriePtr::from(Default::default()))
stackslib/src/chainstate/stacks/index/proofs.rs:89:9: replace ProofTrieNode<T>::ptrs -> &[ProofTriePtr<T>] with Vec::leak(vec![ProofTriePtr::new()])
stackslib/src/chainstate/stacks/index/proofs.rs:89:9: replace ProofTrieNode<T>::ptrs -> &[ProofTriePtr<T>] with Vec::leak(vec![ProofTriePtr::from_iter([Default::default()])])
stackslib/src/chainstate/stacks/index/proofs.rs:89:9: replace ProofTrieNode<T>::ptrs -> &[ProofTriePtr<T>] with Vec::leak(vec![ProofTriePtr::new(Default::default())])
stackslib/src/chainstate/stacks/index/proofs.rs:89:9: replace ProofTrieNode<T>::ptrs -> &[ProofTriePtr<T>] with Vec::leak(vec![ProofTriePtr::from(Default::default())])
stackslib/src/chainstate/stacks/index/proofs.rs:96:9: replace ProofTrieNode<T>::try_from_trie_node -> Result<ProofTrieNode<T>, Error> with Ok(ProofTrieNode::new())
stackslib/src/chainstate/stacks/index/proofs.rs:96:9: replace ProofTrieNode<T>::try_from_trie_node -> Result<ProofTrieNode<T>, Error> with Ok(ProofTrieNode::from_iter([Default::default()]))
stackslib/src/chainstate/stacks/index/proofs.rs:96:9: replace ProofTrieNode<T>::try_from_trie_node -> Result<ProofTrieNode<T>, Error> with Ok(ProofTrieNode::new(Default::default()))
stackslib/src/chainstate/stacks/index/proofs.rs:96:9: replace ProofTrieNode<T>::try_from_trie_node -> Result<ProofTrieNode<T>, Error> with Ok(ProofTrieNode::from(Default::default()))
stackslib/src/chainstate/stacks/index/proofs.rs:216:9: replace <impl Deref for TrieMerkleProof<T>>::deref -> &Vec<TrieMerkleProofType<T>> with &vec![]
stackslib/src/chainstate/stacks/index/proofs.rs:216:9: replace <impl Deref for TrieMerkleProof<T>>::deref -> &Vec<TrieMerkleProofType<T>> with &vec![TrieMerkleProofType::new()]
stackslib/src/chainstate/stacks/index/proofs.rs:216:9: replace <impl Deref for TrieMerkleProof<T>>::deref -> &Vec<TrieMerkleProofType<T>> with &vec![TrieMerkleProofType::from_iter([Default::default()])]
stackslib/src/chainstate/stacks/index/proofs.rs:216:9: replace <impl Deref for TrieMerkleProof<T>>::deref -> &Vec<TrieMerkleProofType<T>> with &vec![TrieMerkleProofType::new(Default::default())]
stackslib/src/chainstate/stacks/index/proofs.rs:216:9: replace <impl Deref for TrieMerkleProof<T>>::deref -> &Vec<TrieMerkleProofType<T>> with &vec![TrieMerkleProofType::from(Default::default())]
stackslib/src/chainstate/stacks/index/proofs.rs:254:9: replace <impl StacksMessageCodec for ProofTriePtr<T>>::consensus_deserialize -> Result<ProofTriePtr<T>, codec_error> with Ok(ProofTriePtr::new())
stackslib/src/chainstate/stacks/index/proofs.rs:254:9: replace <impl StacksMessageCodec for ProofTriePtr<T>>::consensus_deserialize -> Result<ProofTriePtr<T>, codec_error> with Ok(ProofTriePtr::from_iter([Default::default()]))
stackslib/src/chainstate/stacks/index/proofs.rs:254:9: replace <impl StacksMessageCodec for ProofTriePtr<T>>::consensus_deserialize -> Result<ProofTriePtr<T>, codec_error> with Ok(ProofTriePtr::new(Default::default()))
stackslib/src/chainstate/stacks/index/proofs.rs:254:9: replace <impl StacksMessageCodec for ProofTriePtr<T>>::consensus_deserialize -> Result<ProofTriePtr<T>, codec_error> with Ok(ProofTriePtr::from(Default::default()))
stackslib/src/chainstate/stacks/index/proofs.rs:274:9: replace <impl StacksMessageCodec for ProofTrieNode<T>>::consensus_deserialize -> Result<ProofTrieNode<T>, codec_error> with Ok(ProofTrieNode::new())
stackslib/src/chainstate/stacks/index/proofs.rs:274:9: replace <impl StacksMessageCodec for ProofTrieNode<T>>::consensus_deserialize -> Result<ProofTrieNode<T>, codec_error> with Ok(ProofTrieNode::from_iter([Default::default()]))
stackslib/src/chainstate/stacks/index/proofs.rs:274:9: replace <impl StacksMessageCodec for ProofTrieNode<T>>::consensus_deserialize -> Result<ProofTrieNode<T>, codec_error> with Ok(ProofTrieNode::new(Default::default()))
stackslib/src/chainstate/stacks/index/proofs.rs:274:9: replace <impl StacksMessageCodec for ProofTrieNode<T>>::consensus_deserialize -> Result<ProofTrieNode<T>, codec_error> with Ok(ProofTrieNode::from(Default::default()))
stackslib/src/chainstate/stacks/index/proofs.rs:320:9: replace <impl StacksMessageCodec for TrieMerkleProofType<T>>::consensus_deserialize -> Result<TrieMerkleProofType<T>, codec_error> with Ok(TrieMerkleProofType::new())
stackslib/src/chainstate/stacks/index/proofs.rs:320:9: replace <impl StacksMessageCodec for TrieMerkleProofType<T>>::consensus_deserialize -> Result<TrieMerkleProofType<T>, codec_error> with Ok(TrieMerkleProofType::from_iter([Default::default()]))
stackslib/src/chainstate/stacks/index/proofs.rs:320:9: replace <impl StacksMessageCodec for TrieMerkleProofType<T>>::consensus_deserialize -> Result<TrieMerkleProofType<T>, codec_error> with Ok(TrieMerkleProofType::new(Default::default()))
stackslib/src/chainstate/stacks/index/proofs.rs:320:9: replace <impl StacksMessageCodec for TrieMerkleProofType<T>>::consensus_deserialize -> Result<TrieMerkleProofType<T>, codec_error> with Ok(TrieMerkleProofType::from(Default::default()))
stackslib/src/chainstate/stacks/index/proofs.rs:359:9: replace <impl StacksMessageCodec for TrieMerkleProof<T>>::consensus_deserialize -> Result<TrieMerkleProof<T>, codec_error> with Ok(TrieMerkleProof::new())
stackslib/src/chainstate/stacks/index/proofs.rs:359:9: replace <impl StacksMessageCodec for TrieMerkleProof<T>>::consensus_deserialize -> Result<TrieMerkleProof<T>, codec_error> with Ok(TrieMerkleProof::from_iter([Default::default()]))
stackslib/src/chainstate/stacks/index/proofs.rs:359:9: replace <impl StacksMessageCodec for TrieMerkleProof<T>>::consensus_deserialize -> Result<TrieMerkleProof<T>, codec_error> with Ok(TrieMerkleProof::new(Default::default()))
stackslib/src/chainstate/stacks/index/proofs.rs:359:9: replace <impl StacksMessageCodec for TrieMerkleProof<T>>::consensus_deserialize -> Result<TrieMerkleProof<T>, codec_error> with Ok(TrieMerkleProof::from(Default::default()))
stackslib/src/chainstate/stacks/index/proofs.rs:408:9: replace TrieMerkleProof<T>::ptr_to_segment_proof_node -> Result<TrieMerkleProofType<T>, Error> with Ok(TrieMerkleProofType::new())
stackslib/src/chainstate/stacks/index/proofs.rs:408:9: replace TrieMerkleProof<T>::ptr_to_segment_proof_node -> Result<TrieMerkleProofType<T>, Error> with Ok(TrieMerkleProofType::from_iter([Default::default()]))
stackslib/src/chainstate/stacks/index/proofs.rs:408:9: replace TrieMerkleProof<T>::ptr_to_segment_proof_node -> Result<TrieMerkleProofType<T>, Error> with Ok(TrieMerkleProofType::new(Default::default()))
stackslib/src/chainstate/stacks/index/proofs.rs:408:9: replace TrieMerkleProof<T>::ptr_to_segment_proof_node -> Result<TrieMerkleProofType<T>, Error> with Ok(TrieMerkleProofType::from(Default::default()))
stackslib/src/chainstate/stacks/index/proofs.rs:477:9: replace TrieMerkleProof<T>::make_initial_shunt_proof -> Result<Vec<TrieMerkleProofType<T>>, Error> with Ok(vec![TrieMerkleProofType::new()])
stackslib/src/chainstate/stacks/index/proofs.rs:477:9: replace TrieMerkleProof<T>::make_initial_shunt_proof -> Result<Vec<TrieMerkleProofType<T>>, Error> with Ok(vec![TrieMerkleProofType::from_iter([Default::default()])])
stackslib/src/chainstate/stacks/index/proofs.rs:477:9: replace TrieMerkleProof<T>::make_initial_shunt_proof -> Result<Vec<TrieMerkleProofType<T>>, Error> with Ok(vec![TrieMerkleProofType::new(Default::default())])
stackslib/src/chainstate/stacks/index/proofs.rs:477:9: replace TrieMerkleProof<T>::make_initial_shunt_proof -> Result<Vec<TrieMerkleProofType<T>>, Error> with Ok(vec![TrieMerkleProofType::from(Default::default())])
stackslib/src/chainstate/stacks/index/proofs.rs:509:9: replace TrieMerkleProof<T>::make_backptr_shunt_proof -> Result<Vec<TrieMerkleProofType<T>>, Error> with Ok(vec![TrieMerkleProofType::new()])
stackslib/src/chainstate/stacks/index/proofs.rs:509:9: replace TrieMerkleProof<T>::make_backptr_shunt_proof -> Result<Vec<TrieMerkleProofType<T>>, Error> with Ok(vec![TrieMerkleProofType::from_iter([Default::default()])])
stackslib/src/chainstate/stacks/index/proofs.rs:509:9: replace TrieMerkleProof<T>::make_backptr_shunt_proof -> Result<Vec<TrieMerkleProofType<T>>, Error> with Ok(vec![TrieMerkleProofType::new(Default::default())])
stackslib/src/chainstate/stacks/index/proofs.rs:509:9: replace TrieMerkleProof<T>::make_backptr_shunt_proof -> Result<Vec<TrieMerkleProofType<T>>, Error> with Ok(vec![TrieMerkleProofType::from(Default::default())])
stackslib/src/chainstate/stacks/index/proofs.rs:842:9: replace TrieMerkleProof<T>::make_segment_proof -> Result<Vec<TrieMerkleProofType<T>>, Error> with Ok(vec![TrieMerkleProofType::new()])
stackslib/src/chainstate/stacks/index/proofs.rs:842:9: replace TrieMerkleProof<T>::make_segment_proof -> Result<Vec<TrieMerkleProofType<T>>, Error> with Ok(vec![TrieMerkleProofType::from_iter([Default::default()])])
stackslib/src/chainstate/stacks/index/proofs.rs:842:9: replace TrieMerkleProof<T>::make_segment_proof -> Result<Vec<TrieMerkleProofType<T>>, Error> with Ok(vec![TrieMerkleProofType::new(Default::default())])
stackslib/src/chainstate/stacks/index/proofs.rs:842:9: replace TrieMerkleProof<T>::make_segment_proof -> Result<Vec<TrieMerkleProofType<T>>, Error> with Ok(vec![TrieMerkleProofType::from(Default::default())])
stackslib/src/chainstate/stacks/index/proofs.rs:1368:9: replace TrieMerkleProof<T>::walk_to_leaf_or_backptr -> Result<(TrieCursor<T>, TrieNodeType, TriePtr), Error> with Ok((TrieCursor::new(), Default::default(), Default::default()))
stackslib/src/chainstate/stacks/index/proofs.rs:1368:9: replace TrieMerkleProof<T>::walk_to_leaf_or_backptr -> Result<(TrieCursor<T>, TrieNodeType, TriePtr), Error> with Ok((TrieCursor::from_iter([Default::default()]), Default::default(), Default::default()))
stackslib/src/chainstate/stacks/index/proofs.rs:1368:9: replace TrieMerkleProof<T>::walk_to_leaf_or_backptr -> Result<(TrieCursor<T>, TrieNodeType, TriePtr), Error> with Ok((TrieCursor::new(Default::default()), Default::default(), Default::default()))
stackslib/src/chainstate/stacks/index/proofs.rs:1368:9: replace TrieMerkleProof<T>::walk_to_leaf_or_backptr -> Result<(TrieCursor<T>, TrieNodeType, TriePtr), Error> with Ok((TrieCursor::from(Default::default()), Default::default(), Default::default()))
stackslib/src/chainstate/stacks/index/proofs.rs:1448:9: replace TrieMerkleProof<T>::from_path -> Result<TrieMerkleProof<T>, Error> with Ok(TrieMerkleProof::new())
stackslib/src/chainstate/stacks/index/proofs.rs:1448:9: replace TrieMerkleProof<T>::from_path -> Result<TrieMerkleProof<T>, Error> with Ok(TrieMerkleProof::from_iter([Default::default()]))
stackslib/src/chainstate/stacks/index/proofs.rs:1448:9: replace TrieMerkleProof<T>::from_path -> Result<TrieMerkleProof<T>, Error> with Ok(TrieMerkleProof::new(Default::default()))
stackslib/src/chainstate/stacks/index/proofs.rs:1448:9: replace TrieMerkleProof<T>::from_path -> Result<TrieMerkleProof<T>, Error> with Ok(TrieMerkleProof::from(Default::default()))
stackslib/src/chainstate/stacks/index/proofs.rs:1565:9: replace TrieMerkleProof<T>::from_entry -> Result<TrieMerkleProof<T>, Error> with Ok(TrieMerkleProof::new())
stackslib/src/chainstate/stacks/index/proofs.rs:1565:9: replace TrieMerkleProof<T>::from_entry -> Result<TrieMerkleProof<T>, Error> with Ok(TrieMerkleProof::from_iter([Default::default()]))
stackslib/src/chainstate/stacks/index/proofs.rs:1565:9: replace TrieMerkleProof<T>::from_entry -> Result<TrieMerkleProof<T>, Error> with Ok(TrieMerkleProof::new(Default::default()))
stackslib/src/chainstate/stacks/index/proofs.rs:1565:9: replace TrieMerkleProof<T>::from_entry -> Result<TrieMerkleProof<T>, Error> with Ok(TrieMerkleProof::from(Default::default()))
stackslib/src/chainstate/stacks/index/proofs.rs:1576:9: replace TrieMerkleProof<T>::from_raw_entry -> Result<TrieMerkleProof<T>, Error> with Ok(TrieMerkleProof::new())
stackslib/src/chainstate/stacks/index/proofs.rs:1576:9: replace TrieMerkleProof<T>::from_raw_entry -> Result<TrieMerkleProof<T>, Error> with Ok(TrieMerkleProof::from_iter([Default::default()]))
stackslib/src/chainstate/stacks/index/proofs.rs:1576:9: replace TrieMerkleProof<T>::from_raw_entry -> Result<TrieMerkleProof<T>, Error> with Ok(TrieMerkleProof::new(Default::default()))
stackslib/src/chainstate/stacks/index/proofs.rs:1576:9: replace TrieMerkleProof<T>::from_raw_entry -> Result<TrieMerkleProof<T>, Error> with Ok(TrieMerkleProof::from(Default::default()))
stackslib/src/chainstate/stacks/index/storage.rs:73:9: replace <impl BlockMap for TrieFileStorage<T>>::get_block_hash -> Result<T, Error> with Ok(Default::default())
stackslib/src/chainstate/stacks/index/storage.rs:77:9: replace <impl BlockMap for TrieFileStorage<T>>::get_block_hash_caching -> Result<&T, Error> with Ok(&Default::default())
stackslib/src/chainstate/stacks/index/storage.rs:112:9: replace <impl BlockMap for TrieStorageConnection<'a, T>>::get_block_hash -> Result<T, Error> with Ok(Default::default())
stackslib/src/chainstate/stacks/index/storage.rs:116:9: replace <impl BlockMap for TrieStorageConnection<'a, T>>::get_block_hash_caching -> Result<&T, Error> with Ok(&Default::default())
stackslib/src/chainstate/stacks/index/storage.rs:151:9: replace <impl BlockMap for TrieStorageTransaction<'a, T>>::get_block_hash -> Result<T, Error> with Ok(Default::default())
stackslib/src/chainstate/stacks/index/storage.rs:155:9: replace <impl BlockMap for TrieStorageTransaction<'a, T>>::get_block_hash_caching -> Result<&T, Error> with Ok(&Default::default())
stackslib/src/chainstate/stacks/index/storage.rs:175:9: replace <impl BlockMap for TrieSqlHashMapCursor<'_, T>>::get_block_hash -> Result<T, Error> with Ok(Default::default())
stackslib/src/chainstate/stacks/index/storage.rs:179:9: replace <impl BlockMap for TrieSqlHashMapCursor<'_, T>>::get_block_hash_caching -> Result<&T, Error> with Ok(&Default::default())
stackslib/src/chainstate/stacks/index/storage.rs:258:9: replace UncommittedState<T>::trie_ram_ref -> &TrieRAM<T> with &TrieRAM::new()
stackslib/src/chainstate/stacks/index/storage.rs:258:9: replace UncommittedState<T>::trie_ram_ref -> &TrieRAM<T> with &TrieRAM::from_iter([Default::default()])
stackslib/src/chainstate/stacks/index/storage.rs:258:9: replace UncommittedState<T>::trie_ram_ref -> &TrieRAM<T> with &TrieRAM::new(Default::default())
stackslib/src/chainstate/stacks/index/storage.rs:258:9: replace UncommittedState<T>::trie_ram_ref -> &TrieRAM<T> with &TrieRAM::from(Default::default())
stackslib/src/chainstate/stacks/index/storage.rs:266:9: replace UncommittedState<T>::trie_ram_mut -> &mut TrieRAM<T> with Box::leak(Box::new(TrieRAM::new()))
stackslib/src/chainstate/stacks/index/storage.rs:266:9: replace UncommittedState<T>::trie_ram_mut -> &mut TrieRAM<T> with Box::leak(Box::new(TrieRAM::from_iter([Default::default()])))
stackslib/src/chainstate/stacks/index/storage.rs:266:9: replace UncommittedState<T>::trie_ram_mut -> &mut TrieRAM<T> with Box::leak(Box::new(TrieRAM::new(Default::default())))
stackslib/src/chainstate/stacks/index/storage.rs:266:9: replace UncommittedState<T>::trie_ram_mut -> &mut TrieRAM<T> with Box::leak(Box::new(TrieRAM::from(Default::default())))
stackslib/src/chainstate/stacks/index/storage.rs:279:9: replace UncommittedState<T>::read_nodetype -> Result<(TrieNodeType, TrieHash), Error> with Ok((Default::default(), Default::default()))
stackslib/src/chainstate/stacks/index/storage.rs:324:9: replace UncommittedState<T>::seal -> Result<UncommittedState<T>, Error> with Ok(UncommittedState::new())
stackslib/src/chainstate/stacks/index/storage.rs:324:9: replace UncommittedState<T>::seal -> Result<UncommittedState<T>, Error> with Ok(UncommittedState::from_iter([Default::default()]))
stackslib/src/chainstate/stacks/index/storage.rs:324:9: replace UncommittedState<T>::seal -> Result<UncommittedState<T>, Error> with Ok(UncommittedState::new(Default::default()))
stackslib/src/chainstate/stacks/index/storage.rs:324:9: replace UncommittedState<T>::seal -> Result<UncommittedState<T>, Error> with Ok(UncommittedState::from(Default::default()))
stackslib/src/chainstate/stacks/index/storage.rs:426:9: replace TrieRAM<T>::from_data -> TrieRAM<T> with TrieRAM::new()
stackslib/src/chainstate/stacks/index/storage.rs:426:9: replace TrieRAM<T>::from_data -> TrieRAM<T> with TrieRAM::from_iter([Default::default()])
stackslib/src/chainstate/stacks/index/storage.rs:426:9: replace TrieRAM<T>::from_data -> TrieRAM<T> with TrieRAM::new(Default::default())
stackslib/src/chainstate/stacks/index/storage.rs:426:9: replace TrieRAM<T>::from_data -> TrieRAM<T> with TrieRAM::from(Default::default())
stackslib/src/chainstate/stacks/index/storage.rs:457:9: replace TrieRAM<T>::move_to -> TrieRAM<T> with TrieRAM::new()
stackslib/src/chainstate/stacks/index/storage.rs:457:9: replace TrieRAM<T>::move_to -> TrieRAM<T> with TrieRAM::from_iter([Default::default()])
stackslib/src/chainstate/stacks/index/storage.rs:457:9: replace TrieRAM<T>::move_to -> TrieRAM<T> with TrieRAM::new(Default::default())
stackslib/src/chainstate/stacks/index/storage.rs:457:9: replace TrieRAM<T>::move_to -> TrieRAM<T> with TrieRAM::from(Default::default())
stackslib/src/chainstate/stacks/index/storage.rs:504:9: replace TrieRAM<T>::with_reinstated_data -> R with Default::default()
stackslib/src/chainstate/stacks/index/storage.rs:893:9: replace TrieRAM<T>::load -> Result<TrieRAM<T>, Error> with Ok(TrieRAM::new())
stackslib/src/chainstate/stacks/index/storage.rs:893:9: replace TrieRAM<T>::load -> Result<TrieRAM<T>, Error> with Ok(TrieRAM::from_iter([Default::default()]))
stackslib/src/chainstate/stacks/index/storage.rs:893:9: replace TrieRAM<T>::load -> Result<TrieRAM<T>, Error> with Ok(TrieRAM::new(Default::default()))
stackslib/src/chainstate/stacks/index/storage.rs:893:9: replace TrieRAM<T>::load -> Result<TrieRAM<T>, Error> with Ok(TrieRAM::from(Default::default()))
stackslib/src/chainstate/stacks/index/storage.rs:1002:9: replace TrieRAM<T>::get_nodetype -> Result<&(TrieNodeType, TrieHash), Error> with Ok(&(Default::default(), Default::default()))
stackslib/src/chainstate/stacks/index/storage.rs:1016:9: replace TrieRAM<T>::read_nodetype -> Result<(TrieNodeType, TrieHash), Error> with Ok((Default::default(), Default::default()))
stackslib/src/chainstate/stacks/index/storage.rs:1170:9: replace <impl Deref for SqliteConnection<'a>>::deref -> &Connection with &Default::default()
stackslib/src/chainstate/stacks/index/storage.rs:1180:9: replace <impl Deref for TrieStorageTransaction<'a, T>>::deref -> &TrieStorageConnection<'a, T> with &TrieStorageConnection::new()
stackslib/src/chainstate/stacks/index/storage.rs:1180:9: replace <impl Deref for TrieStorageTransaction<'a, T>>::deref -> &TrieStorageConnection<'a, T> with &TrieStorageConnection::from_iter([Default::default()])
stackslib/src/chainstate/stacks/index/storage.rs:1180:9: replace <impl Deref for TrieStorageTransaction<'a, T>>::deref -> &TrieStorageConnection<'a, T> with &TrieStorageConnection::new(Default::default())
stackslib/src/chainstate/stacks/index/storage.rs:1180:9: replace <impl Deref for TrieStorageTransaction<'a, T>>::deref -> &TrieStorageConnection<'a, T> with &TrieStorageConnection::from(Default::default())
stackslib/src/chainstate/stacks/index/storage.rs:1186:9: replace <impl DerefMut for TrieStorageTransaction<'a, T>>::deref_mut -> &mut TrieStorageConnection<'a, T> with Box::leak(Box::new(TrieStorageConnection::new()))
stackslib/src/chainstate/stacks/index/storage.rs:1186:9: replace <impl DerefMut for TrieStorageTransaction<'a, T>>::deref_mut -> &mut TrieStorageConnection<'a, T> with Box::leak(Box::new(TrieStorageConnection::from_iter([Default::default()])))
stackslib/src/chainstate/stacks/index/storage.rs:1186:9: replace <impl DerefMut for TrieStorageTransaction<'a, T>>::deref_mut -> &mut TrieStorageConnection<'a, T> with Box::leak(Box::new(TrieStorageConnection::new(Default::default())))
stackslib/src/chainstate/stacks/index/storage.rs:1186:9: replace <impl DerefMut for TrieStorageTransaction<'a, T>>::deref_mut -> &mut TrieStorageConnection<'a, T> with Box::leak(Box::new(TrieStorageConnection::from(Default::default())))
stackslib/src/chainstate/stacks/index/storage.rs:1303:5: replace marf_sqlite_open -> Result<Connection, db_error> with Ok(Default::default())
stackslib/src/chainstate/stacks/index/storage.rs:1328:9: replace TrieFileStorage<T>::connection -> TrieStorageConnection<'a, T> with TrieStorageConnection::new()
stackslib/src/chainstate/stacks/index/storage.rs:1328:9: replace TrieFileStorage<T>::connection -> TrieStorageConnection<'a, T> with TrieStorageConnection::from_iter([Default::default()])
stackslib/src/chainstate/stacks/index/storage.rs:1328:9: replace TrieFileStorage<T>::connection -> TrieStorageConnection<'a, T> with TrieStorageConnection::new(Default::default())
stackslib/src/chainstate/stacks/index/storage.rs:1328:9: replace TrieFileStorage<T>::connection -> TrieStorageConnection<'a, T> with TrieStorageConnection::from(Default::default())
stackslib/src/chainstate/stacks/index/storage.rs:1344:9: replace TrieFileStorage<T>::transaction -> Result<TrieStorageTransaction<'a, T>, Error> with Ok(TrieStorageTransaction::new())
stackslib/src/chainstate/stacks/index/storage.rs:1344:9: replace TrieFileStorage<T>::transaction -> Result<TrieStorageTransaction<'a, T>, Error> with Ok(TrieStorageTransaction::from_iter([Default::default()]))
stackslib/src/chainstate/stacks/index/storage.rs:1344:9: replace TrieFileStorage<T>::transaction -> Result<TrieStorageTransaction<'a, T>, Error> with Ok(TrieStorageTransaction::new(Default::default()))
stackslib/src/chainstate/stacks/index/storage.rs:1344:9: replace TrieFileStorage<T>::transaction -> Result<TrieStorageTransaction<'a, T>, Error> with Ok(TrieStorageTransaction::from(Default::default()))
stackslib/src/chainstate/stacks/index/storage.rs:1365:9: replace TrieFileStorage<T>::sqlite_conn -> &Connection with &Default::default()
stackslib/src/chainstate/stacks/index/storage.rs:1369:9: replace TrieFileStorage<T>::sqlite_tx -> Result<Transaction<'a>, db_error> with Ok(Default::default())
stackslib/src/chainstate/stacks/index/storage.rs:1373:9: replace TrieFileStorage<T>::into_sqlite_conn -> Connection with Default::default()
stackslib/src/chainstate/stacks/index/storage.rs:1382:9: replace TrieFileStorage<T>::open_opts -> Result<TrieFileStorage<T>, Error> with Ok(TrieFileStorage::new())
stackslib/src/chainstate/stacks/index/storage.rs:1382:9: replace TrieFileStorage<T>::open_opts -> Result<TrieFileStorage<T>, Error> with Ok(TrieFileStorage::from_iter([Default::default()]))
stackslib/src/chainstate/stacks/index/storage.rs:1382:9: replace TrieFileStorage<T>::open_opts -> Result<TrieFileStorage<T>, Error> with Ok(TrieFileStorage::new(Default::default()))
stackslib/src/chainstate/stacks/index/storage.rs:1382:9: replace TrieFileStorage<T>::open_opts -> Result<TrieFileStorage<T>, Error> with Ok(TrieFileStorage::from(Default::default()))
stackslib/src/chainstate/stacks/index/storage.rs:1493:9: replace TrieFileStorage<T>::open -> Result<TrieFileStorage<T>, Error> with Ok(TrieFileStorage::new())
stackslib/src/chainstate/stacks/index/storage.rs:1493:9: replace TrieFileStorage<T>::open -> Result<TrieFileStorage<T>, Error> with Ok(TrieFileStorage::from_iter([Default::default()]))
stackslib/src/chainstate/stacks/index/storage.rs:1493:9: replace TrieFileStorage<T>::open -> Result<TrieFileStorage<T>, Error> with Ok(TrieFileStorage::new(Default::default()))
stackslib/src/chainstate/stacks/index/storage.rs:1493:9: replace TrieFileStorage<T>::open -> Result<TrieFileStorage<T>, Error> with Ok(TrieFileStorage::from(Default::default()))
stackslib/src/chainstate/stacks/index/storage.rs:1500:9: replace TrieFileStorage<T>::open_readonly -> Result<TrieFileStorage<T>, Error> with Ok(TrieFileStorage::new())
stackslib/src/chainstate/stacks/index/storage.rs:1500:9: replace TrieFileStorage<T>::open_readonly -> Result<TrieFileStorage<T>, Error> with Ok(TrieFileStorage::from_iter([Default::default()]))
stackslib/src/chainstate/stacks/index/storage.rs:1500:9: replace TrieFileStorage<T>::open_readonly -> Result<TrieFileStorage<T>, Error> with Ok(TrieFileStorage::new(Default::default()))
stackslib/src/chainstate/stacks/index/storage.rs:1500:9: replace TrieFileStorage<T>::open_readonly -> Result<TrieFileStorage<T>, Error> with Ok(TrieFileStorage::from(Default::default()))
stackslib/src/chainstate/stacks/index/storage.rs:1508:9: replace TrieFileStorage<T>::open_unconfirmed -> Result<TrieFileStorage<T>, Error> with Ok(TrieFileStorage::new())
stackslib/src/chainstate/stacks/index/storage.rs:1508:9: replace TrieFileStorage<T>::open_unconfirmed -> Result<TrieFileStorage<T>, Error> with Ok(TrieFileStorage::from_iter([Default::default()]))
stackslib/src/chainstate/stacks/index/storage.rs:1508:9: replace TrieFileStorage<T>::open_unconfirmed -> Result<TrieFileStorage<T>, Error> with Ok(TrieFileStorage::new(Default::default()))
stackslib/src/chainstate/stacks/index/storage.rs:1508:9: replace TrieFileStorage<T>::open_unconfirmed -> Result<TrieFileStorage<T>, Error> with Ok(TrieFileStorage::from(Default::default()))
stackslib/src/chainstate/stacks/index/storage.rs:1528:9: replace TrieFileStorage<T>::reopen_readonly -> Result<TrieFileStorage<T>, Error> with Ok(TrieFileStorage::new())
stackslib/src/chainstate/stacks/index/storage.rs:1528:9: replace TrieFileStorage<T>::reopen_readonly -> Result<TrieFileStorage<T>, Error> with Ok(TrieFileStorage::from_iter([Default::default()]))
stackslib/src/chainstate/stacks/index/storage.rs:1528:9: replace TrieFileStorage<T>::reopen_readonly -> Result<TrieFileStorage<T>, Error> with Ok(TrieFileStorage::new(Default::default()))
stackslib/src/chainstate/stacks/index/storage.rs:1528:9: replace TrieFileStorage<T>::reopen_readonly -> Result<TrieFileStorage<T>, Error> with Ok(TrieFileStorage::from(Default::default()))
stackslib/src/chainstate/stacks/index/storage.rs:1577:9: replace TrieFileStorage<T>::get_benchmarks -> TrieBenchmark with Default::default()
stackslib/src/chainstate/stacks/index/storage.rs:1581:9: replace TrieFileStorage<T>::bench_mut -> &mut TrieBenchmark with Box::leak(Box::new(Default::default()))
stackslib/src/chainstate/stacks/index/storage.rs:1593:9: replace TrieStorageTransaction<'a, T>::reopen_readonly -> Result<TrieFileStorage<T>, Error> with Ok(TrieFileStorage::new())
stackslib/src/chainstate/stacks/index/storage.rs:1593:9: replace TrieStorageTransaction<'a, T>::reopen_readonly -> Result<TrieFileStorage<T>, Error> with Ok(TrieFileStorage::from_iter([Default::default()]))
stackslib/src/chainstate/stacks/index/storage.rs:1593:9: replace TrieStorageTransaction<'a, T>::reopen_readonly -> Result<TrieFileStorage<T>, Error> with Ok(TrieFileStorage::new(Default::default()))
stackslib/src/chainstate/stacks/index/storage.rs:1593:9: replace TrieStorageTransaction<'a, T>::reopen_readonly -> Result<TrieFileStorage<T>, Error> with Ok(TrieFileStorage::from(Default::default()))
stackslib/src/chainstate/stacks/index/storage.rs:1650:9: replace TrieStorageTransaction<'a, T>::with_trie_blobs -> R with Default::default()
stackslib/src/chainstate/stacks/index/storage.rs:1913:9: replace TrieStorageTransaction<'a, T>::sqlite_tx -> &Transaction<'a> with &Default::default()
stackslib/src/chainstate/stacks/index/storage.rs:1924:9: replace TrieStorageTransaction<'a, T>::sqlite_tx_mut -> &mut Transaction<'a> with Box::leak(Box::new(Default::default()))
stackslib/src/chainstate/stacks/index/storage.rs:2273:9: replace TrieStorageConnection<'a, T>::get_cur_block -> T with Default::default()
stackslib/src/chainstate/stacks/index/storage.rs:2278:9: replace TrieStorageConnection<'a, T>::get_cur_block_and_id -> (T, Option<u32>) with (Default::default(), None)
stackslib/src/chainstate/stacks/index/storage.rs:2278:9: replace TrieStorageConnection<'a, T>::get_cur_block_and_id -> (T, Option<u32>) with (Default::default(), Some(0))
stackslib/src/chainstate/stacks/index/storage.rs:2278:9: replace TrieStorageConnection<'a, T>::get_cur_block_and_id -> (T, Option<u32>) with (Default::default(), Some(1))
stackslib/src/chainstate/stacks/index/storage.rs:2283:9: replace TrieStorageConnection<'a, T>::get_block_from_local_id -> Result<&T, Error> with Ok(&Default::default())
stackslib/src/chainstate/stacks/index/storage.rs:2522:9: replace TrieStorageConnection<'a, T>::read_nodetype -> Result<(TrieNodeType, TrieHash), Error> with Ok((Default::default(), Default::default()))
stackslib/src/chainstate/stacks/index/storage.rs:2527:9: replace TrieStorageConnection<'a, T>::read_nodetype_nohash -> Result<TrieNodeType, Error> with Ok(Default::default())
stackslib/src/chainstate/stacks/index/storage.rs:2540:9: replace TrieStorageConnection<'a, T>::inner_read_persisted_nodetype -> Result<(TrieNodeType, TrieHash), Error> with Ok((Default::default(), Default::default()))
stackslib/src/chainstate/stacks/index/storage.rs:2589:9: replace TrieStorageConnection<'a, T>::read_nodetype_maybe_hash -> Result<(TrieNodeType, TrieHash), Error> with Ok((Default::default(), Default::default()))
stackslib/src/chainstate/stacks/index/storage.rs:2731:9: replace TrieStorageConnection<'a, T>::get_benchmarks -> TrieBenchmark with Default::default()
stackslib/src/chainstate/stacks/index/storage.rs:2735:9: replace TrieStorageConnection<'a, T>::bench_mut -> &mut TrieBenchmark with Box::leak(Box::new(Default::default()))
stackslib/src/chainstate/stacks/index/trie.rs:92:9: replace Trie::read_root_maybe_hash -> Result<(TrieNodeType, Option<TrieHash>), Error> with Ok((Default::default(), None))
stackslib/src/chainstate/stacks/index/trie.rs:92:9: replace Trie::read_root_maybe_hash -> Result<(TrieNodeType, Option<TrieHash>), Error> with Ok((Default::default(), Some(Default::default())))
stackslib/src/chainstate/stacks/index/trie.rs:126:9: replace Trie::read_root -> Result<(TrieNodeType, TrieHash), Error> with Ok((Default::default(), Default::default()))
stackslib/src/chainstate/stacks/index/trie.rs:137:9: replace Trie::read_root_nohash -> Result<TrieNodeType, Error> with Ok(Default::default())
stackslib/src/chainstate/stacks/index/trie.rs:151:9: replace Trie::walk_from_maybe_hash -> Result<Option<(TriePtr, TrieNodeType, TrieHash)>, Error> with Ok(Some((Default::default(), Default::default(), Default::default())))
stackslib/src/chainstate/stacks/index/trie.rs:182:9: replace Trie::walk_from -> Result<Option<(TriePtr, TrieNodeType, TrieHash)>, Error> with Ok(Some((Default::default(), Default::default(), Default::default())))
stackslib/src/chainstate/stacks/index/trie.rs:190:9: replace Trie::walk_from_nohash -> Result<Option<(TriePtr, TrieNodeType)>, Error> with Ok(Some((Default::default(), Default::default())))
stackslib/src/chainstate/stacks/index/trie.rs:209:9: replace Trie::walk_backptr -> Result<(TrieNodeType, TrieHash, TriePtr), Error> with Ok((Default::default(), Default::default(), Default::default()))
stackslib/src/chainstate/stacks/index/trie_sql.rs:222:5: replace get_block_hash -> Result<T, Error> with Ok(Default::default())
stackslib/src/chainstate/stacks/index/trie_sql.rs:402:5: replace open_trie_blob -> Result<Blob<'a>, Error> with Ok(Default::default())
stackslib/src/chainstate/stacks/index/trie_sql.rs:414:5: replace open_trie_blob_readonly -> Result<Blob<'a>, Error> with Ok(Default::default())
stackslib/src/chainstate/stacks/index/trie_sql.rs:491:5: replace read_node_type -> Result<(TrieNodeType, TrieHash), Error> with Ok((Default::default(), Default::default()))
stackslib/src/chainstate/stacks/index/trie_sql.rs:507:5: replace read_node_type_nohash -> Result<TrieNodeType, Error> with Ok(Default::default())
